# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AggregationType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The primary aggregation type value defining how to use the values for display."""

    AVERAGE = "Average"
    """Average value"""
    COUNT = "Count"
    """Total count"""
    NONE = "None"
    """Aggregation will be average in this case"""
    TOTAL = "Total"
    """Total sum"""
    PERCENTILE90 = "Percentile90"
    """90th percentile"""
    PERCENTILE95 = "Percentile95"
    """95th percentile"""
    PERCENTILE99 = "Percentile99"
    """99th percentile"""


class CertificateType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of certificate."""

    AKV_CERT_URI = "AKV_CERT_URI"
    """If the certificate is stored in an Azure Key Vault"""


class FileStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Validation status of the file."""

    NOT_VALIDATED = "NOT_VALIDATED"
    """File is not validated."""
    VALIDATION_SUCCESS = "VALIDATION_SUCCESS"
    """File is validated."""
    VALIDATION_FAILURE = "VALIDATION_FAILURE"
    """File validation is failed."""
    VALIDATION_INITIATED = "VALIDATION_INITIATED"
    """File validation is in progress."""
    VALIDATION_NOT_REQUIRED = "VALIDATION_NOT_REQUIRED"
    """Validation is not required."""


class FileType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """File type."""

    JMX_FILE = "JMX_FILE"
    """If file is jmx script"""
    USER_PROPERTIES = "USER_PROPERTIES"
    """If file is user properties"""
    ADDITIONAL_ARTIFACTS = "ADDITIONAL_ARTIFACTS"
    """If file is not any of other supported type"""


class Interval(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Interval."""

    PT5_S = "PT5S"
    """5 seconds, available only if test run duration is less than 10 minutes"""
    PT10_S = "PT10S"
    """10 seconds, available only if test run duration is less than 10 minutes"""
    PT1_M = "PT1M"
    """1 minute"""
    PT5_M = "PT5M"
    """5 minutes, available only if test run duration is greater than 1 minute"""
    PT1_H = "PT1H"
    """1 hour, available only if test run duration is greater than 1 minute"""


class MetricUnit(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The unit of the metric."""

    NOT_SPECIFIED = "NotSpecified"
    """No unit specified"""
    PERCENT = "Percent"
    """Percentage"""
    COUNT = "Count"
    """Value count"""
    SECONDS = "Seconds"
    """Seconds"""
    MILLISECONDS = "Milliseconds"
    """Milliseconds"""
    BYTES = "Bytes"
    """Bytes"""
    BYTES_PER_SECOND = "BytesPerSecond"
    """Bytes per second"""
    COUNT_PER_SECOND = "CountPerSecond"
    """Count per second"""


class PFAction(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Action taken after the threshold is met. Default is ‘continue’."""

    CONTINUE = "continue"
    """Test will continue to run even if pass fail metric criteria metric gets failed"""
    STOP = "stop"
    """Test run will stop if pass fail criteria metric is not passed."""


class PFAgFunc(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The aggregation function to be applied on the client metric. Allowed functions - ‘percentage’ -
    for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’, ‘max’ - for response_time_ms and
    latency metric, ‘avg’ - for requests_per_sec, ‘count’ - for requests.
    """

    COUNT = "count"
    """Criteria applies for count value"""
    PERCENTAGE = "percentage"
    """Criteria applies for given percentage value"""
    AVG = "avg"
    """Criteria applies for avg value"""
    P50 = "p50"
    """Criteria applies for 50th percentile value"""
    P90 = "p90"
    """Criteria applies for 90th percentile value"""
    P95 = "p95"
    """Criteria applies for 95th percentile value"""
    P99 = "p99"
    """Criteria applies for 99th percentile value"""
    MIN = "min"
    """Criteria applies for minimum value"""
    MAX = "max"
    """Criteria applies for maximum value"""


class PFMetrics(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The client metric on which the criteria should be applied."""

    RESPONSE_TIME_MS = "response_time_ms"
    """Pass fail criteria for response time metric"""
    LATENCY = "latency"
    """Pass fail criteria for response time metric"""
    ERROR = "error"
    """Pass fail criteria for error metric"""
    REQUESTS = "requests"
    """Pass fail criteria for total requests"""
    REQUESTS_PER_SEC = "requests_per_sec"
    """Pass fail criteria for request rate."""


class PFResult(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Outcome of the test run."""

    PASSED = "passed"
    """Given pass fail criteria metric has passed."""
    UNDETERMINED = "undetermined"
    """Given pass fail criteria metric couldn't determine."""
    FAILED = "failed"
    """Given pass fail criteria metric has failed."""


class PFTestResult(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Test result for pass/Fail criteria used during the test run."""

    PASSED = "PASSED"
    """Pass/fail criteria has passed."""
    NOT_APPLICABLE = "NOT_APPLICABLE"
    """Pass/fail criteria is not applicable."""
    FAILED = "FAILED"
    """Pass/fail criteria has failed."""


class SecretType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of secret."""

    AKV_SECRET_URI = "AKV_SECRET_URI"
    """If the secret is stored in an Azure Key Vault"""
    SECRET_VALUE = "SECRET_VALUE"
    """If the Plain text secret value provided"""


class Status(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The test run status."""

    ACCEPTED = "ACCEPTED"
    """Test run request is accepted"""
    NOTSTARTED = "NOTSTARTED"
    """Test run is not yet started."""
    PROVISIONING = "PROVISIONING"
    """Test run is getting provision"""
    PROVISIONED = "PROVISIONED"
    """Test run is provisioned"""
    CONFIGURING = "CONFIGURING"
    """Test run is getting configure"""
    CONFIGURED = "CONFIGURED"
    """Test run configuration is done"""
    EXECUTING = "EXECUTING"
    """Test run has started executing"""
    EXECUTED = "EXECUTED"
    """Test run has been executed"""
    DEPROVISIONING = "DEPROVISIONING"
    """Test run is getting deprovision"""
    DEPROVISIONED = "DEPROVISIONED"
    """Test run request is deprovisioned"""
    DONE = "DONE"
    """Test run request is finished"""
    CANCELLING = "CANCELLING"
    """Test run request is getting cancelled"""
    CANCELLED = "CANCELLED"
    """Test run request is cancelled"""
    FAILED = "FAILED"
    """Test run request is failed"""
    VALIDATION_SUCCESS = "VALIDATION_SUCCESS"
    """Test run JMX file is validated"""
    VALIDATION_FAILURE = "VALIDATION_FAILURE"
    """Test run JMX file validation is failed"""


class TimeGrain(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The time grain specifies the aggregation interval for the metric. Expressed as a duration
    'PT1M', 'PT1H', etc.
    """

    PT5_S = "PT5S"
    """5 seconds, available only if test run duration is less than 10 minutes"""
    PT10_S = "PT10S"
    """10 seconds, available only if test run duration is less than 10 minutes"""
    PT1_M = "PT1M"
    """1 minute"""
    PT5_M = "PT5M"
    """5 minutes, available only if test run duration is greater than 1 minute"""
    PT1_H = "PT1H"
    """1 hour, available only if test run duration is greater than 1 minute"""
