# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AppComponent(_serialization.Model):
    """An Azure resource object (Refer azure generic resource model :
    https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id#genericresource).

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar resource_id: fully qualified resource Id e.g
     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
    :vartype resource_id: str
    :ivar resource_name: Azure resource name, required while creating the app component.
    :vartype resource_name: str
    :ivar resource_type: Azure resource type, required while creating the app component.
    :vartype resource_type: str
    :ivar display_name: Azure resource display name.
    :vartype display_name: str
    :ivar resource_group: Resource group name of the Azure resource.
    :vartype resource_group: str
    :ivar subscription_id: Subscription Id of the Azure resource.
    :vartype subscription_id: str
    :ivar kind: Kind of Azure resource type.
    :vartype kind: str
    """

    _validation = {
        "resource_id": {"readonly": True},
        "resource_group": {"readonly": True},
        "subscription_id": {"readonly": True},
    }

    _attribute_map = {
        "resource_id": {"key": "resourceId", "type": "str"},
        "resource_name": {"key": "resourceName", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "resource_group": {"key": "resourceGroup", "type": "str"},
        "subscription_id": {"key": "subscriptionId", "type": "str"},
        "kind": {"key": "kind", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_name: Optional[str] = None,
        resource_type: Optional[str] = None,
        display_name: Optional[str] = None,
        kind: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_name: Azure resource name, required while creating the app component.
        :paramtype resource_name: str
        :keyword resource_type: Azure resource type, required while creating the app component.
        :paramtype resource_type: str
        :keyword display_name: Azure resource display name.
        :paramtype display_name: str
        :keyword kind: Kind of Azure resource type.
        :paramtype kind: str
        """
        super().__init__(**kwargs)
        self.resource_id = None
        self.resource_name = resource_name
        self.resource_type = resource_type
        self.display_name = display_name
        self.resource_group = None
        self.subscription_id = None
        self.kind = kind


class CertificateMetadata(_serialization.Model):
    """Certificates metadata.

    :ivar value: The value of the certificate for respective type.
    :vartype value: str
    :ivar type: Type of certificate. "AKV_CERT_URI"
    :vartype type: str or ~azure.developer.loadtesting.models.CertificateType
    :ivar name: Name of the certificate.
    :vartype name: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[str] = None,
        type: Optional[Union[str, "_models.CertificateType"]] = None,
        name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: The value of the certificate for respective type.
        :paramtype value: str
        :keyword type: Type of certificate. "AKV_CERT_URI"
        :paramtype type: str or ~azure.developer.loadtesting.models.CertificateType
        :keyword name: Name of the certificate.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.type = type
        self.name = name


class DimensionFilter(_serialization.Model):
    """Dimension name and values to filter.

    :ivar name: The dimension name.
    :vartype name: str
    :ivar values: The dimension values. Maximum values can be 20.
    :vartype values: list[str]
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(self, *, name: Optional[str] = None, values: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword name: The dimension name.
        :paramtype name: str
        :keyword values: The dimension values. Maximum values can be 20.
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.name = name
        self.values = values


class DimensionValue(_serialization.Model):
    """Represents a metric dimension value.

    :ivar name: The name of the dimension.
    :vartype name: str
    :ivar value: The value of the dimension.
    :vartype value: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, value: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: The name of the dimension.
        :paramtype name: str
        :keyword value: The value of the dimension.
        :paramtype value: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.value = value


class DimensionValueList(_serialization.Model):
    """Metrics dimension values.

    :ivar value: The dimension values.
    :vartype value: list[str]
    :ivar next_link: Link for the next set of values in case of paginated results, if applicable.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[str]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: Optional[List[str]] = None, next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The dimension values.
        :paramtype value: list[str]
        :keyword next_link: Link for the next set of values in case of paginated results, if
         applicable.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Error(_serialization.Model):
    """Error from a REST request.

    All required parameters must be populated in order to send to Azure.

    :ivar code: The error code. Required.
    :vartype code: str
    :ivar message: The error message. Required.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: Additional details and inner errors.
    :vartype details: list[~azure.developer.loadtesting.models.Error]
    """

    _validation = {
        "code": {"required": True},
        "message": {"required": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[Error]"},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["_models.Error"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword code: The error code. Required.
        :paramtype code: str
        :keyword message: The error message. Required.
        :paramtype message: str
        :keyword target: The error target.
        :paramtype target: str
        :keyword details: Additional details and inner errors.
        :paramtype details: list[~azure.developer.loadtesting.models.Error]
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class ErrorDetails(_serialization.Model):
    """Error details if there is any failure in load test run.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar message: Error details in case test run was not successfully run.
    :vartype message: str
    """

    _validation = {
        "message": {"readonly": True},
    }

    _attribute_map = {
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.message = None


class ErrorResponseBody(_serialization.Model):
    """The definition of an error object.

    All required parameters must be populated in order to send to Azure.

    :ivar error: Error from a REST request. Required.
    :vartype error: ~azure.developer.loadtesting.models.Error
    """

    _validation = {
        "error": {"required": True},
    }

    _attribute_map = {
        "error": {"key": "error", "type": "Error"},
    }

    def __init__(self, *, error: "_models.Error", **kwargs: Any) -> None:
        """
        :keyword error: Error from a REST request. Required.
        :paramtype error: ~azure.developer.loadtesting.models.Error
        """
        super().__init__(**kwargs)
        self.error = error


class FileInfo(_serialization.Model):
    """File info.

    :ivar url: File URL.
    :vartype url: str
    :ivar file_name: Name of the file.
    :vartype file_name: str
    :ivar file_type: File type. Known values are: "JMX_FILE", "USER_PROPERTIES", and
     "ADDITIONAL_ARTIFACTS".
    :vartype file_type: str or ~azure.developer.loadtesting.models.FileType
    :ivar expire_date_time: Expiry time of the file (ISO 8601 literal format).
    :vartype expire_date_time: ~datetime.datetime
    :ivar validation_status: Validation status of the file. Known values are: "NOT_VALIDATED",
     "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
     "VALIDATION_NOT_REQUIRED".
    :vartype validation_status: str or ~azure.developer.loadtesting.models.FileStatus
    :ivar validation_failure_details: Validation failure error details.
    :vartype validation_failure_details: str
    """

    _attribute_map = {
        "url": {"key": "url", "type": "str"},
        "file_name": {"key": "fileName", "type": "str"},
        "file_type": {"key": "fileType", "type": "str"},
        "expire_date_time": {"key": "expireDateTime", "type": "iso-8601"},
        "validation_status": {"key": "validationStatus", "type": "str"},
        "validation_failure_details": {"key": "validationFailureDetails", "type": "str"},
    }

    def __init__(
        self,
        *,
        url: Optional[str] = None,
        file_name: Optional[str] = None,
        file_type: Optional[Union[str, "_models.FileType"]] = None,
        expire_date_time: Optional[datetime.datetime] = None,
        validation_status: Optional[Union[str, "_models.FileStatus"]] = None,
        validation_failure_details: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword url: File URL.
        :paramtype url: str
        :keyword file_name: Name of the file.
        :paramtype file_name: str
        :keyword file_type: File type. Known values are: "JMX_FILE", "USER_PROPERTIES", and
         "ADDITIONAL_ARTIFACTS".
        :paramtype file_type: str or ~azure.developer.loadtesting.models.FileType
        :keyword expire_date_time: Expiry time of the file (ISO 8601 literal format).
        :paramtype expire_date_time: ~datetime.datetime
        :keyword validation_status: Validation status of the file. Known values are: "NOT_VALIDATED",
         "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
         "VALIDATION_NOT_REQUIRED".
        :paramtype validation_status: str or ~azure.developer.loadtesting.models.FileStatus
        :keyword validation_failure_details: Validation failure error details.
        :paramtype validation_failure_details: str
        """
        super().__init__(**kwargs)
        self.url = url
        self.file_name = file_name
        self.file_type = file_type
        self.expire_date_time = expire_date_time
        self.validation_status = validation_status
        self.validation_failure_details = validation_failure_details


class FileInfoList(_serialization.Model):
    """Collection of files.

    All required parameters must be populated in order to send to Azure.

    :ivar value: List of file info. Required.
    :vartype value: list[~azure.developer.loadtesting.models.FileInfo]
    :ivar next_link: Link for the next list of file URLs, if applicable.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[FileInfo]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.FileInfo"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: List of file info. Required.
        :paramtype value: list[~azure.developer.loadtesting.models.FileInfo]
        :keyword next_link: Link for the next list of file URLs, if applicable.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class LoadTestConfiguration(_serialization.Model):
    """The load test configuration.

    :ivar engine_instances: The number of engine instances to execute load test. Supported values
     are in range of 1-45. Required for creating a new test.
    :vartype engine_instances: int
    :ivar split_all_cs_vs: If false, Azure Load Testing copies and processes your input files
     unmodified across all test engine instances. If true, Azure Load Testing splits the CSV input
     data evenly across all engine instances. If you provide multiple CSV files, each file will be
     split evenly.
    :vartype split_all_cs_vs: bool
    :ivar quick_start_test: If true, optionalLoadTestConfig is required and JMX script for the load
     test is not required to upload.
    :vartype quick_start_test: bool
    :ivar optional_load_test_config: Optional load test config.
    :vartype optional_load_test_config: ~azure.developer.loadtesting.models.OptionalLoadTestConfig
    """

    _attribute_map = {
        "engine_instances": {"key": "engineInstances", "type": "int"},
        "split_all_cs_vs": {"key": "splitAllCSVs", "type": "bool"},
        "quick_start_test": {"key": "quickStartTest", "type": "bool"},
        "optional_load_test_config": {"key": "optionalLoadTestConfig", "type": "OptionalLoadTestConfig"},
    }

    def __init__(
        self,
        *,
        engine_instances: Optional[int] = None,
        split_all_cs_vs: bool = False,
        quick_start_test: bool = False,
        optional_load_test_config: Optional["_models.OptionalLoadTestConfig"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword engine_instances: The number of engine instances to execute load test. Supported
         values are in range of 1-45. Required for creating a new test.
        :paramtype engine_instances: int
        :keyword split_all_cs_vs: If false, Azure Load Testing copies and processes your input files
         unmodified across all test engine instances. If true, Azure Load Testing splits the CSV input
         data evenly across all engine instances. If you provide multiple CSV files, each file will be
         split evenly.
        :paramtype split_all_cs_vs: bool
        :keyword quick_start_test: If true, optionalLoadTestConfig is required and JMX script for the
         load test is not required to upload.
        :paramtype quick_start_test: bool
        :keyword optional_load_test_config: Optional load test config.
        :paramtype optional_load_test_config:
         ~azure.developer.loadtesting.models.OptionalLoadTestConfig
        """
        super().__init__(**kwargs)
        self.engine_instances = engine_instances
        self.split_all_cs_vs = split_all_cs_vs
        self.quick_start_test = quick_start_test
        self.optional_load_test_config = optional_load_test_config


class MetricAvailability(_serialization.Model):
    """Metric availability specifies the time grain (aggregation interval or frequency).

    :ivar time_grain: The time grain specifies the aggregation interval for the metric. Expressed
     as a duration 'PT1M', 'PT1H', etc. Known values are: "PT5S", "PT10S", "PT1M", "PT5M", and
     "PT1H".
    :vartype time_grain: str or ~azure.developer.loadtesting.models.TimeGrain
    """

    _attribute_map = {
        "time_grain": {"key": "timeGrain", "type": "str"},
    }

    def __init__(self, *, time_grain: Optional[Union[str, "_models.TimeGrain"]] = None, **kwargs: Any) -> None:
        """
        :keyword time_grain: The time grain specifies the aggregation interval for the metric.
         Expressed as a duration 'PT1M', 'PT1H', etc. Known values are: "PT5S", "PT10S", "PT1M", "PT5M",
         and "PT1H".
        :paramtype time_grain: str or ~azure.developer.loadtesting.models.TimeGrain
        """
        super().__init__(**kwargs)
        self.time_grain = time_grain


class MetricDefinition(_serialization.Model):
    """Metric definition.

    :ivar dimensions: List of dimensions.
    :vartype dimensions: list[~azure.developer.loadtesting.models.NameAndDesc]
    :ivar description: The metric description.
    :vartype description: str
    :ivar name: The metric name.
    :vartype name: str
    :ivar namespace: The namespace the metric belongs to.
    :vartype namespace: str
    :ivar primary_aggregation_type: The primary aggregation type value defining how to use the
     values for display. Known values are: "Average", "Count", "None", "Total", "Percentile90",
     "Percentile95", and "Percentile99".
    :vartype primary_aggregation_type: str or ~azure.developer.loadtesting.models.AggregationType
    :ivar supported_aggregation_types: The collection of what all aggregation types are supported.
    :vartype supported_aggregation_types: list[str]
    :ivar unit: The unit of the metric. Known values are: "NotSpecified", "Percent", "Count",
     "Seconds", "Milliseconds", "Bytes", "BytesPerSecond", and "CountPerSecond".
    :vartype unit: str or ~azure.developer.loadtesting.models.MetricUnit
    :ivar metric_availabilities: Metric availability specifies the time grain (aggregation interval
     or frequency).
    :vartype metric_availabilities: list[~azure.developer.loadtesting.models.MetricAvailability]
    """

    _attribute_map = {
        "dimensions": {"key": "dimensions", "type": "[NameAndDesc]"},
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "namespace": {"key": "namespace", "type": "str"},
        "primary_aggregation_type": {"key": "primaryAggregationType", "type": "str"},
        "supported_aggregation_types": {"key": "supportedAggregationTypes", "type": "[str]"},
        "unit": {"key": "unit", "type": "str"},
        "metric_availabilities": {"key": "metricAvailabilities", "type": "[MetricAvailability]"},
    }

    def __init__(
        self,
        *,
        dimensions: Optional[List["_models.NameAndDesc"]] = None,
        description: Optional[str] = None,
        name: Optional[str] = None,
        namespace: Optional[str] = None,
        primary_aggregation_type: Optional[Union[str, "_models.AggregationType"]] = None,
        supported_aggregation_types: Optional[List[str]] = None,
        unit: Optional[Union[str, "_models.MetricUnit"]] = None,
        metric_availabilities: Optional[List["_models.MetricAvailability"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword dimensions: List of dimensions.
        :paramtype dimensions: list[~azure.developer.loadtesting.models.NameAndDesc]
        :keyword description: The metric description.
        :paramtype description: str
        :keyword name: The metric name.
        :paramtype name: str
        :keyword namespace: The namespace the metric belongs to.
        :paramtype namespace: str
        :keyword primary_aggregation_type: The primary aggregation type value defining how to use the
         values for display. Known values are: "Average", "Count", "None", "Total", "Percentile90",
         "Percentile95", and "Percentile99".
        :paramtype primary_aggregation_type: str or ~azure.developer.loadtesting.models.AggregationType
        :keyword supported_aggregation_types: The collection of what all aggregation types are
         supported.
        :paramtype supported_aggregation_types: list[str]
        :keyword unit: The unit of the metric. Known values are: "NotSpecified", "Percent", "Count",
         "Seconds", "Milliseconds", "Bytes", "BytesPerSecond", and "CountPerSecond".
        :paramtype unit: str or ~azure.developer.loadtesting.models.MetricUnit
        :keyword metric_availabilities: Metric availability specifies the time grain (aggregation
         interval or frequency).
        :paramtype metric_availabilities: list[~azure.developer.loadtesting.models.MetricAvailability]
        """
        super().__init__(**kwargs)
        self.dimensions = dimensions
        self.description = description
        self.name = name
        self.namespace = namespace
        self.primary_aggregation_type = primary_aggregation_type
        self.supported_aggregation_types = supported_aggregation_types
        self.unit = unit
        self.metric_availabilities = metric_availabilities


class MetricDefinitionCollection(_serialization.Model):
    """Represents collection of metric definitions.

    All required parameters must be populated in order to send to Azure.

    :ivar value: the values for the metric definitions. Required.
    :vartype value: list[~azure.developer.loadtesting.models.MetricDefinition]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[MetricDefinition]"},
    }

    def __init__(self, *, value: List["_models.MetricDefinition"], **kwargs: Any) -> None:
        """
        :keyword value: the values for the metric definitions. Required.
        :paramtype value: list[~azure.developer.loadtesting.models.MetricDefinition]
        """
        super().__init__(**kwargs)
        self.value = value


class MetricNamespace(_serialization.Model):
    """Metric namespace class specifies the metadata for a metric namespace.

    :ivar description: The namespace description.
    :vartype description: str
    :ivar name: The metric namespace name.
    :vartype name: str
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, description: Optional[str] = None, name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword description: The namespace description.
        :paramtype description: str
        :keyword name: The metric namespace name.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.description = description
        self.name = name


class MetricNamespaceCollection(_serialization.Model):
    """Represents collection of metric namespaces.

    All required parameters must be populated in order to send to Azure.

    :ivar value: The values for the metric namespaces. Required.
    :vartype value: list[~azure.developer.loadtesting.models.MetricNamespace]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[MetricNamespace]"},
    }

    def __init__(self, *, value: List["_models.MetricNamespace"], **kwargs: Any) -> None:
        """
        :keyword value: The values for the metric namespaces. Required.
        :paramtype value: list[~azure.developer.loadtesting.models.MetricNamespace]
        """
        super().__init__(**kwargs)
        self.value = value


class MetricRequestPayload(_serialization.Model):
    """Filters to fetch the set of metric.

    :ivar filters: Get metrics for specific dimension values. Example: Metric contains dimension
     like SamplerName, Error. To retrieve all the time series data where SamplerName is equals to
     HTTPRequest1 or HTTPRequest2, the DimensionFilter value will be {"SamplerName",
     ["HTTPRequest1", "HTTPRequest2"}.
    :vartype filters: list[~azure.developer.loadtesting.models.DimensionFilter]
    """

    _attribute_map = {
        "filters": {"key": "filters", "type": "[DimensionFilter]"},
    }

    def __init__(self, *, filters: Optional[List["_models.DimensionFilter"]] = None, **kwargs: Any) -> None:
        """
        :keyword filters: Get metrics for specific dimension values. Example: Metric contains dimension
         like SamplerName, Error. To retrieve all the time series data where SamplerName is equals to
         HTTPRequest1 or HTTPRequest2, the DimensionFilter value will be {"SamplerName",
         ["HTTPRequest1", "HTTPRequest2"}.
        :paramtype filters: list[~azure.developer.loadtesting.models.DimensionFilter]
        """
        super().__init__(**kwargs)
        self.filters = filters


class Metrics(_serialization.Model):
    """The response to a metrics query.

    :ivar value: Timeseries data for metric query.
    :vartype value: list[~azure.developer.loadtesting.models.TimeSeriesElement]
    :ivar next_link: Link for the next set of timeseries in case of paginated results, if
     applicable.
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[TimeSeriesElement]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.TimeSeriesElement"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value: Timeseries data for metric query.
        :paramtype value: list[~azure.developer.loadtesting.models.TimeSeriesElement]
        :keyword next_link: Link for the next set of timeseries in case of paginated results, if
         applicable.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class MetricValue(_serialization.Model):
    """Represents a metric value.

    :ivar timestamp: The timestamp for the metric value in ISO 8601 format.
    :vartype timestamp: str
    :ivar value: The metric value.
    :vartype value: float
    """

    _attribute_map = {
        "timestamp": {"key": "timestamp", "type": "str"},
        "value": {"key": "value", "type": "float"},
    }

    def __init__(self, *, timestamp: Optional[str] = None, value: Optional[float] = None, **kwargs: Any) -> None:
        """
        :keyword timestamp: The timestamp for the metric value in ISO 8601 format.
        :paramtype timestamp: str
        :keyword value: The metric value.
        :paramtype value: float
        """
        super().__init__(**kwargs)
        self.timestamp = timestamp
        self.value = value


class NameAndDesc(_serialization.Model):
    """The name and description.

    :ivar description: The description.
    :vartype description: str
    :ivar name: The name.
    :vartype name: str
    """

    _attribute_map = {
        "description": {"key": "description", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, description: Optional[str] = None, name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword description: The description.
        :paramtype description: str
        :keyword name: The name.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.description = description
        self.name = name


class OptionalLoadTestConfig(_serialization.Model):
    """Optional load test config.

    :ivar endpoint_url: Test URL. Provide the complete HTTP URL. For example,
     http://contoso-app.azurewebsites.net/login.
    :vartype endpoint_url: str
    :ivar virtual_users: No of concurrent virtual users.
    :vartype virtual_users: int
    :ivar ramp_up_time: Ramp up time.
    :vartype ramp_up_time: int
    :ivar duration: Test run duration.
    :vartype duration: int
    """

    _attribute_map = {
        "endpoint_url": {"key": "endpointUrl", "type": "str"},
        "virtual_users": {"key": "virtualUsers", "type": "int"},
        "ramp_up_time": {"key": "rampUpTime", "type": "int"},
        "duration": {"key": "duration", "type": "int"},
    }

    def __init__(
        self,
        *,
        endpoint_url: Optional[str] = None,
        virtual_users: Optional[int] = None,
        ramp_up_time: Optional[int] = None,
        duration: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword endpoint_url: Test URL. Provide the complete HTTP URL. For example,
         http://contoso-app.azurewebsites.net/login.
        :paramtype endpoint_url: str
        :keyword virtual_users: No of concurrent virtual users.
        :paramtype virtual_users: int
        :keyword ramp_up_time: Ramp up time.
        :paramtype ramp_up_time: int
        :keyword duration: Test run duration.
        :paramtype duration: int
        """
        super().__init__(**kwargs)
        self.endpoint_url = endpoint_url
        self.virtual_users = virtual_users
        self.ramp_up_time = ramp_up_time
        self.duration = duration


class PassFailCriteria(_serialization.Model):
    """Pass fail criteria for a test.

    :ivar pass_fail_metrics: Map of id and pass fail metrics { id  : pass fail metrics }.
    :vartype pass_fail_metrics: dict[str, ~azure.developer.loadtesting.models.PassFailMetric]
    """

    _attribute_map = {
        "pass_fail_metrics": {"key": "passFailMetrics", "type": "{PassFailMetric}"},
    }

    def __init__(
        self, *, pass_fail_metrics: Optional[Dict[str, "_models.PassFailMetric"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword pass_fail_metrics: Map of id and pass fail metrics { id  : pass fail metrics }.
        :paramtype pass_fail_metrics: dict[str, ~azure.developer.loadtesting.models.PassFailMetric]
        """
        super().__init__(**kwargs)
        self.pass_fail_metrics = pass_fail_metrics


class PassFailMetric(_serialization.Model):
    """Pass fail metric.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar client_metric: The client metric on which the criteria should be applied. Known values
     are: "response_time_ms", "latency", "error", "requests", and "requests_per_sec".
    :vartype client_metric: str or ~azure.developer.loadtesting.models.PFMetrics
    :ivar aggregate: The aggregation function to be applied on the client metric. Allowed functions
     - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’, ‘max’ - for
     response_time_ms and latency metric, ‘avg’ - for requests_per_sec, ‘count’ - for requests.
     Known values are: "count", "percentage", "avg", "p50", "p90", "p95", "p99", "min", and "max".
    :vartype aggregate: str or ~azure.developer.loadtesting.models.PFAgFunc
    :ivar condition: The comparison operator. Supported types ‘>’, ‘<’.
    :vartype condition: str
    :ivar request_name: Request name for which the Pass fail criteria has to be applied.
    :vartype request_name: str
    :ivar value: The value to compare with the client metric. Allowed values - ‘error : [0.0 ,
     100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms.
    :vartype value: float
    :ivar action: Action taken after the threshold is met. Default is ‘continue’. Known values are:
     "continue" and "stop".
    :vartype action: str or ~azure.developer.loadtesting.models.PFAction
    :ivar actual_value: The actual value of the client metric for the test run.
    :vartype actual_value: float
    :ivar result: Outcome of the test run. Known values are: "passed", "undetermined", and
     "failed".
    :vartype result: str or ~azure.developer.loadtesting.models.PFResult
    """

    _validation = {
        "actual_value": {"readonly": True},
        "result": {"readonly": True},
    }

    _attribute_map = {
        "client_metric": {"key": "clientMetric", "type": "str"},
        "aggregate": {"key": "aggregate", "type": "str"},
        "condition": {"key": "condition", "type": "str"},
        "request_name": {"key": "requestName", "type": "str"},
        "value": {"key": "value", "type": "float"},
        "action": {"key": "action", "type": "str"},
        "actual_value": {"key": "actualValue", "type": "float"},
        "result": {"key": "result", "type": "str"},
    }

    def __init__(
        self,
        *,
        client_metric: Optional[Union[str, "_models.PFMetrics"]] = None,
        aggregate: Optional[Union[str, "_models.PFAgFunc"]] = None,
        condition: Optional[str] = None,
        request_name: Optional[str] = None,
        value: Optional[float] = None,
        action: Union[str, "_models.PFAction"] = "continue",
        **kwargs: Any
    ) -> None:
        """
        :keyword client_metric: The client metric on which the criteria should be applied. Known values
         are: "response_time_ms", "latency", "error", "requests", and "requests_per_sec".
        :paramtype client_metric: str or ~azure.developer.loadtesting.models.PFMetrics
        :keyword aggregate: The aggregation function to be applied on the client metric. Allowed
         functions - ‘percentage’ - for error metric , ‘avg’, ‘p50’, ‘p90’, ‘p95’, ‘p99’, ‘min’, ‘max’ -
         for response_time_ms and latency metric, ‘avg’ - for requests_per_sec, ‘count’ - for requests.
         Known values are: "count", "percentage", "avg", "p50", "p90", "p95", "p99", "min", and "max".
        :paramtype aggregate: str or ~azure.developer.loadtesting.models.PFAgFunc
        :keyword condition: The comparison operator. Supported types ‘>’, ‘<’.
        :paramtype condition: str
        :keyword request_name: Request name for which the Pass fail criteria has to be applied.
        :paramtype request_name: str
        :keyword value: The value to compare with the client metric. Allowed values - ‘error : [0.0 ,
         100.0] unit- % ’, response_time_ms and latency : any integer value unit- ms.
        :paramtype value: float
        :keyword action: Action taken after the threshold is met. Default is ‘continue’. Known values
         are: "continue" and "stop".
        :paramtype action: str or ~azure.developer.loadtesting.models.PFAction
        """
        super().__init__(**kwargs)
        self.client_metric = client_metric
        self.aggregate = aggregate
        self.condition = condition
        self.request_name = request_name
        self.value = value
        self.action = action
        self.actual_value = None
        self.result = None


class ResourceMetric(_serialization.Model):
    """Associated metric definition for particular metrics of the azure resource ( Refer :
    https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique name for metric.
    :vartype id: str
    :ivar resource_id: Azure resource id. Required.
    :vartype resource_id: str
    :ivar metric_namespace: Metric name space. Required.
    :vartype metric_namespace: str
    :ivar display_description: Metric description.
    :vartype display_description: str
    :ivar name: The invariant value of metric name. Required.
    :vartype name: str
    :ivar aggregation: Metric aggregation. Required.
    :vartype aggregation: str
    :ivar unit: Metric unit.
    :vartype unit: str
    :ivar resource_type: Azure resource type. Required.
    :vartype resource_type: str
    """

    _validation = {
        "id": {"readonly": True},
        "resource_id": {"required": True},
        "metric_namespace": {"required": True},
        "name": {"required": True},
        "aggregation": {"required": True},
        "resource_type": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "metric_namespace": {"key": "metricNamespace", "type": "str"},
        "display_description": {"key": "displayDescription", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "aggregation": {"key": "aggregation", "type": "str"},
        "unit": {"key": "unit", "type": "str"},
        "resource_type": {"key": "resourceType", "type": "str"},
    }

    def __init__(
        self,
        *,
        resource_id: str,
        metric_namespace: str,
        name: str,
        aggregation: str,
        resource_type: str,
        display_description: Optional[str] = None,
        unit: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword resource_id: Azure resource id. Required.
        :paramtype resource_id: str
        :keyword metric_namespace: Metric name space. Required.
        :paramtype metric_namespace: str
        :keyword display_description: Metric description.
        :paramtype display_description: str
        :keyword name: The invariant value of metric name. Required.
        :paramtype name: str
        :keyword aggregation: Metric aggregation. Required.
        :paramtype aggregation: str
        :keyword unit: Metric unit.
        :paramtype unit: str
        :keyword resource_type: Azure resource type. Required.
        :paramtype resource_type: str
        """
        super().__init__(**kwargs)
        self.id = None
        self.resource_id = resource_id
        self.metric_namespace = metric_namespace
        self.display_description = display_description
        self.name = name
        self.aggregation = aggregation
        self.unit = unit
        self.resource_type = resource_type


class Secret(_serialization.Model):
    """Secret.

    :ivar value: The value of the secret for the respective type.
    :vartype value: str
    :ivar type: Type of secret. Known values are: "AKV_SECRET_URI" and "SECRET_VALUE".
    :vartype type: str or ~azure.developer.loadtesting.models.SecretType
    """

    _attribute_map = {
        "value": {"key": "value", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[str] = None, type: Optional[Union[str, "_models.SecretType"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The value of the secret for the respective type.
        :paramtype value: str
        :keyword type: Type of secret. Known values are: "AKV_SECRET_URI" and "SECRET_VALUE".
        :paramtype type: str or ~azure.developer.loadtesting.models.SecretType
        """
        super().__init__(**kwargs)
        self.value = value
        self.type = type


class Test(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Load test model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar pass_fail_criteria: Pass fail criteria for a test.
    :vartype pass_fail_criteria: ~azure.developer.loadtesting.models.PassFailCriteria
    :ivar secrets: Secrets can be stored in an Azure Key Vault or any other secret store. If the
     secret is stored in an Azure Key Vault, the value should be the secret identifier and the type
     should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be
     provided directly and the type should be SECRET_VALUE.
    :vartype secrets: dict[str, ~azure.developer.loadtesting.models.Secret]
    :ivar certificate: Certificates metadata.
    :vartype certificate: ~azure.developer.loadtesting.models.CertificateMetadata
    :ivar environment_variables: Environment variables which are defined as a set of <name,value>
     pairs.
    :vartype environment_variables: dict[str, str]
    :ivar load_test_configuration: The load test configuration.
    :vartype load_test_configuration: ~azure.developer.loadtesting.models.LoadTestConfiguration
    :ivar input_artifacts: The input artifacts for the test.
    :vartype input_artifacts: ~azure.developer.loadtesting.models.TestInputArtifacts
    :ivar test_id: Unique test name as identifier.
    :vartype test_id: str
    :ivar description: The test description.
    :vartype description: str
    :ivar display_name: Display name of a test.
    :vartype display_name: str
    :ivar subnet_id: Subnet ID on which the load test instances should run.
    :vartype subnet_id: str
    :ivar keyvault_reference_identity_type: Type of the managed identity referencing the Key vault.
    :vartype keyvault_reference_identity_type: str
    :ivar keyvault_reference_identity_id: Resource Id of the managed identity referencing the Key
     vault.
    :vartype keyvault_reference_identity_id: str
    :ivar created_date_time: The creation datetime(ISO 8601 literal format).
    :vartype created_date_time: ~datetime.datetime
    :ivar created_by: The user that created.
    :vartype created_by: str
    :ivar last_modified_date_time: The last Modified datetime(ISO 8601 literal format).
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_modified_by: The user that last modified.
    :vartype last_modified_by: str
    """

    _validation = {
        "input_artifacts": {"readonly": True},
        "test_id": {"readonly": True, "max_length": 50, "min_length": 2},
        "description": {"max_length": 100},
        "display_name": {"max_length": 50, "min_length": 2},
        "created_date_time": {"readonly": True},
        "created_by": {"readonly": True},
        "last_modified_date_time": {"readonly": True},
        "last_modified_by": {"readonly": True},
    }

    _attribute_map = {
        "pass_fail_criteria": {"key": "passFailCriteria", "type": "PassFailCriteria"},
        "secrets": {"key": "secrets", "type": "{Secret}"},
        "certificate": {"key": "certificate", "type": "CertificateMetadata"},
        "environment_variables": {"key": "environmentVariables", "type": "{str}"},
        "load_test_configuration": {"key": "loadTestConfiguration", "type": "LoadTestConfiguration"},
        "input_artifacts": {"key": "inputArtifacts", "type": "TestInputArtifacts"},
        "test_id": {"key": "testId", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "subnet_id": {"key": "subnetId", "type": "str"},
        "keyvault_reference_identity_type": {"key": "keyvaultReferenceIdentityType", "type": "str"},
        "keyvault_reference_identity_id": {"key": "keyvaultReferenceIdentityId", "type": "str"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "last_modified_date_time": {"key": "lastModifiedDateTime", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
    }

    def __init__(
        self,
        *,
        pass_fail_criteria: Optional["_models.PassFailCriteria"] = None,
        secrets: Optional[Dict[str, "_models.Secret"]] = None,
        certificate: Optional["_models.CertificateMetadata"] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        load_test_configuration: Optional["_models.LoadTestConfiguration"] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        subnet_id: Optional[str] = None,
        keyvault_reference_identity_type: Optional[str] = None,
        keyvault_reference_identity_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword pass_fail_criteria: Pass fail criteria for a test.
        :paramtype pass_fail_criteria: ~azure.developer.loadtesting.models.PassFailCriteria
        :keyword secrets: Secrets can be stored in an Azure Key Vault or any other secret store. If the
         secret is stored in an Azure Key Vault, the value should be the secret identifier and the type
         should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be
         provided directly and the type should be SECRET_VALUE.
        :paramtype secrets: dict[str, ~azure.developer.loadtesting.models.Secret]
        :keyword certificate: Certificates metadata.
        :paramtype certificate: ~azure.developer.loadtesting.models.CertificateMetadata
        :keyword environment_variables: Environment variables which are defined as a set of
         <name,value> pairs.
        :paramtype environment_variables: dict[str, str]
        :keyword load_test_configuration: The load test configuration.
        :paramtype load_test_configuration: ~azure.developer.loadtesting.models.LoadTestConfiguration
        :keyword description: The test description.
        :paramtype description: str
        :keyword display_name: Display name of a test.
        :paramtype display_name: str
        :keyword subnet_id: Subnet ID on which the load test instances should run.
        :paramtype subnet_id: str
        :keyword keyvault_reference_identity_type: Type of the managed identity referencing the Key
         vault.
        :paramtype keyvault_reference_identity_type: str
        :keyword keyvault_reference_identity_id: Resource Id of the managed identity referencing the
         Key vault.
        :paramtype keyvault_reference_identity_id: str
        """
        super().__init__(**kwargs)
        self.pass_fail_criteria = pass_fail_criteria
        self.secrets = secrets
        self.certificate = certificate
        self.environment_variables = environment_variables
        self.load_test_configuration = load_test_configuration
        self.input_artifacts = None
        self.test_id = None
        self.description = description
        self.display_name = display_name
        self.subnet_id = subnet_id
        self.keyvault_reference_identity_type = keyvault_reference_identity_type
        self.keyvault_reference_identity_id = keyvault_reference_identity_id
        self.created_date_time = None
        self.created_by = None
        self.last_modified_date_time = None
        self.last_modified_by = None


class TestAppComponents(_serialization.Model):
    """Test app component.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar components: Azure resource collection { resource id (fully qualified resource Id e.g
     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
     : resource object }. Required.
    :vartype components: dict[str, ~azure.developer.loadtesting.models.AppComponent]
    :ivar test_id: Test identifier.
    :vartype test_id: str
    :ivar created_date_time: The creation datetime(ISO 8601 literal format).
    :vartype created_date_time: ~datetime.datetime
    :ivar created_by: The user that created.
    :vartype created_by: str
    :ivar last_modified_date_time: The last Modified datetime(ISO 8601 literal format).
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_modified_by: The user that last modified.
    :vartype last_modified_by: str
    """

    _validation = {
        "components": {"required": True},
        "test_id": {"readonly": True},
        "created_date_time": {"readonly": True},
        "created_by": {"readonly": True},
        "last_modified_date_time": {"readonly": True},
        "last_modified_by": {"readonly": True},
    }

    _attribute_map = {
        "components": {"key": "components", "type": "{AppComponent}"},
        "test_id": {"key": "testId", "type": "str"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "last_modified_date_time": {"key": "lastModifiedDateTime", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
    }

    def __init__(self, *, components: Dict[str, "_models.AppComponent"], **kwargs: Any) -> None:
        """
        :keyword components: Azure resource collection { resource id (fully qualified resource Id e.g
         subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
         : resource object }. Required.
        :paramtype components: dict[str, ~azure.developer.loadtesting.models.AppComponent]
        """
        super().__init__(**kwargs)
        self.components = components
        self.test_id = None
        self.created_date_time = None
        self.created_by = None
        self.last_modified_date_time = None
        self.last_modified_by = None


class TestInputArtifacts(_serialization.Model):
    """The input artifacts for the test.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar config_file_info: File info.
    :vartype config_file_info: ~azure.developer.loadtesting.models.FileInfo
    :ivar test_script_file_info: File info.
    :vartype test_script_file_info: ~azure.developer.loadtesting.models.FileInfo
    :ivar user_prop_file_info: File info.
    :vartype user_prop_file_info: ~azure.developer.loadtesting.models.FileInfo
    :ivar input_artifacts_zip_file_info: File info.
    :vartype input_artifacts_zip_file_info: ~azure.developer.loadtesting.models.FileInfo
    :ivar additional_file_info: Additional supported files for the test run.
    :vartype additional_file_info: list[~azure.developer.loadtesting.models.FileInfo]
    """

    _validation = {
        "additional_file_info": {"readonly": True},
    }

    _attribute_map = {
        "config_file_info": {"key": "configFileInfo", "type": "FileInfo"},
        "test_script_file_info": {"key": "testScriptFileInfo", "type": "FileInfo"},
        "user_prop_file_info": {"key": "userPropFileInfo", "type": "FileInfo"},
        "input_artifacts_zip_file_info": {"key": "inputArtifactsZipFileInfo", "type": "FileInfo"},
        "additional_file_info": {"key": "additionalFileInfo", "type": "[FileInfo]"},
    }

    def __init__(
        self,
        *,
        config_file_info: Optional["_models.FileInfo"] = None,
        test_script_file_info: Optional["_models.FileInfo"] = None,
        user_prop_file_info: Optional["_models.FileInfo"] = None,
        input_artifacts_zip_file_info: Optional["_models.FileInfo"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword config_file_info: File info.
        :paramtype config_file_info: ~azure.developer.loadtesting.models.FileInfo
        :keyword test_script_file_info: File info.
        :paramtype test_script_file_info: ~azure.developer.loadtesting.models.FileInfo
        :keyword user_prop_file_info: File info.
        :paramtype user_prop_file_info: ~azure.developer.loadtesting.models.FileInfo
        :keyword input_artifacts_zip_file_info: File info.
        :paramtype input_artifacts_zip_file_info: ~azure.developer.loadtesting.models.FileInfo
        """
        super().__init__(**kwargs)
        self.config_file_info = config_file_info
        self.test_script_file_info = test_script_file_info
        self.user_prop_file_info = user_prop_file_info
        self.input_artifacts_zip_file_info = input_artifacts_zip_file_info
        self.additional_file_info = None


class TestRun(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Load test run model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar pass_fail_criteria: Pass fail criteria for a test.
    :vartype pass_fail_criteria: ~azure.developer.loadtesting.models.PassFailCriteria
    :ivar secrets: Secrets can be stored in an Azure Key Vault or any other secret store. If the
     secret is stored in an Azure Key Vault, the value should be the secret identifier and the type
     should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be
     provided directly and the type should be SECRET_VALUE.
    :vartype secrets: dict[str, ~azure.developer.loadtesting.models.Secret]
    :ivar certificate: Certificates metadata.
    :vartype certificate: ~azure.developer.loadtesting.models.CertificateMetadata
    :ivar environment_variables: Environment variables which are defined as a set of <name,value>
     pairs.
    :vartype environment_variables: dict[str, str]
    :ivar error_details: Error details if there is any failure in load test run.
    :vartype error_details: list[~azure.developer.loadtesting.models.ErrorDetails]
    :ivar test_run_statistics: Test run statistics.
    :vartype test_run_statistics: dict[str, ~azure.developer.loadtesting.models.TestRunStatistics]
    :ivar load_test_configuration: The load test configuration.
    :vartype load_test_configuration: ~azure.developer.loadtesting.models.LoadTestConfiguration
    :ivar test_artifacts: Collection of test run artifacts.
    :vartype test_artifacts: ~azure.developer.loadtesting.models.TestRunArtifacts
    :ivar test_result: Test result for pass/Fail criteria used during the test run. Known values
     are: "PASSED", "NOT_APPLICABLE", and "FAILED".
    :vartype test_result: str or ~azure.developer.loadtesting.models.PFTestResult
    :ivar virtual_users: Number of virtual users, for which test has been run.
    :vartype virtual_users: int
    :ivar test_run_id: Unique test run name as identifier.
    :vartype test_run_id: str
    :ivar display_name: Display name of a testRun.
    :vartype display_name: str
    :ivar test_id: Associated test Id.
    :vartype test_id: str
    :ivar description: The test run description.
    :vartype description: str
    :ivar status: The test run status. Known values are: "ACCEPTED", "NOTSTARTED", "PROVISIONING",
     "PROVISIONED", "CONFIGURING", "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING",
     "DEPROVISIONED", "DONE", "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
     "VALIDATION_FAILURE".
    :vartype status: str or ~azure.developer.loadtesting.models.Status
    :ivar start_date_time: The test run start DateTime(ISO 8601 literal format).
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: The test run end DateTime(ISO 8601 literal format).
    :vartype end_date_time: ~datetime.datetime
    :ivar executed_date_time: Test run initiated time.
    :vartype executed_date_time: ~datetime.datetime
    :ivar portal_url: Portal url.
    :vartype portal_url: str
    :ivar duration: Test run duration in milliseconds.
    :vartype duration: int
    :ivar subnet_id: Subnet ID on which the load test instances should run.
    :vartype subnet_id: str
    :ivar created_date_time: The creation datetime(ISO 8601 literal format).
    :vartype created_date_time: ~datetime.datetime
    :ivar created_by: The user that created.
    :vartype created_by: str
    :ivar last_modified_date_time: The last Modified datetime(ISO 8601 literal format).
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_modified_by: The user that last modified.
    :vartype last_modified_by: str
    """

    _validation = {
        "error_details": {"readonly": True},
        "test_run_statistics": {"readonly": True},
        "test_artifacts": {"readonly": True},
        "test_result": {"readonly": True},
        "virtual_users": {"readonly": True},
        "test_run_id": {"readonly": True},
        "display_name": {"max_length": 50, "min_length": 2},
        "test_id": {"max_length": 50, "min_length": 2},
        "description": {"max_length": 100},
        "status": {"readonly": True},
        "start_date_time": {"readonly": True},
        "end_date_time": {"readonly": True},
        "executed_date_time": {"readonly": True},
        "portal_url": {"readonly": True},
        "duration": {"readonly": True},
        "subnet_id": {"readonly": True},
        "created_date_time": {"readonly": True},
        "created_by": {"readonly": True},
        "last_modified_date_time": {"readonly": True},
        "last_modified_by": {"readonly": True},
    }

    _attribute_map = {
        "pass_fail_criteria": {"key": "passFailCriteria", "type": "PassFailCriteria"},
        "secrets": {"key": "secrets", "type": "{Secret}"},
        "certificate": {"key": "certificate", "type": "CertificateMetadata"},
        "environment_variables": {"key": "environmentVariables", "type": "{str}"},
        "error_details": {"key": "errorDetails", "type": "[ErrorDetails]"},
        "test_run_statistics": {"key": "testRunStatistics", "type": "{TestRunStatistics}"},
        "load_test_configuration": {"key": "loadTestConfiguration", "type": "LoadTestConfiguration"},
        "test_artifacts": {"key": "testArtifacts", "type": "TestRunArtifacts"},
        "test_result": {"key": "testResult", "type": "str"},
        "virtual_users": {"key": "virtualUsers", "type": "int"},
        "test_run_id": {"key": "testRunId", "type": "str"},
        "display_name": {"key": "displayName", "type": "str"},
        "test_id": {"key": "testId", "type": "str"},
        "description": {"key": "description", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "start_date_time": {"key": "startDateTime", "type": "iso-8601"},
        "end_date_time": {"key": "endDateTime", "type": "iso-8601"},
        "executed_date_time": {"key": "executedDateTime", "type": "iso-8601"},
        "portal_url": {"key": "portalUrl", "type": "str"},
        "duration": {"key": "duration", "type": "int"},
        "subnet_id": {"key": "subnetId", "type": "str"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "last_modified_date_time": {"key": "lastModifiedDateTime", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
    }

    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        pass_fail_criteria: Optional["_models.PassFailCriteria"] = None,
        secrets: Optional[Dict[str, "_models.Secret"]] = None,
        certificate: Optional["_models.CertificateMetadata"] = None,
        environment_variables: Optional[Dict[str, str]] = None,
        load_test_configuration: Optional["_models.LoadTestConfiguration"] = None,
        display_name: Optional[str] = None,
        test_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword pass_fail_criteria: Pass fail criteria for a test.
        :paramtype pass_fail_criteria: ~azure.developer.loadtesting.models.PassFailCriteria
        :keyword secrets: Secrets can be stored in an Azure Key Vault or any other secret store. If the
         secret is stored in an Azure Key Vault, the value should be the secret identifier and the type
         should be AKV_SECRET_URI. If the secret is stored elsewhere, the secret value should be
         provided directly and the type should be SECRET_VALUE.
        :paramtype secrets: dict[str, ~azure.developer.loadtesting.models.Secret]
        :keyword certificate: Certificates metadata.
        :paramtype certificate: ~azure.developer.loadtesting.models.CertificateMetadata
        :keyword environment_variables: Environment variables which are defined as a set of
         <name,value> pairs.
        :paramtype environment_variables: dict[str, str]
        :keyword load_test_configuration: The load test configuration.
        :paramtype load_test_configuration: ~azure.developer.loadtesting.models.LoadTestConfiguration
        :keyword display_name: Display name of a testRun.
        :paramtype display_name: str
        :keyword test_id: Associated test Id.
        :paramtype test_id: str
        :keyword description: The test run description.
        :paramtype description: str
        """
        super().__init__(**kwargs)
        self.pass_fail_criteria = pass_fail_criteria
        self.secrets = secrets
        self.certificate = certificate
        self.environment_variables = environment_variables
        self.error_details = None
        self.test_run_statistics = None
        self.load_test_configuration = load_test_configuration
        self.test_artifacts = None
        self.test_result = None
        self.virtual_users = None
        self.test_run_id = None
        self.display_name = display_name
        self.test_id = test_id
        self.description = description
        self.status = None
        self.start_date_time = None
        self.end_date_time = None
        self.executed_date_time = None
        self.portal_url = None
        self.duration = None
        self.subnet_id = None
        self.created_date_time = None
        self.created_by = None
        self.last_modified_date_time = None
        self.last_modified_by = None


class TestRunAppComponents(_serialization.Model):
    """Test run app component.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar components: Azure resource collection { resource id (fully qualified resource Id e.g
     subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
     : resource object }. Required.
    :vartype components: dict[str, ~azure.developer.loadtesting.models.AppComponent]
    :ivar test_run_id: Test run identifier.
    :vartype test_run_id: str
    :ivar created_date_time: The creation datetime(ISO 8601 literal format).
    :vartype created_date_time: ~datetime.datetime
    :ivar created_by: The user that created.
    :vartype created_by: str
    :ivar last_modified_date_time: The last Modified datetime(ISO 8601 literal format).
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_modified_by: The user that last modified.
    :vartype last_modified_by: str
    """

    _validation = {
        "components": {"required": True},
        "test_run_id": {"readonly": True},
        "created_date_time": {"readonly": True},
        "created_by": {"readonly": True},
        "last_modified_date_time": {"readonly": True},
        "last_modified_by": {"readonly": True},
    }

    _attribute_map = {
        "components": {"key": "components", "type": "{AppComponent}"},
        "test_run_id": {"key": "testRunId", "type": "str"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "last_modified_date_time": {"key": "lastModifiedDateTime", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
    }

    def __init__(self, *, components: Dict[str, "_models.AppComponent"], **kwargs: Any) -> None:
        """
        :keyword components: Azure resource collection { resource id (fully qualified resource Id e.g
         subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName})
         : resource object }. Required.
        :paramtype components: dict[str, ~azure.developer.loadtesting.models.AppComponent]
        """
        super().__init__(**kwargs)
        self.components = components
        self.test_run_id = None
        self.created_date_time = None
        self.created_by = None
        self.last_modified_date_time = None
        self.last_modified_by = None


class TestRunArtifacts(_serialization.Model):
    """Collection of test run artifacts.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar input_artifacts: The input artifacts for the test run.
    :vartype input_artifacts: ~azure.developer.loadtesting.models.TestRunInputArtifacts
    :ivar output_artifacts: The output artifacts for the test run.
    :vartype output_artifacts: ~azure.developer.loadtesting.models.TestRunOutputArtifacts
    """

    _validation = {
        "input_artifacts": {"readonly": True},
    }

    _attribute_map = {
        "input_artifacts": {"key": "inputArtifacts", "type": "TestRunInputArtifacts"},
        "output_artifacts": {"key": "outputArtifacts", "type": "TestRunOutputArtifacts"},
    }

    def __init__(self, *, output_artifacts: Optional["_models.TestRunOutputArtifacts"] = None, **kwargs: Any) -> None:
        """
        :keyword output_artifacts: The output artifacts for the test run.
        :paramtype output_artifacts: ~azure.developer.loadtesting.models.TestRunOutputArtifacts
        """
        super().__init__(**kwargs)
        self.input_artifacts = None
        self.output_artifacts = output_artifacts


class TestRunInputArtifacts(_serialization.Model):
    """The input artifacts for the test run.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar config_file_info: File info.
    :vartype config_file_info: ~azure.developer.loadtesting.models.FileInfo
    :ivar test_script_file_info: File info.
    :vartype test_script_file_info: ~azure.developer.loadtesting.models.FileInfo
    :ivar user_prop_file_info: File info.
    :vartype user_prop_file_info: ~azure.developer.loadtesting.models.FileInfo
    :ivar input_artifacts_zip_file_info: File info.
    :vartype input_artifacts_zip_file_info: ~azure.developer.loadtesting.models.FileInfo
    :ivar additional_file_info: Additional supported files for the test run.
    :vartype additional_file_info: list[~azure.developer.loadtesting.models.FileInfo]
    """

    _validation = {
        "additional_file_info": {"readonly": True},
    }

    _attribute_map = {
        "config_file_info": {"key": "configFileInfo", "type": "FileInfo"},
        "test_script_file_info": {"key": "testScriptFileInfo", "type": "FileInfo"},
        "user_prop_file_info": {"key": "userPropFileInfo", "type": "FileInfo"},
        "input_artifacts_zip_file_info": {"key": "inputArtifactsZipFileInfo", "type": "FileInfo"},
        "additional_file_info": {"key": "additionalFileInfo", "type": "[FileInfo]"},
    }

    def __init__(
        self,
        *,
        config_file_info: Optional["_models.FileInfo"] = None,
        test_script_file_info: Optional["_models.FileInfo"] = None,
        user_prop_file_info: Optional["_models.FileInfo"] = None,
        input_artifacts_zip_file_info: Optional["_models.FileInfo"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword config_file_info: File info.
        :paramtype config_file_info: ~azure.developer.loadtesting.models.FileInfo
        :keyword test_script_file_info: File info.
        :paramtype test_script_file_info: ~azure.developer.loadtesting.models.FileInfo
        :keyword user_prop_file_info: File info.
        :paramtype user_prop_file_info: ~azure.developer.loadtesting.models.FileInfo
        :keyword input_artifacts_zip_file_info: File info.
        :paramtype input_artifacts_zip_file_info: ~azure.developer.loadtesting.models.FileInfo
        """
        super().__init__(**kwargs)
        self.config_file_info = config_file_info
        self.test_script_file_info = test_script_file_info
        self.user_prop_file_info = user_prop_file_info
        self.input_artifacts_zip_file_info = input_artifacts_zip_file_info
        self.additional_file_info = None


class TestRunOutputArtifacts(_serialization.Model):
    """The output artifacts for the test run.

    :ivar result_file_info: File info.
    :vartype result_file_info: ~azure.developer.loadtesting.models.FileInfo
    :ivar logs_file_info: File info.
    :vartype logs_file_info: ~azure.developer.loadtesting.models.FileInfo
    """

    _attribute_map = {
        "result_file_info": {"key": "resultFileInfo", "type": "FileInfo"},
        "logs_file_info": {"key": "logsFileInfo", "type": "FileInfo"},
    }

    def __init__(
        self,
        *,
        result_file_info: Optional["_models.FileInfo"] = None,
        logs_file_info: Optional["_models.FileInfo"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword result_file_info: File info.
        :paramtype result_file_info: ~azure.developer.loadtesting.models.FileInfo
        :keyword logs_file_info: File info.
        :paramtype logs_file_info: ~azure.developer.loadtesting.models.FileInfo
        """
        super().__init__(**kwargs)
        self.result_file_info = result_file_info
        self.logs_file_info = logs_file_info


class TestRunServerMetricConfig(_serialization.Model):
    """Test run server metrics configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar test_run_id: Test run identifier.
    :vartype test_run_id: str
    :ivar metrics: Azure resource metrics collection {metric id : metrics object} (Refer :
     https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for
     metric id).
    :vartype metrics: dict[str, ~azure.developer.loadtesting.models.ResourceMetric]
    :ivar created_date_time: The creation datetime(ISO 8601 literal format).
    :vartype created_date_time: ~datetime.datetime
    :ivar created_by: The user that created.
    :vartype created_by: str
    :ivar last_modified_date_time: The last Modified datetime(ISO 8601 literal format).
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_modified_by: The user that last modified.
    :vartype last_modified_by: str
    """

    _validation = {
        "test_run_id": {"readonly": True},
        "created_date_time": {"readonly": True},
        "created_by": {"readonly": True},
        "last_modified_date_time": {"readonly": True},
        "last_modified_by": {"readonly": True},
    }

    _attribute_map = {
        "test_run_id": {"key": "testRunId", "type": "str"},
        "metrics": {"key": "metrics", "type": "{ResourceMetric}"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "last_modified_date_time": {"key": "lastModifiedDateTime", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
    }

    def __init__(self, *, metrics: Optional[Dict[str, "_models.ResourceMetric"]] = None, **kwargs: Any) -> None:
        """
        :keyword metrics: Azure resource metrics collection {metric id : metrics object} (Refer :
         https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for
         metric id).
        :paramtype metrics: dict[str, ~azure.developer.loadtesting.models.ResourceMetric]
        """
        super().__init__(**kwargs)
        self.test_run_id = None
        self.metrics = metrics
        self.created_date_time = None
        self.created_by = None
        self.last_modified_date_time = None
        self.last_modified_by = None


class TestRunsList(_serialization.Model):
    """Collection of test runs.

    All required parameters must be populated in order to send to Azure.

    :ivar value: List of test runs. Required.
    :vartype value: list[~azure.developer.loadtesting.models.TestRun]
    :ivar next_link: Link for the next list of test runs in case of paginated results, if
     applicable.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[TestRun]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.TestRun"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: List of test runs. Required.
        :paramtype value: list[~azure.developer.loadtesting.models.TestRun]
        :keyword next_link: Link for the next list of test runs in case of paginated results, if
         applicable.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class TestRunStatistics(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """Test run statistics.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar transaction: Transaction name.
    :vartype transaction: str
    :ivar sample_count: Sampler count.
    :vartype sample_count: float
    :ivar error_count: Error count.
    :vartype error_count: float
    :ivar error_pct: Error percentage.
    :vartype error_pct: float
    :ivar mean_res_time: Mean response time.
    :vartype mean_res_time: float
    :ivar median_res_time: Median response time.
    :vartype median_res_time: float
    :ivar max_res_time: Max response time.
    :vartype max_res_time: float
    :ivar min_res_time: Minimum response time.
    :vartype min_res_time: float
    :ivar pct1_res_time: 90 percentile response time.
    :vartype pct1_res_time: float
    :ivar pct2_res_time: 95 percentile response time.
    :vartype pct2_res_time: float
    :ivar pct3_res_time: 99 percentile response time.
    :vartype pct3_res_time: float
    :ivar throughput: Throughput.
    :vartype throughput: float
    :ivar received_k_bytes_per_sec: Received network bytes.
    :vartype received_k_bytes_per_sec: float
    :ivar sent_k_bytes_per_sec: Send network bytes.
    :vartype sent_k_bytes_per_sec: float
    """

    _validation = {
        "transaction": {"readonly": True},
        "sample_count": {"readonly": True},
        "error_count": {"readonly": True},
        "error_pct": {"readonly": True},
        "mean_res_time": {"readonly": True},
        "median_res_time": {"readonly": True},
        "max_res_time": {"readonly": True},
        "min_res_time": {"readonly": True},
        "pct1_res_time": {"readonly": True},
        "pct2_res_time": {"readonly": True},
        "pct3_res_time": {"readonly": True},
        "throughput": {"readonly": True},
        "received_k_bytes_per_sec": {"readonly": True},
        "sent_k_bytes_per_sec": {"readonly": True},
    }

    _attribute_map = {
        "transaction": {"key": "transaction", "type": "str"},
        "sample_count": {"key": "sampleCount", "type": "float"},
        "error_count": {"key": "errorCount", "type": "float"},
        "error_pct": {"key": "errorPct", "type": "float"},
        "mean_res_time": {"key": "meanResTime", "type": "float"},
        "median_res_time": {"key": "medianResTime", "type": "float"},
        "max_res_time": {"key": "maxResTime", "type": "float"},
        "min_res_time": {"key": "minResTime", "type": "float"},
        "pct1_res_time": {"key": "pct1ResTime", "type": "float"},
        "pct2_res_time": {"key": "pct2ResTime", "type": "float"},
        "pct3_res_time": {"key": "pct3ResTime", "type": "float"},
        "throughput": {"key": "throughput", "type": "float"},
        "received_k_bytes_per_sec": {"key": "receivedKBytesPerSec", "type": "float"},
        "sent_k_bytes_per_sec": {"key": "sentKBytesPerSec", "type": "float"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.transaction = None
        self.sample_count = None
        self.error_count = None
        self.error_pct = None
        self.mean_res_time = None
        self.median_res_time = None
        self.max_res_time = None
        self.min_res_time = None
        self.pct1_res_time = None
        self.pct2_res_time = None
        self.pct3_res_time = None
        self.throughput = None
        self.received_k_bytes_per_sec = None
        self.sent_k_bytes_per_sec = None


class TestServerMetricConfig(_serialization.Model):
    """Test server metrics configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar test_id: Test identifier.
    :vartype test_id: str
    :ivar metrics: Azure resource metrics collection {metric id : metrics object} (Refer :
     https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for
     metric id).
    :vartype metrics: dict[str, ~azure.developer.loadtesting.models.ResourceMetric]
    :ivar created_date_time: The creation datetime(ISO 8601 literal format).
    :vartype created_date_time: ~datetime.datetime
    :ivar created_by: The user that created.
    :vartype created_by: str
    :ivar last_modified_date_time: The last Modified datetime(ISO 8601 literal format).
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_modified_by: The user that last modified.
    :vartype last_modified_by: str
    """

    _validation = {
        "test_id": {"readonly": True},
        "created_date_time": {"readonly": True},
        "created_by": {"readonly": True},
        "last_modified_date_time": {"readonly": True},
        "last_modified_by": {"readonly": True},
    }

    _attribute_map = {
        "test_id": {"key": "testId", "type": "str"},
        "metrics": {"key": "metrics", "type": "{ResourceMetric}"},
        "created_date_time": {"key": "createdDateTime", "type": "iso-8601"},
        "created_by": {"key": "createdBy", "type": "str"},
        "last_modified_date_time": {"key": "lastModifiedDateTime", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
    }

    def __init__(self, *, metrics: Optional[Dict[str, "_models.ResourceMetric"]] = None, **kwargs: Any) -> None:
        """
        :keyword metrics: Azure resource metrics collection {metric id : metrics object} (Refer :
         https://docs.microsoft.com/en-us/rest/api/monitor/metric-definitions/list#metricdefinition for
         metric id).
        :paramtype metrics: dict[str, ~azure.developer.loadtesting.models.ResourceMetric]
        """
        super().__init__(**kwargs)
        self.test_id = None
        self.metrics = metrics
        self.created_date_time = None
        self.created_by = None
        self.last_modified_date_time = None
        self.last_modified_by = None


class TestsList(_serialization.Model):
    """Collection of tests.

    All required parameters must be populated in order to send to Azure.

    :ivar value: List of tests. Required.
    :vartype value: list[~azure.developer.loadtesting.models.Test]
    :ivar next_link: Link for the next list of tests in case of paginated results, if applicable.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Test]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Test"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: List of tests. Required.
        :paramtype value: list[~azure.developer.loadtesting.models.Test]
        :keyword next_link: Link for the next list of tests in case of paginated results, if
         applicable.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class TimeSeriesElement(_serialization.Model):
    """The time series returned when a data query is performed.

    :ivar data: An array of data points representing the metric values.
    :vartype data: list[~azure.developer.loadtesting.models.MetricValue]
    :ivar dimension_values: The dimension values.
    :vartype dimension_values: list[~azure.developer.loadtesting.models.DimensionValue]
    """

    _attribute_map = {
        "data": {"key": "data", "type": "[MetricValue]"},
        "dimension_values": {"key": "dimensionValues", "type": "[DimensionValue]"},
    }

    def __init__(
        self,
        *,
        data: Optional[List["_models.MetricValue"]] = None,
        dimension_values: Optional[List["_models.DimensionValue"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword data: An array of data points representing the metric values.
        :paramtype data: list[~azure.developer.loadtesting.models.MetricValue]
        :keyword dimension_values: The dimension values.
        :paramtype dimension_values: list[~azure.developer.loadtesting.models.DimensionValue]
        """
        super().__init__(**kwargs)
        self.data = data
        self.dimension_values = dimension_values
