# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AdditionalCapabilities(_model_base.Model):
    """Enables or disables a capability on the virtual machine or virtual machine scale set.

    :ivar ultra_ssd_enabled: The flag that enables or disables a capability to have one or more
     managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with
     storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale
     set only if this property is enabled.
    :vartype ultra_ssd_enabled: bool
    :ivar hibernation_enabled: The flag that enables or disables hibernation capability on the VM.
    :vartype hibernation_enabled: bool
    """

    ultra_ssd_enabled: Optional[bool] = rest_field(name="ultraSSDEnabled")
    """The flag that enables or disables a capability to have one or more managed data disks with
     UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type
     UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this
     property is enabled."""
    hibernation_enabled: Optional[bool] = rest_field(name="hibernationEnabled")
    """The flag that enables or disables hibernation capability on the VM."""

    @overload
    def __init__(
        self,
        *,
        ultra_ssd_enabled: Optional[bool] = None,
        hibernation_enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AdditionalUnattendContent(_model_base.Model):
    """Specifies additional XML formatted information that can be included in the Unattend.xml file,
    which is used by Windows Setup. Contents are defined by setting name, component name, and the
    pass in which the content is applied.

    :ivar pass_name: The pass name. Currently, the only allowable value is OobeSystem. "OobeSystem"
    :vartype pass_name: str or ~azure.mgmt.compute.models.PassNames
    :ivar component_name: The component name. Currently, the only allowable value is
     Microsoft-Windows-Shell-Setup. "Microsoft-Windows-Shell-Setup"
    :vartype component_name: str or ~azure.mgmt.compute.models.ComponentNames
    :ivar setting_name: Specifies the name of the setting to which the content applies. Possible
     values are: FirstLogonCommands and AutoLogon. Known values are: "AutoLogon" and
     "FirstLogonCommands".
    :vartype setting_name: str or ~azure.mgmt.compute.models.SettingNames
    :ivar content: Specifies the XML formatted content that is added to the unattend.xml file for
     the specified path and component. The XML must be less than 4KB and must include the root
     element for the setting or feature that is being inserted.
    :vartype content: str
    """

    pass_name: Optional[Union[str, "_models.PassNames"]] = rest_field(name="passName")
    """The pass name. Currently, the only allowable value is OobeSystem. \"OobeSystem\""""
    component_name: Optional[Union[str, "_models.ComponentNames"]] = rest_field(name="componentName")
    """The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
     \"Microsoft-Windows-Shell-Setup\""""
    setting_name: Optional[Union[str, "_models.SettingNames"]] = rest_field(name="settingName")
    """Specifies the name of the setting to which the content applies. Possible values are:
     FirstLogonCommands and AutoLogon. Known values are: \"AutoLogon\" and \"FirstLogonCommands\"."""
    content: Optional[str] = rest_field()
    """Specifies the XML formatted content that is added to the unattend.xml file for the specified
     path and component. The XML must be less than 4KB and must include the root element for the
     setting or feature that is being inserted."""

    @overload
    def __init__(
        self,
        *,
        pass_name: Optional[Union[str, "_models.PassNames"]] = None,
        component_name: Optional[Union[str, "_models.ComponentNames"]] = None,
        setting_name: Optional[Union[str, "_models.SettingNames"]] = None,
        content: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AlternativeOption(_model_base.Model):
    """Describes the alternative option specified by the Publisher for this image when this image is
    deprecated.

    :ivar type: Describes the type of the alternative option. Known values are: "None", "Offer",
     and "Plan".
    :vartype type: str or ~azure.mgmt.compute.models.AlternativeType
    :ivar value: Indicates the alternative option value specified by the Publisher. This is the
     Offer name when the type is Offer or the Plan name when the type is Plan.
    :vartype value: str
    """

    type: Optional[Union[str, "_models.AlternativeType"]] = rest_field()
    """Describes the type of the alternative option. Known values are: \"None\", \"Offer\", and
     \"Plan\"."""
    value: Optional[str] = rest_field()
    """Indicates the alternative option value specified by the Publisher. This is the Offer name when
     the type is Offer or the Plan name when the type is Plan."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.AlternativeType"]] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiEntityReference(_model_base.Model):
    """The API entity reference.

    :ivar id: The ARM resource id in the form of
     /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
    :vartype id: str
    """

    id: Optional[str] = rest_field()
    """The ARM resource id in the form of
     /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/..."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiError(_model_base.Model):
    """Api error.

    :ivar details: The Api error details.
    :vartype details: list[~azure.mgmt.compute.models.ApiErrorBase]
    :ivar innererror: The Api inner error.
    :vartype innererror: ~azure.mgmt.compute.models.InnerError
    :ivar code: The error code.
    :vartype code: str
    :ivar target: The target of the particular error.
    :vartype target: str
    :ivar message: The error message.
    :vartype message: str
    """

    details: Optional[List["_models.ApiErrorBase"]] = rest_field()
    """The Api error details."""
    innererror: Optional["_models.InnerError"] = rest_field()
    """The Api inner error."""
    code: Optional[str] = rest_field()
    """The error code."""
    target: Optional[str] = rest_field()
    """The target of the particular error."""
    message: Optional[str] = rest_field()
    """The error message."""

    @overload
    def __init__(
        self,
        *,
        details: Optional[List["_models.ApiErrorBase"]] = None,
        innererror: Optional["_models.InnerError"] = None,
        code: Optional[str] = None,
        target: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApiErrorBase(_model_base.Model):
    """Api error base.

    :ivar code: The error code.
    :vartype code: str
    :ivar target: The target of the particular error.
    :vartype target: str
    :ivar message: The error message.
    :vartype message: str
    """

    code: Optional[str] = rest_field()
    """The error code."""
    target: Optional[str] = rest_field()
    """The target of the particular error."""
    message: Optional[str] = rest_field()
    """The error message."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        target: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ApplicationProfile(_model_base.Model):
    """Contains the list of gallery applications that should be made available to the VM/VMSS.

    :ivar gallery_applications: Specifies the gallery applications that should be made available to
     the VM/VMSS.
    :vartype gallery_applications: list[~azure.mgmt.compute.models.VMGalleryApplication]
    """

    gallery_applications: Optional[List["_models.VMGalleryApplication"]] = rest_field(name="galleryApplications")
    """Specifies the gallery applications that should be made available to the VM/VMSS."""

    @overload
    def __init__(
        self,
        *,
        gallery_applications: Optional[List["_models.VMGalleryApplication"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AttachDetachDataDisksRequest(_model_base.Model):
    """Specifies the input for attaching and detaching a list of managed data disks.

    :ivar data_disks_to_attach: The list of managed data disks to be attached.
    :vartype data_disks_to_attach: list[~azure.mgmt.compute.models.DataDisksToAttach]
    :ivar data_disks_to_detach: The list of managed data disks to be detached.
    :vartype data_disks_to_detach: list[~azure.mgmt.compute.models.DataDisksToDetach]
    """

    data_disks_to_attach: Optional[List["_models.DataDisksToAttach"]] = rest_field(name="dataDisksToAttach")
    """The list of managed data disks to be attached."""
    data_disks_to_detach: Optional[List["_models.DataDisksToDetach"]] = rest_field(name="dataDisksToDetach")
    """The list of managed data disks to be detached."""

    @overload
    def __init__(
        self,
        *,
        data_disks_to_attach: Optional[List["_models.DataDisksToAttach"]] = None,
        data_disks_to_detach: Optional[List["_models.DataDisksToDetach"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AutomaticOSUpgradePolicy(_model_base.Model):
    """The configuration parameters used for performing automatic OS upgrade.

    :ivar enable_automatic_os_upgrade: Indicates whether OS upgrades should automatically be
     applied to scale set instances in a rolling fashion when a newer version of the OS image
     becomes available. Default value is false. If this is set to true for Windows based scale sets,
     `enableAutomaticUpdates
     <https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet>`_  # pylint: disable=line-too-long
     is automatically set to false and cannot be set to true.
    :vartype enable_automatic_os_upgrade: bool
    :ivar disable_automatic_rollback: Whether OS image rollback feature should be disabled. Default
     value is false.
    :vartype disable_automatic_rollback: bool
    :ivar use_rolling_upgrade_policy: Indicates whether rolling upgrade policy should be used
     during Auto OS Upgrade. Default value is false. Auto OS Upgrade will fallback to the default
     policy if no policy is defined on the VMSS.
    :vartype use_rolling_upgrade_policy: bool
    :ivar os_rolling_upgrade_deferral: Indicates whether Auto OS Upgrade should undergo deferral.
     Deferred OS upgrades will send advanced notifications on a per-VM basis that an OS upgrade from
     rolling upgrades is incoming, via the IMDS tag 'Platform.PendingOSUpgrade'. The upgrade then
     defers until the upgrade is approved via an ApproveRollingUpgrade call.
    :vartype os_rolling_upgrade_deferral: bool
    """

    enable_automatic_os_upgrade: Optional[bool] = rest_field(name="enableAutomaticOSUpgrade")
    """Indicates whether OS upgrades should automatically be applied to scale set instances in a
     rolling fashion when a newer version of the OS image becomes available. Default value is false.
     If this is set to true for Windows based scale sets, `enableAutomaticUpdates
     <https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet>`_  # pylint: disable=line-too-long
     is automatically set to false and cannot be set to true."""
    disable_automatic_rollback: Optional[bool] = rest_field(name="disableAutomaticRollback")
    """Whether OS image rollback feature should be disabled. Default value is false."""
    use_rolling_upgrade_policy: Optional[bool] = rest_field(name="useRollingUpgradePolicy")
    """Indicates whether rolling upgrade policy should be used during Auto OS Upgrade. Default value
     is false. Auto OS Upgrade will fallback to the default policy if no policy is defined on the
     VMSS."""
    os_rolling_upgrade_deferral: Optional[bool] = rest_field(name="osRollingUpgradeDeferral")
    """Indicates whether Auto OS Upgrade should undergo deferral. Deferred OS upgrades will send
     advanced notifications on a per-VM basis that an OS upgrade from rolling upgrades is incoming,
     via the IMDS tag 'Platform.PendingOSUpgrade'. The upgrade then defers until the upgrade is
     approved via an ApproveRollingUpgrade call."""

    @overload
    def __init__(
        self,
        *,
        enable_automatic_os_upgrade: Optional[bool] = None,
        disable_automatic_rollback: Optional[bool] = None,
        use_rolling_upgrade_policy: Optional[bool] = None,
        os_rolling_upgrade_deferral: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AutomaticOSUpgradeProperties(_model_base.Model):
    """Describes automatic OS upgrade properties on the image.


    :ivar automatic_os_upgrade_supported: Specifies whether automatic OS upgrade is supported on
     the image. Required.
    :vartype automatic_os_upgrade_supported: bool
    """

    automatic_os_upgrade_supported: bool = rest_field(name="automaticOSUpgradeSupported")
    """Specifies whether automatic OS upgrade is supported on the image. Required."""

    @overload
    def __init__(
        self,
        *,
        automatic_os_upgrade_supported: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AutomaticRepairsPolicy(_model_base.Model):
    """Specifies the configuration parameters for automatic repairs on the virtual machine scale set.

    :ivar enabled: Specifies whether automatic repairs should be enabled on the virtual machine
     scale set. The default value is false.
    :vartype enabled: bool
    :ivar grace_period: The amount of time for which automatic repairs are suspended due to a state
     change on VM. The grace time starts after the state change has completed. This helps avoid
     premature or accidental repairs. The time duration should be specified in ISO 8601 format. The
     minimum allowed grace period is 10 minutes (PT10M), which is also the default value. The
     maximum allowed grace period is 90 minutes (PT90M).
    :vartype grace_period: str
    :ivar repair_action: Type of repair action (replace, restart, reimage) that will be used for
     repairing unhealthy virtual machines in the scale set. Default value is replace. Known values
     are: "Replace", "Restart", and "Reimage".
    :vartype repair_action: str or ~azure.mgmt.compute.models.RepairAction
    """

    enabled: Optional[bool] = rest_field()
    """Specifies whether automatic repairs should be enabled on the virtual machine scale set. The
     default value is false."""
    grace_period: Optional[str] = rest_field(name="gracePeriod")
    """The amount of time for which automatic repairs are suspended due to a state change on VM. The
     grace time starts after the state change has completed. This helps avoid premature or
     accidental repairs. The time duration should be specified in ISO 8601 format. The minimum
     allowed grace period is 10 minutes (PT10M), which is also the default value. The maximum
     allowed grace period is 90 minutes (PT90M)."""
    repair_action: Optional[Union[str, "_models.RepairAction"]] = rest_field(name="repairAction")
    """Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy
     virtual machines in the scale set. Default value is replace. Known values are: \"Replace\",
     \"Restart\", and \"Reimage\"."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        grace_period: Optional[str] = None,
        repair_action: Optional[Union[str, "_models.RepairAction"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long"""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AvailabilitySet(TrackedResource):
    """Specifies information about the availability set that the virtual machine should be assigned
    to. Virtual machines specified in the same availability set are allocated to different nodes to
    maximize availability. For more information about availability sets, see `Availability sets
    overview <https://docs.microsoft.com/azure/virtual-machines/availability-set-overview>`_. For
    more information on Azure planned maintenance, see `Maintenance and updates for Virtual
    Machines in Azure
    <https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates>`_. Currently, a VM
    can only be added to an availability set at creation time. An existing VM cannot be added to an
    availability set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The instance view of a resource.
    :vartype properties: ~azure.mgmt.compute.models.AvailabilitySetProperties
    :ivar sku: Sku of the availability set, only name is required to be set. See
     AvailabilitySetSkuTypes for possible set of values. Use 'Aligned' for virtual machines with
     managed disks and 'Classic' for virtual machines with unmanaged disks. Default value is
     'Classic'.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    """

    properties: Optional["_models.AvailabilitySetProperties"] = rest_field()
    """The instance view of a resource."""
    sku: Optional["_models.Sku"] = rest_field()
    """Sku of the availability set, only name is required to be set. See AvailabilitySetSkuTypes for
     possible set of values. Use 'Aligned' for virtual machines with managed disks and 'Classic' for
     virtual machines with unmanaged disks. Default value is 'Classic'."""

    __flattened_items = [
        "platform_update_domain_count",
        "platform_fault_domain_count",
        "virtual_machines",
        "proximity_placement_group",
        "statuses",
        "scheduled_events_policy",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AvailabilitySetProperties"] = None,
        sku: Optional["_models.Sku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class AvailabilitySetProperties(_model_base.Model):
    """The instance view of a resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar platform_update_domain_count: Update Domain count.
    :vartype platform_update_domain_count: int
    :ivar platform_fault_domain_count: Fault Domain count.
    :vartype platform_fault_domain_count: int
    :ivar virtual_machines: A list of references to all virtual machines in the availability set.
    :vartype virtual_machines: list[~azure.mgmt.compute.models.SubResource]
    :ivar proximity_placement_group: Specifies information about the proximity placement group that
     the availability set should be assigned to. Minimum api-version: 2018-04-01.
    :vartype proximity_placement_group: ~azure.mgmt.compute.models.SubResource
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    :ivar scheduled_events_policy: Specifies Redeploy, Reboot and
     ScheduledEventsAdditionalPublishingTargets Scheduled Event related configurations for the
     availability set.
    :vartype scheduled_events_policy: ~azure.mgmt.compute.models.ScheduledEventsPolicy
    """

    platform_update_domain_count: Optional[int] = rest_field(name="platformUpdateDomainCount")
    """Update Domain count."""
    platform_fault_domain_count: Optional[int] = rest_field(name="platformFaultDomainCount")
    """Fault Domain count."""
    virtual_machines: Optional[List["_models.SubResource"]] = rest_field(name="virtualMachines")
    """A list of references to all virtual machines in the availability set."""
    proximity_placement_group: Optional["_models.SubResource"] = rest_field(name="proximityPlacementGroup")
    """Specifies information about the proximity placement group that the availability set should be
     assigned to. Minimum api-version: 2018-04-01."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field(visibility=["read"])
    """The resource status information."""
    scheduled_events_policy: Optional["_models.ScheduledEventsPolicy"] = rest_field(name="scheduledEventsPolicy")
    """Specifies Redeploy, Reboot and ScheduledEventsAdditionalPublishingTargets Scheduled Event
     related configurations for the availability set."""

    @overload
    def __init__(
        self,
        *,
        platform_update_domain_count: Optional[int] = None,
        platform_fault_domain_count: Optional[int] = None,
        virtual_machines: Optional[List["_models.SubResource"]] = None,
        proximity_placement_group: Optional["_models.SubResource"] = None,
        scheduled_events_policy: Optional["_models.ScheduledEventsPolicy"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpdateResource(_model_base.Model):
    """The Update Resource model definition.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AvailabilitySetUpdate(UpdateResource):
    """Specifies information about the availability set that the virtual machine should be assigned
    to. Only tags may be updated.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The instance view of a resource.
    :vartype properties: ~azure.mgmt.compute.models.AvailabilitySetProperties
    :ivar sku: Sku of the availability set.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    """

    properties: Optional["_models.AvailabilitySetProperties"] = rest_field()
    """The instance view of a resource."""
    sku: Optional["_models.Sku"] = rest_field()
    """Sku of the availability set."""

    __flattened_items = [
        "platform_update_domain_count",
        "platform_fault_domain_count",
        "virtual_machines",
        "proximity_placement_group",
        "statuses",
        "scheduled_events_policy",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AvailabilitySetProperties"] = None,
        sku: Optional["_models.Sku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class AvailablePatchSummary(_model_base.Model):
    """Describes the properties of an virtual machine instance view for available patch summary.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The overall success or failure status of the operation. It remains "InProgress"
     until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded",
     or "CompletedWithWarnings.". Known values are: "Unknown", "InProgress", "Failed", "Succeeded",
     and "CompletedWithWarnings".
    :vartype status: str or ~azure.mgmt.compute.models.PatchOperationStatus
    :ivar assessment_activity_id: The activity ID of the operation that produced this result. It is
     used to correlate across CRP and extension logs.
    :vartype assessment_activity_id: str
    :ivar reboot_pending: The overall reboot status of the VM. It will be true when partially
     installed patches require a reboot to complete installation but the reboot has not yet
     occurred.
    :vartype reboot_pending: bool
    :ivar critical_and_security_patch_count: The number of critical or security patches that have
     been detected as available and not yet installed.
    :vartype critical_and_security_patch_count: int
    :ivar other_patch_count: The number of all available patches excluding critical and security.
    :vartype other_patch_count: int
    :ivar start_time: The UTC timestamp when the operation began.
    :vartype start_time: ~datetime.datetime
    :ivar last_modified_time: The UTC timestamp when the operation began.
    :vartype last_modified_time: ~datetime.datetime
    :ivar error: The errors that were encountered during execution of the operation. The details
     array contains the list of them.
    :vartype error: ~azure.mgmt.compute.models.ApiError
    """

    status: Optional[Union[str, "_models.PatchOperationStatus"]] = rest_field(visibility=["read"])
    """The overall success or failure status of the operation. It remains \"InProgress\" until the
     operation completes. At that point it will become \"Unknown\", \"Failed\", \"Succeeded\", or
     \"CompletedWithWarnings.\". Known values are: \"Unknown\", \"InProgress\", \"Failed\",
     \"Succeeded\", and \"CompletedWithWarnings\"."""
    assessment_activity_id: Optional[str] = rest_field(name="assessmentActivityId", visibility=["read"])
    """The activity ID of the operation that produced this result. It is used to correlate across CRP
     and extension logs."""
    reboot_pending: Optional[bool] = rest_field(name="rebootPending", visibility=["read"])
    """The overall reboot status of the VM. It will be true when partially installed patches require a
     reboot to complete installation but the reboot has not yet occurred."""
    critical_and_security_patch_count: Optional[int] = rest_field(
        name="criticalAndSecurityPatchCount", visibility=["read"]
    )
    """The number of critical or security patches that have been detected as available and not yet
     installed."""
    other_patch_count: Optional[int] = rest_field(name="otherPatchCount", visibility=["read"])
    """The number of all available patches excluding critical and security."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """The UTC timestamp when the operation began."""
    last_modified_time: Optional[datetime.datetime] = rest_field(
        name="lastModifiedTime", visibility=["read"], format="rfc3339"
    )
    """The UTC timestamp when the operation began."""
    error: Optional["_models.ApiError"] = rest_field(visibility=["read"])
    """The errors that were encountered during execution of the operation. The details array contains
     the list of them."""


class BillingProfile(_model_base.Model):
    """Specifies the billing related details of a Azure Spot VM or VMSS. Minimum api-version:
    2019-03-01.

    :ivar max_price: Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS.
     This price is in US Dollars. :code:`<br>`:code:`<br>` This price will be compared with the
     current Azure Spot price for the VM size. Also, the prices are compared at the time of
     create/update of Azure Spot VM/VMSS and the operation will only succeed if  the maxPrice is
     greater than the current Azure Spot price. :code:`<br>`:code:`<br>` The maxPrice will also be
     used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice
     after creation of VM/VMSS. :code:`<br>`:code:`<br>` Possible values are:
     :code:`<br>`:code:`<br>` - Any decimal value greater than zero. Example: 0.01538
     :code:`<br>`:code:`<br>` -1 – indicates default price to be up-to on-demand.
     :code:`<br>`:code:`<br>` You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS
     should not be evicted for price reasons. Also, the default max price is -1 if it is not
     provided by you. :code:`<br>`:code:`<br>`Minimum api-version: 2019-03-01.
    :vartype max_price: float
    """

    max_price: Optional[float] = rest_field(name="maxPrice")
    """Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in
     US Dollars. :code:`<br>`:code:`<br>` This price will be compared with the current Azure Spot
     price for the VM size. Also, the prices are compared at the time of create/update of Azure Spot
     VM/VMSS and the operation will only succeed if  the maxPrice is greater than the current Azure
     Spot price. :code:`<br>`:code:`<br>` The maxPrice will also be used for evicting a Azure Spot
     VM/VMSS if the current Azure Spot price goes beyond the maxPrice after creation of VM/VMSS.
     :code:`<br>`:code:`<br>` Possible values are: :code:`<br>`:code:`<br>` - Any decimal value
     greater than zero. Example: 0.01538 :code:`<br>`:code:`<br>` -1 – indicates default price to be
     up-to on-demand. :code:`<br>`:code:`<br>` You can set the maxPrice to -1 to indicate that the
     Azure Spot VM/VMSS should not be evicted for price reasons. Also, the default max price is -1
     if it is not provided by you. :code:`<br>`:code:`<br>`Minimum api-version: 2019-03-01."""

    @overload
    def __init__(
        self,
        *,
        max_price: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BootDiagnostics(_model_base.Model):
    """Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot
    to diagnose VM status. You can easily view the output of your console log. Azure also enables
    you to see a screenshot of the VM from the hypervisor.

    :ivar enabled: Whether boot diagnostics should be enabled on the Virtual Machine.
    :vartype enabled: bool
    :ivar storage_uri: Uri of the storage account to use for placing the console output and
     screenshot. If storageUri is not specified while enabling boot diagnostics, managed storage
     will be used.
    :vartype storage_uri: str
    """

    enabled: Optional[bool] = rest_field()
    """Whether boot diagnostics should be enabled on the Virtual Machine."""
    storage_uri: Optional[str] = rest_field(name="storageUri")
    """Uri of the storage account to use for placing the console output and screenshot. If storageUri
     is not specified while enabling boot diagnostics, managed storage will be used."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        storage_uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BootDiagnosticsInstanceView(_model_base.Model):
    """The instance view of a virtual machine boot diagnostics.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar console_screenshot_blob_uri: The console screenshot blob URI. **Note:** This will **not**
     be set if boot diagnostics is currently enabled with managed storage.
    :vartype console_screenshot_blob_uri: str
    :ivar serial_console_log_blob_uri: The serial console log blob Uri. **Note:** This will **not**
     be set if boot diagnostics is currently enabled with managed storage.
    :vartype serial_console_log_blob_uri: str
    :ivar status: The boot diagnostics status information for the VM. **Note:** It will be set only
     if there are errors encountered in enabling boot diagnostics.
    :vartype status: ~azure.mgmt.compute.models.InstanceViewStatus
    """

    console_screenshot_blob_uri: Optional[str] = rest_field(name="consoleScreenshotBlobUri", visibility=["read"])
    """The console screenshot blob URI. **Note:** This will **not** be set if boot diagnostics is
     currently enabled with managed storage."""
    serial_console_log_blob_uri: Optional[str] = rest_field(name="serialConsoleLogBlobUri", visibility=["read"])
    """The serial console log blob Uri. **Note:** This will **not** be set if boot diagnostics is
     currently enabled with managed storage."""
    status: Optional["_models.InstanceViewStatus"] = rest_field(visibility=["read"])
    """The boot diagnostics status information for the VM. **Note:** It will be set only if there are
     errors encountered in enabling boot diagnostics."""


class CapacityReservation(TrackedResource):
    """Specifies information about the capacity reservation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of the Capacity reservation.
    :vartype properties: ~azure.mgmt.compute.models.CapacityReservationProperties
    :ivar sku: SKU of the resource for which capacity needs be reserved. The SKU name and capacity
     is required to be set. Currently VM Skus with the capability called
     'CapacityReservationSupported' set to true are supported. Refer to List Microsoft.Compute SKUs
     in a region (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported
     values. Required.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    :ivar zones: Availability Zone to use for this capacity reservation. The zone has to be single
     value and also should be part for the list of zones specified during the capacity reservation
     group creation. The zone can be assigned only during creation. If not provided, the reservation
     supports only non-zonal deployments. If provided, enforces VM/VMSS using this capacity
     reservation to be in same zone.
    :vartype zones: list[str]
    """

    properties: Optional["_models.CapacityReservationProperties"] = rest_field()
    """Properties of the Capacity reservation."""
    sku: "_models.Sku" = rest_field()
    """SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required
     to be set. Currently VM Skus with the capability called 'CapacityReservationSupported' set to
     true are supported. Refer to List Microsoft.Compute SKUs in a region
     (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported values. Required."""
    zones: Optional[List[str]] = rest_field()
    """Availability Zone to use for this capacity reservation. The zone has to be single value and
     also should be part for the list of zones specified during the capacity reservation group
     creation. The zone can be assigned only during creation. If not provided, the reservation
     supports only non-zonal deployments. If provided, enforces VM/VMSS using this capacity
     reservation to be in same zone."""

    __flattened_items = [
        "reservation_id",
        "platform_fault_domain_count",
        "virtual_machines_associated",
        "provisioning_time",
        "provisioning_state",
        "instance_view",
        "time_created",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        sku: "_models.Sku",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CapacityReservationProperties"] = None,
        zones: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CapacityReservationGroup(TrackedResource):
    """Specifies information about the capacity reservation group that the capacity reservations
    should be assigned to. Currently, a capacity reservation can only be added to a capacity
    reservation group at creation time. An existing capacity reservation cannot be added or moved
    to another capacity reservation group.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: capacity reservation group Properties.
    :vartype properties: ~azure.mgmt.compute.models.CapacityReservationGroupProperties
    :ivar zones: Availability Zones to use for this capacity reservation group. The zones can be
     assigned only during creation. If not provided, the group supports only regional resources in
     the region. If provided, enforces each capacity reservation in the group to be in one of the
     zones.
    :vartype zones: list[str]
    """

    properties: Optional["_models.CapacityReservationGroupProperties"] = rest_field()
    """capacity reservation group Properties."""
    zones: Optional[List[str]] = rest_field()
    """Availability Zones to use for this capacity reservation group. The zones can be assigned only
     during creation. If not provided, the group supports only regional resources in the region. If
     provided, enforces each capacity reservation in the group to be in one of the zones."""

    __flattened_items = ["capacity_reservations", "virtual_machines_associated", "instance_view", "sharing_profile"]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CapacityReservationGroupProperties"] = None,
        zones: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CapacityReservationGroupInstanceView(_model_base.Model):
    """CapacityReservationGroupInstanceView.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar capacity_reservations: List of instance view of the capacity reservations under the
     capacity reservation group.
    :vartype capacity_reservations:
     list[~azure.mgmt.compute.models.CapacityReservationInstanceViewWithName]
    :ivar shared_subscription_ids: List of the subscriptions that the capacity reservation group is
     shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to
     https://aka.ms/computereservationsharing for more details.
    :vartype shared_subscription_ids: list[~azure.mgmt.compute.models.SubResourceReadOnly]
    """

    capacity_reservations: Optional[List["_models.CapacityReservationInstanceViewWithName"]] = rest_field(
        name="capacityReservations", visibility=["read"]
    )
    """List of instance view of the capacity reservations under the capacity reservation group."""
    shared_subscription_ids: Optional[List["_models.SubResourceReadOnly"]] = rest_field(
        name="sharedSubscriptionIds", visibility=["read"]
    )
    """List of the subscriptions that the capacity reservation group is shared with. **Note:** Minimum
     api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for more
     details."""


class CapacityReservationGroupProperties(_model_base.Model):
    """capacity reservation group Properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar capacity_reservations: A list of all capacity reservation resource ids that belong to
     capacity reservation group.
    :vartype capacity_reservations: list[~azure.mgmt.compute.models.SubResourceReadOnly]
    :ivar virtual_machines_associated: A list of references to all virtual machines associated to
     the capacity reservation group.
    :vartype virtual_machines_associated: list[~azure.mgmt.compute.models.SubResourceReadOnly]
    :ivar instance_view: The capacity reservation group instance view which has the list of
     instance views for all the capacity reservations that belong to the capacity reservation group.
    :vartype instance_view: ~azure.mgmt.compute.models.CapacityReservationGroupInstanceView
    :ivar sharing_profile: Specifies the settings to enable sharing across subscriptions for the
     capacity reservation group resource. Pls. keep in mind the capacity reservation group resource
     generally can be shared across subscriptions belonging to a single azure AAD tenant or cross
     AAD tenant if there is a trust relationship established between the AAD tenants. **Note:**
     Minimum api-version: 2023-09-01. Please refer to https://aka.ms/computereservationsharing for
     more details.
    :vartype sharing_profile: ~azure.mgmt.compute.models.ResourceSharingProfile
    """

    capacity_reservations: Optional[List["_models.SubResourceReadOnly"]] = rest_field(
        name="capacityReservations", visibility=["read"]
    )
    """A list of all capacity reservation resource ids that belong to capacity reservation group."""
    virtual_machines_associated: Optional[List["_models.SubResourceReadOnly"]] = rest_field(
        name="virtualMachinesAssociated", visibility=["read"]
    )
    """A list of references to all virtual machines associated to the capacity reservation group."""
    instance_view: Optional["_models.CapacityReservationGroupInstanceView"] = rest_field(
        name="instanceView", visibility=["read"]
    )
    """The capacity reservation group instance view which has the list of instance views for all the
     capacity reservations that belong to the capacity reservation group."""
    sharing_profile: Optional["_models.ResourceSharingProfile"] = rest_field(name="sharingProfile")
    """Specifies the settings to enable sharing across subscriptions for the capacity reservation
     group resource. Pls. keep in mind the capacity reservation group resource generally can be
     shared across subscriptions belonging to a single azure AAD tenant or cross AAD tenant if there
     is a trust relationship established between the AAD tenants. **Note:** Minimum api-version:
     2023-09-01. Please refer to https://aka.ms/computereservationsharing for more details."""

    @overload
    def __init__(
        self,
        *,
        sharing_profile: Optional["_models.ResourceSharingProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CapacityReservationGroupUpdate(UpdateResource):
    """Specifies information about the capacity reservation group. Only tags can be updated.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: capacity reservation group Properties.
    :vartype properties: ~azure.mgmt.compute.models.CapacityReservationGroupProperties
    """

    properties: Optional["_models.CapacityReservationGroupProperties"] = rest_field()
    """capacity reservation group Properties."""

    __flattened_items = ["capacity_reservations", "virtual_machines_associated", "instance_view", "sharing_profile"]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CapacityReservationGroupProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CapacityReservationInstanceView(_model_base.Model):
    """The instance view of a capacity reservation that provides as snapshot of the runtime properties
    of the capacity reservation that is managed by the platform and can change outside of control
    plane operations.

    :ivar utilization_info: Unutilized capacity of the capacity reservation.
    :vartype utilization_info: ~azure.mgmt.compute.models.CapacityReservationUtilization
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    """

    utilization_info: Optional["_models.CapacityReservationUtilization"] = rest_field(name="utilizationInfo")
    """Unutilized capacity of the capacity reservation."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""

    @overload
    def __init__(
        self,
        *,
        utilization_info: Optional["_models.CapacityReservationUtilization"] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CapacityReservationInstanceViewWithName(CapacityReservationInstanceView):
    """The instance view of a capacity reservation that includes the name of the capacity reservation.
    It is used for the response to the instance view of a capacity reservation group.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar utilization_info: Unutilized capacity of the capacity reservation.
    :vartype utilization_info: ~azure.mgmt.compute.models.CapacityReservationUtilization
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    :ivar name: The name of the capacity reservation.
    :vartype name: str
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the capacity reservation."""

    @overload
    def __init__(
        self,
        *,
        utilization_info: Optional["_models.CapacityReservationUtilization"] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CapacityReservationProfile(_model_base.Model):
    """The parameters of a capacity reservation Profile.

    :ivar capacity_reservation_group: Specifies the capacity reservation group resource id that
     should be used for allocating the virtual machine or scaleset vm instances provided enough
     capacity has been reserved. Please refer to https://aka.ms/CapacityReservation for more
     details.
    :vartype capacity_reservation_group: ~azure.mgmt.compute.models.SubResource
    """

    capacity_reservation_group: Optional["_models.SubResource"] = rest_field(name="capacityReservationGroup")
    """Specifies the capacity reservation group resource id that should be used for allocating the
     virtual machine or scaleset vm instances provided enough capacity has been reserved. Please
     refer to https://aka.ms/CapacityReservation for more details."""

    @overload
    def __init__(
        self,
        *,
        capacity_reservation_group: Optional["_models.SubResource"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CapacityReservationProperties(_model_base.Model):
    """Properties of the Capacity reservation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar reservation_id: A unique id generated and assigned to the capacity reservation by the
     platform which does not change throughout the lifetime of the resource.
    :vartype reservation_id: str
    :ivar platform_fault_domain_count: Specifies the value of fault domain count that Capacity
     Reservation supports for requested VM size. **Note:** The fault domain count specified for a
     resource (like virtual machines scale set) must be less than or equal to this value if it
     deploys using capacity reservation. Minimum api-version: 2022-08-01.
    :vartype platform_fault_domain_count: int
    :ivar virtual_machines_associated: A list of all virtual machine resource ids that are
     associated with the capacity reservation.
    :vartype virtual_machines_associated: list[~azure.mgmt.compute.models.SubResourceReadOnly]
    :ivar provisioning_time: The date time when the capacity reservation was last updated.
    :vartype provisioning_time: ~datetime.datetime
    :ivar provisioning_state: The provisioning state, which only appears in the response.
    :vartype provisioning_state: str
    :ivar instance_view: The Capacity reservation instance view.
    :vartype instance_view: ~azure.mgmt.compute.models.CapacityReservationInstanceView
    :ivar time_created: Specifies the time at which the Capacity Reservation resource was created.
     Minimum api-version: 2021-11-01.
    :vartype time_created: ~datetime.datetime
    """

    reservation_id: Optional[str] = rest_field(name="reservationId", visibility=["read"])
    """A unique id generated and assigned to the capacity reservation by the platform which does not
     change throughout the lifetime of the resource."""
    platform_fault_domain_count: Optional[int] = rest_field(name="platformFaultDomainCount", visibility=["read"])
    """Specifies the value of fault domain count that Capacity Reservation supports for requested VM
     size. **Note:** The fault domain count specified for a resource (like virtual machines scale
     set) must be less than or equal to this value if it deploys using capacity reservation. Minimum
     api-version: 2022-08-01."""
    virtual_machines_associated: Optional[List["_models.SubResourceReadOnly"]] = rest_field(
        name="virtualMachinesAssociated", visibility=["read"]
    )
    """A list of all virtual machine resource ids that are associated with the capacity reservation."""
    provisioning_time: Optional[datetime.datetime] = rest_field(
        name="provisioningTime", visibility=["read"], format="rfc3339"
    )
    """The date time when the capacity reservation was last updated."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state, which only appears in the response."""
    instance_view: Optional["_models.CapacityReservationInstanceView"] = rest_field(
        name="instanceView", visibility=["read"]
    )
    """The Capacity reservation instance view."""
    time_created: Optional[datetime.datetime] = rest_field(name="timeCreated", visibility=["read"], format="rfc3339")
    """Specifies the time at which the Capacity Reservation resource was created. Minimum api-version:
     2021-11-01."""


class CapacityReservationUpdate(UpdateResource):
    """Specifies information about the capacity reservation. Only tags and sku.capacity can be
    updated.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Properties of the Capacity reservation.
    :vartype properties: ~azure.mgmt.compute.models.CapacityReservationProperties
    :ivar sku: SKU of the resource for which capacity needs be reserved. The SKU name and capacity
     is required to be set. Currently VM Skus with the capability called
     'CapacityReservationSupported' set to true are supported. Refer to List Microsoft.Compute SKUs
     in a region (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported
     values.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    """

    properties: Optional["_models.CapacityReservationProperties"] = rest_field()
    """Properties of the Capacity reservation."""
    sku: Optional["_models.Sku"] = rest_field()
    """SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required
     to be set. Currently VM Skus with the capability called 'CapacityReservationSupported' set to
     true are supported. Refer to List Microsoft.Compute SKUs in a region
     (https://docs.microsoft.com/rest/api/compute/resourceskus/list) for supported values."""

    __flattened_items = [
        "reservation_id",
        "platform_fault_domain_count",
        "virtual_machines_associated",
        "provisioning_time",
        "provisioning_state",
        "instance_view",
        "time_created",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CapacityReservationProperties"] = None,
        sku: Optional["_models.Sku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class CapacityReservationUtilization(_model_base.Model):
    """Represents the capacity reservation utilization in terms of resources allocated.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar current_capacity: The value provides the current capacity of the VM size which was
     reserved successfully and for which the customer is getting billed. Minimum api-version:
     2022-08-01.
    :vartype current_capacity: int
    :ivar virtual_machines_allocated: A list of all virtual machines resource ids allocated against
     the capacity reservation.
    :vartype virtual_machines_allocated: list[~azure.mgmt.compute.models.SubResourceReadOnly]
    """

    current_capacity: Optional[int] = rest_field(name="currentCapacity", visibility=["read"])
    """The value provides the current capacity of the VM size which was reserved successfully and for
     which the customer is getting billed. Minimum api-version: 2022-08-01."""
    virtual_machines_allocated: Optional[List["_models.SubResourceReadOnly"]] = rest_field(
        name="virtualMachinesAllocated", visibility=["read"]
    )
    """A list of all virtual machines resource ids allocated against the capacity reservation."""


class CloudError(_model_base.Model):
    """An error response from the Compute service.

    :ivar error: Api error.
    :vartype error: ~azure.mgmt.compute.models.ApiError
    """

    error: Optional["_models.ApiError"] = rest_field()
    """Api error."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ApiError"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataDisk(_model_base.Model):
    """Describes a data disk.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar lun: Specifies the logical unit number of the data disk. This value is used to identify
     data disks within the VM and therefore must be unique for each data disk attached to a VM.
     Required.
    :vartype lun: int
    :ivar name: The disk name.
    :vartype name: str
    :ivar vhd: The virtual hard disk.
    :vartype vhd: ~azure.mgmt.compute.models.VirtualHardDisk
    :ivar image: The source user image virtual hard disk. The virtual hard disk will be copied
     before being attached to the virtual machine. If SourceImage is provided, the destination
     virtual hard drive must not exist.
    :vartype image: ~azure.mgmt.compute.models.VirtualHardDisk
    :ivar caching: Specifies the caching requirements. Possible values are: **None,** **ReadOnly,**
     **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium
     storage.**. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar write_accelerator_enabled: Specifies whether writeAccelerator should be enabled or
     disabled on the disk.
    :vartype write_accelerator_enabled: bool
    :ivar create_option: Specifies how the virtual machine disk should be created. Possible values
     are **Attach:** This value is used when you are using a specialized disk to create the virtual
     machine. **FromImage:** This value is used when you are using an image to create the virtual
     machine data disk. If you are using a platform image, you should also use the imageReference
     element described above. If you are using a marketplace image, you should also use the plan
     element previously described. **Empty:** This value is used when creating an empty data disk.
     **Copy:** This value is used to create a data disk from a snapshot or another disk.
     **Restore:** This value is used to create a data disk from a disk restore point. Required.
     Known values are: "FromImage", "Empty", "Attach", "Copy", and "Restore".
    :vartype create_option: str or ~azure.mgmt.compute.models.DiskCreateOptionTypes
    :ivar disk_size_gb: Specifies the size of an empty data disk in gigabytes. This element can be
     used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is
     the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
    :vartype disk_size_gb: int
    :ivar managed_disk: The managed disk parameters.
    :vartype managed_disk: ~azure.mgmt.compute.models.ManagedDiskParameters
    :ivar source_resource: The source resource identifier. It can be a snapshot, or disk restore
     point from which to create a disk.
    :vartype source_resource: ~azure.mgmt.compute.models.ApiEntityReference
    :ivar to_be_detached: Specifies whether the data disk is in process of detachment from the
     VirtualMachine/VirtualMachineScaleset.
    :vartype to_be_detached: bool
    :ivar disk_iops_read_write: Specifies the Read-Write IOPS for the managed disk when
     StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be
     updated only via updates to the VirtualMachine Scale Set.
    :vartype disk_iops_read_write: int
    :ivar disk_m_bps_read_write: Specifies the bandwidth in MB per second for the managed disk when
     StorageAccountType is UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be
     updated only via updates to the VirtualMachine Scale Set.
    :vartype disk_m_bps_read_write: int
    :ivar detach_option: Specifies the detach behavior to be used while detaching a disk or which
     is already in the process of detachment from the virtual machine. Supported values:
     **ForceDetach.** detachOption: **ForceDetach** is applicable only for managed data disks. If a
     previous detachment attempt of the data disk did not complete due to an unexpected failure from
     the virtual machine and the disk is still not released then use force-detach as a last resort
     option to detach the disk forcibly from the VM. All writes might not have been flushed when
     using this detach behavior. **This feature is still in preview**. To force-detach a data disk
     update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'. "ForceDetach"
    :vartype detach_option: str or ~azure.mgmt.compute.models.DiskDetachOptionTypes
    :ivar delete_option: Specifies whether data disk should be deleted or detached upon VM
     deletion. Possible values are: **Delete.** If this value is used, the data disk is deleted when
     VM is deleted. **Detach.** If this value is used, the data disk is retained after VM is
     deleted. The default value is set to **Detach**. Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DiskDeleteOptionTypes
    """

    lun: int = rest_field()
    """Specifies the logical unit number of the data disk. This value is used to identify data disks
     within the VM and therefore must be unique for each data disk attached to a VM. Required."""
    name: Optional[str] = rest_field()
    """The disk name."""
    vhd: Optional["_models.VirtualHardDisk"] = rest_field()
    """The virtual hard disk."""
    image: Optional["_models.VirtualHardDisk"] = rest_field()
    """The source user image virtual hard disk. The virtual hard disk will be copied before being
     attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive
     must not exist."""
    caching: Optional[Union[str, "_models.CachingTypes"]] = rest_field()
    """Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.**
     The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**. Known
     values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    write_accelerator_enabled: Optional[bool] = rest_field(name="writeAcceleratorEnabled")
    """Specifies whether writeAccelerator should be enabled or disabled on the disk."""
    create_option: Union[str, "_models.DiskCreateOptionTypes"] = rest_field(name="createOption")
    """Specifies how the virtual machine disk should be created. Possible values are **Attach:** This
     value is used when you are using a specialized disk to create the virtual machine.
     **FromImage:** This value is used when you are using an image to create the virtual machine
     data disk. If you are using a platform image, you should also use the imageReference element
     described above. If you are using a marketplace image, you should also use the plan element
     previously described. **Empty:** This value is used when creating an empty data disk. **Copy:**
     This value is used to create a data disk from a snapshot or another disk. **Restore:** This
     value is used to create a data disk from a disk restore point. Required. Known values are:
     \"FromImage\", \"Empty\", \"Attach\", \"Copy\", and \"Restore\"."""
    disk_size_gb: Optional[int] = rest_field(name="diskSizeGB")
    """Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite
     the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of
     bytes x 1024^3 for the disk and the value cannot be larger than 1023."""
    managed_disk: Optional["_models.ManagedDiskParameters"] = rest_field(name="managedDisk")
    """The managed disk parameters."""
    source_resource: Optional["_models.ApiEntityReference"] = rest_field(name="sourceResource")
    """The source resource identifier. It can be a snapshot, or disk restore point from which to
     create a disk."""
    to_be_detached: Optional[bool] = rest_field(name="toBeDetached")
    """Specifies whether the data disk is in process of detachment from the
     VirtualMachine/VirtualMachineScaleset."""
    disk_iops_read_write: Optional[int] = rest_field(name="diskIOPSReadWrite", visibility=["read"])
    """Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS.
     Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the
     VirtualMachine Scale Set."""
    disk_m_bps_read_write: Optional[int] = rest_field(name="diskMBpsReadWrite", visibility=["read"])
    """Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is
     UltraSSD_LRS. Returned only for VirtualMachine ScaleSet VM disks. Can be updated only via
     updates to the VirtualMachine Scale Set."""
    detach_option: Optional[Union[str, "_models.DiskDetachOptionTypes"]] = rest_field(name="detachOption")
    """Specifies the detach behavior to be used while detaching a disk or which is already in the
     process of detachment from the virtual machine. Supported values: **ForceDetach.**
     detachOption: **ForceDetach** is applicable only for managed data disks. If a previous
     detachment attempt of the data disk did not complete due to an unexpected failure from the
     virtual machine and the disk is still not released then use force-detach as a last resort
     option to detach the disk forcibly from the VM. All writes might not have been flushed when
     using this detach behavior. **This feature is still in preview**. To force-detach a data disk
     update toBeDetached to 'true' along with setting detachOption: 'ForceDetach'. \"ForceDetach\""""
    delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = rest_field(name="deleteOption")
    """Specifies whether data disk should be deleted or detached upon VM deletion. Possible values
     are: **Delete.** If this value is used, the data disk is deleted when VM is deleted.
     **Detach.** If this value is used, the data disk is retained after VM is deleted. The default
     value is set to **Detach**. Known values are: \"Delete\" and \"Detach\"."""

    @overload
    def __init__(
        self,
        *,
        lun: int,
        create_option: Union[str, "_models.DiskCreateOptionTypes"],
        name: Optional[str] = None,
        vhd: Optional["_models.VirtualHardDisk"] = None,
        image: Optional["_models.VirtualHardDisk"] = None,
        caching: Optional[Union[str, "_models.CachingTypes"]] = None,
        write_accelerator_enabled: Optional[bool] = None,
        disk_size_gb: Optional[int] = None,
        managed_disk: Optional["_models.ManagedDiskParameters"] = None,
        source_resource: Optional["_models.ApiEntityReference"] = None,
        to_be_detached: Optional[bool] = None,
        detach_option: Optional[Union[str, "_models.DiskDetachOptionTypes"]] = None,
        delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataDiskImage(_model_base.Model):
    """Contains the data disk images information.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar lun: Specifies the logical unit number of the data disk. This value is used to identify
     data disks within the VM and therefore must be unique for each data disk attached to a VM.
    :vartype lun: int
    """

    lun: Optional[int] = rest_field(visibility=["read"])
    """Specifies the logical unit number of the data disk. This value is used to identify data disks
     within the VM and therefore must be unique for each data disk attached to a VM."""


class DataDisksToAttach(_model_base.Model):
    """Describes the data disk to be attached.

    All required parameters must be populated in order to send to server.

    :ivar disk_id: ID of the managed data disk. Required.
    :vartype disk_id: str
    :ivar lun: The logical unit number of the data disk. This value is used to identify data disks
     within the VM and therefore must be unique for each data disk attached to a VM. If not
     specified, lun would be auto assigned.
    :vartype lun: int
    :ivar caching: Specifies the caching requirements. Possible values are: **None,** **ReadOnly,**
     **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium
     storage.**. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar delete_option: Specifies whether data disk should be deleted or detached upon VM
     deletion. Possible values are: **Delete.** If this value is used, the data disk is deleted when
     VM is deleted. **Detach.** If this value is used, the data disk is retained after VM is
     deleted. The default value is set to **Detach**. Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DiskDeleteOptionTypes
    :ivar disk_encryption_set: Specifies the customer managed disk encryption set resource id for
     the managed disk.
    :vartype disk_encryption_set: ~azure.mgmt.compute.models.DiskEncryptionSetParameters
    :ivar write_accelerator_enabled: Specifies whether writeAccelerator should be enabled or
     disabled on the disk.
    :vartype write_accelerator_enabled: bool
    """

    disk_id: str = rest_field(name="diskId")
    """ID of the managed data disk. Required."""
    lun: Optional[int] = rest_field()
    """The logical unit number of the data disk. This value is used to identify data disks within the
     VM and therefore must be unique for each data disk attached to a VM. If not specified, lun
     would be auto assigned."""
    caching: Optional[Union[str, "_models.CachingTypes"]] = rest_field()
    """Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.**
     The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**. Known
     values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = rest_field(name="deleteOption")
    """Specifies whether data disk should be deleted or detached upon VM deletion. Possible values
     are: **Delete.** If this value is used, the data disk is deleted when VM is deleted.
     **Detach.** If this value is used, the data disk is retained after VM is deleted. The default
     value is set to **Detach**. Known values are: \"Delete\" and \"Detach\"."""
    disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = rest_field(name="diskEncryptionSet")
    """Specifies the customer managed disk encryption set resource id for the managed disk."""
    write_accelerator_enabled: Optional[bool] = rest_field(name="writeAcceleratorEnabled")
    """Specifies whether writeAccelerator should be enabled or disabled on the disk."""

    @overload
    def __init__(
        self,
        *,
        disk_id: str,
        lun: Optional[int] = None,
        caching: Optional[Union[str, "_models.CachingTypes"]] = None,
        delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = None,
        disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = None,
        write_accelerator_enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataDisksToDetach(_model_base.Model):
    """Describes the data disk to be detached.

    All required parameters must be populated in order to send to server.

    :ivar disk_id: ID of the managed data disk. Required.
    :vartype disk_id: str
    :ivar detach_option: Supported options available for Detach of a disk from a VM. Refer to
     DetachOption object reference for more details. "ForceDetach"
    :vartype detach_option: str or ~azure.mgmt.compute.models.DiskDetachOptionTypes
    """

    disk_id: str = rest_field(name="diskId")
    """ID of the managed data disk. Required."""
    detach_option: Optional[Union[str, "_models.DiskDetachOptionTypes"]] = rest_field(name="detachOption")
    """Supported options available for Detach of a disk from a VM. Refer to DetachOption object
     reference for more details. \"ForceDetach\""""

    @overload
    def __init__(
        self,
        *,
        disk_id: str,
        detach_option: Optional[Union[str, "_models.DiskDetachOptionTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DedicatedHost(TrackedResource):
    """Specifies information about the Dedicated host.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of the dedicated host.
    :vartype properties: ~azure.mgmt.compute.models.DedicatedHostProperties
    :ivar sku: SKU of the dedicated host for Hardware Generation and VM family. Only name is
     required to be set. List Microsoft.Compute SKUs for a list of possible values. Required.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    """

    properties: Optional["_models.DedicatedHostProperties"] = rest_field()
    """Properties of the dedicated host."""
    sku: "_models.Sku" = rest_field()
    """SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be
     set. List Microsoft.Compute SKUs for a list of possible values. Required."""

    __flattened_items = [
        "platform_fault_domain",
        "auto_replace_on_failure",
        "host_id",
        "virtual_machines",
        "license_type",
        "provisioning_time",
        "provisioning_state",
        "instance_view",
        "time_created",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        sku: "_models.Sku",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.DedicatedHostProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DedicatedHostAllocatableVM(_model_base.Model):
    """Represents the dedicated host unutilized capacity in terms of a specific VM size.

    :ivar vm_size: VM size in terms of which the unutilized capacity is represented.
    :vartype vm_size: str
    :ivar count: Maximum number of VMs of size vmSize that can fit in the dedicated host's
     remaining capacity.
    :vartype count: float
    """

    vm_size: Optional[str] = rest_field(name="vmSize")
    """VM size in terms of which the unutilized capacity is represented."""
    count: Optional[float] = rest_field()
    """Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity."""

    @overload
    def __init__(
        self,
        *,
        vm_size: Optional[str] = None,
        count: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DedicatedHostAvailableCapacity(_model_base.Model):
    """Dedicated host unutilized capacity.

    :ivar allocatable_v_ms: The unutilized capacity of the dedicated host represented in terms of
     each VM size that is allowed to be deployed to the dedicated host.
    :vartype allocatable_v_ms: list[~azure.mgmt.compute.models.DedicatedHostAllocatableVM]
    """

    allocatable_v_ms: Optional[List["_models.DedicatedHostAllocatableVM"]] = rest_field(name="allocatableVMs")
    """The unutilized capacity of the dedicated host represented in terms of each VM size that is
     allowed to be deployed to the dedicated host."""

    @overload
    def __init__(
        self,
        *,
        allocatable_v_ms: Optional[List["_models.DedicatedHostAllocatableVM"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DedicatedHostGroup(TrackedResource):
    """Specifies information about the dedicated host group that the dedicated hosts should be
    assigned to. Currently, a dedicated host can only be added to a dedicated host group at
    creation time. An existing dedicated host cannot be added to another dedicated host group.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Dedicated Host Group Properties.
    :vartype properties: ~azure.mgmt.compute.models.DedicatedHostGroupProperties
    :ivar zones: Availability Zone to use for this host group. Only single zone is supported. The
     zone can be assigned only during creation. If not provided, the group supports all zones in the
     region. If provided, enforces each host in the group to be in the same zone.
    :vartype zones: list[str]
    """

    properties: Optional["_models.DedicatedHostGroupProperties"] = rest_field()
    """Dedicated Host Group Properties."""
    zones: Optional[List[str]] = rest_field()
    """Availability Zone to use for this host group. Only single zone is supported. The zone can be
     assigned only during creation. If not provided, the group supports all zones in the region. If
     provided, enforces each host in the group to be in the same zone."""

    __flattened_items = [
        "platform_fault_domain_count",
        "hosts",
        "instance_view",
        "support_automatic_placement",
        "additional_capabilities",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.DedicatedHostGroupProperties"] = None,
        zones: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DedicatedHostGroupInstanceView(_model_base.Model):
    """DedicatedHostGroupInstanceView.

    :ivar hosts: List of instance view of the dedicated hosts under the dedicated host group.
    :vartype hosts: list[~azure.mgmt.compute.models.DedicatedHostInstanceViewWithName]
    """

    hosts: Optional[List["_models.DedicatedHostInstanceViewWithName"]] = rest_field()
    """List of instance view of the dedicated hosts under the dedicated host group."""

    @overload
    def __init__(
        self,
        *,
        hosts: Optional[List["_models.DedicatedHostInstanceViewWithName"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DedicatedHostGroupProperties(_model_base.Model):
    """Dedicated Host Group Properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar platform_fault_domain_count: Number of fault domains that the host group can span.
     Required.
    :vartype platform_fault_domain_count: int
    :ivar hosts: A list of references to all dedicated hosts in the dedicated host group.
    :vartype hosts: list[~azure.mgmt.compute.models.SubResourceReadOnly]
    :ivar instance_view: The dedicated host group instance view, which has the list of instance
     view of the dedicated hosts under the dedicated host group.
    :vartype instance_view: ~azure.mgmt.compute.models.DedicatedHostGroupInstanceView
    :ivar support_automatic_placement: Specifies whether virtual machines or virtual machine scale
     sets can be placed automatically on the dedicated host group. Automatic placement means
     resources are allocated on dedicated hosts, that are chosen by Azure, under the dedicated host
     group. The value is defaulted to 'false' when not provided. Minimum api-version: 2020-06-01.
    :vartype support_automatic_placement: bool
    :ivar additional_capabilities: Enables or disables a capability on the dedicated host group.
     Minimum api-version: 2022-03-01.
    :vartype additional_capabilities:
     ~azure.mgmt.compute.models.DedicatedHostGroupPropertiesAdditionalCapabilities
    """

    platform_fault_domain_count: int = rest_field(name="platformFaultDomainCount")
    """Number of fault domains that the host group can span. Required."""
    hosts: Optional[List["_models.SubResourceReadOnly"]] = rest_field(visibility=["read"])
    """A list of references to all dedicated hosts in the dedicated host group."""
    instance_view: Optional["_models.DedicatedHostGroupInstanceView"] = rest_field(
        name="instanceView", visibility=["read"]
    )
    """The dedicated host group instance view, which has the list of instance view of the dedicated
     hosts under the dedicated host group."""
    support_automatic_placement: Optional[bool] = rest_field(name="supportAutomaticPlacement")
    """Specifies whether virtual machines or virtual machine scale sets can be placed automatically on
     the dedicated host group. Automatic placement means resources are allocated on dedicated hosts,
     that are chosen by Azure, under the dedicated host group. The value is defaulted to 'false'
     when not provided. Minimum api-version: 2020-06-01."""
    additional_capabilities: Optional["_models.DedicatedHostGroupPropertiesAdditionalCapabilities"] = rest_field(
        name="additionalCapabilities"
    )
    """Enables or disables a capability on the dedicated host group. Minimum api-version: 2022-03-01."""

    @overload
    def __init__(
        self,
        *,
        platform_fault_domain_count: int,
        support_automatic_placement: Optional[bool] = None,
        additional_capabilities: Optional["_models.DedicatedHostGroupPropertiesAdditionalCapabilities"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DedicatedHostGroupPropertiesAdditionalCapabilities(_model_base.Model):  # pylint: disable=name-too-long
    """Enables or disables a capability on the dedicated host group. Minimum api-version: 2022-03-01.

    :ivar ultra_ssd_enabled: The flag that enables or disables a capability to have UltraSSD
     Enabled Virtual Machines on Dedicated Hosts of the Dedicated Host Group. For the Virtual
     Machines to be UltraSSD Enabled, UltraSSDEnabled flag for the resource needs to be set true as
     well. The value is defaulted to 'false' when not provided. Please refer to
     https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details
     on Ultra SSD feature. **Note:** The ultraSSDEnabled setting can only be enabled for Host Groups
     that are created as zonal. Minimum api-version: 2022-03-01.
    :vartype ultra_ssd_enabled: bool
    """

    ultra_ssd_enabled: Optional[bool] = rest_field(name="ultraSSDEnabled")
    """The flag that enables or disables a capability to have UltraSSD Enabled Virtual Machines on
     Dedicated Hosts of the Dedicated Host Group. For the Virtual Machines to be UltraSSD Enabled,
     UltraSSDEnabled flag for the resource needs to be set true as well. The value is defaulted to
     'false' when not provided. Please refer to
     https://docs.microsoft.com/en-us/azure/virtual-machines/disks-enable-ultra-ssd for more details
     on Ultra SSD feature. **Note:** The ultraSSDEnabled setting can only be enabled for Host Groups
     that are created as zonal. Minimum api-version: 2022-03-01."""

    @overload
    def __init__(
        self,
        *,
        ultra_ssd_enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DedicatedHostGroupUpdate(UpdateResource):
    """Specifies information about the dedicated host group that the dedicated host should be assigned
    to. Only tags may be updated.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Dedicated Host Group Properties.
    :vartype properties: ~azure.mgmt.compute.models.DedicatedHostGroupProperties
    :ivar zones: Availability Zone to use for this host group. Only single zone is supported. The
     zone can be assigned only during creation. If not provided, the group supports all zones in the
     region. If provided, enforces each host in the group to be in the same zone.
    :vartype zones: list[str]
    """

    properties: Optional["_models.DedicatedHostGroupProperties"] = rest_field()
    """Dedicated Host Group Properties."""
    zones: Optional[List[str]] = rest_field()
    """Availability Zone to use for this host group. Only single zone is supported. The zone can be
     assigned only during creation. If not provided, the group supports all zones in the region. If
     provided, enforces each host in the group to be in the same zone."""

    __flattened_items = [
        "platform_fault_domain_count",
        "hosts",
        "instance_view",
        "support_automatic_placement",
        "additional_capabilities",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.DedicatedHostGroupProperties"] = None,
        zones: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DedicatedHostInstanceView(_model_base.Model):
    """The instance view of a dedicated host.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar asset_id: Specifies the unique id of the dedicated physical machine on which the
     dedicated host resides.
    :vartype asset_id: str
    :ivar available_capacity: Unutilized capacity of the dedicated host.
    :vartype available_capacity: ~azure.mgmt.compute.models.DedicatedHostAvailableCapacity
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    """

    asset_id: Optional[str] = rest_field(name="assetId", visibility=["read"])
    """Specifies the unique id of the dedicated physical machine on which the dedicated host resides."""
    available_capacity: Optional["_models.DedicatedHostAvailableCapacity"] = rest_field(name="availableCapacity")
    """Unutilized capacity of the dedicated host."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""

    @overload
    def __init__(
        self,
        *,
        available_capacity: Optional["_models.DedicatedHostAvailableCapacity"] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DedicatedHostInstanceViewWithName(DedicatedHostInstanceView):
    """The instance view of a dedicated host that includes the name of the dedicated host. It is used
    for the response to the instance view of a dedicated host group.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar asset_id: Specifies the unique id of the dedicated physical machine on which the
     dedicated host resides.
    :vartype asset_id: str
    :ivar available_capacity: Unutilized capacity of the dedicated host.
    :vartype available_capacity: ~azure.mgmt.compute.models.DedicatedHostAvailableCapacity
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    :ivar name: The name of the dedicated host.
    :vartype name: str
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the dedicated host."""

    @overload
    def __init__(
        self,
        *,
        available_capacity: Optional["_models.DedicatedHostAvailableCapacity"] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DedicatedHostProperties(_model_base.Model):
    """Properties of the dedicated host.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar platform_fault_domain: Fault domain of the dedicated host within a dedicated host group.
    :vartype platform_fault_domain: int
    :ivar auto_replace_on_failure: Specifies whether the dedicated host should be replaced
     automatically in case of a failure. The value is defaulted to 'true' when not provided.
    :vartype auto_replace_on_failure: bool
    :ivar host_id: A unique id generated and assigned to the dedicated host by the platform. Does
     not change throughout the lifetime of the host.
    :vartype host_id: str
    :ivar virtual_machines: A list of references to all virtual machines in the Dedicated Host.
    :vartype virtual_machines: list[~azure.mgmt.compute.models.SubResourceReadOnly]
    :ivar license_type: Specifies the software license type that will be applied to the VMs
     deployed on the dedicated host. Possible values are: **None,** **Windows_Server_Hybrid,**
     **Windows_Server_Perpetual.** The default value is: **None.**. Known values are: "None",
     "Windows_Server_Hybrid", and "Windows_Server_Perpetual".
    :vartype license_type: str or ~azure.mgmt.compute.models.DedicatedHostLicenseTypes
    :ivar provisioning_time: The date when the host was first provisioned.
    :vartype provisioning_time: ~datetime.datetime
    :ivar provisioning_state: The provisioning state, which only appears in the response.
    :vartype provisioning_state: str
    :ivar instance_view: The dedicated host instance view.
    :vartype instance_view: ~azure.mgmt.compute.models.DedicatedHostInstanceView
    :ivar time_created: Specifies the time at which the Dedicated Host resource was created.
     Minimum api-version: 2021-11-01.
    :vartype time_created: ~datetime.datetime
    """

    platform_fault_domain: Optional[int] = rest_field(name="platformFaultDomain")
    """Fault domain of the dedicated host within a dedicated host group."""
    auto_replace_on_failure: Optional[bool] = rest_field(name="autoReplaceOnFailure")
    """Specifies whether the dedicated host should be replaced automatically in case of a failure. The
     value is defaulted to 'true' when not provided."""
    host_id: Optional[str] = rest_field(name="hostId", visibility=["read"])
    """A unique id generated and assigned to the dedicated host by the platform. Does not change
     throughout the lifetime of the host."""
    virtual_machines: Optional[List["_models.SubResourceReadOnly"]] = rest_field(
        name="virtualMachines", visibility=["read"]
    )
    """A list of references to all virtual machines in the Dedicated Host."""
    license_type: Optional[Union[str, "_models.DedicatedHostLicenseTypes"]] = rest_field(name="licenseType")
    """Specifies the software license type that will be applied to the VMs deployed on the dedicated
     host. Possible values are: **None,** **Windows_Server_Hybrid,** **Windows_Server_Perpetual.**
     The default value is: **None.**. Known values are: \"None\", \"Windows_Server_Hybrid\", and
     \"Windows_Server_Perpetual\"."""
    provisioning_time: Optional[datetime.datetime] = rest_field(
        name="provisioningTime", visibility=["read"], format="rfc3339"
    )
    """The date when the host was first provisioned."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state, which only appears in the response."""
    instance_view: Optional["_models.DedicatedHostInstanceView"] = rest_field(name="instanceView", visibility=["read"])
    """The dedicated host instance view."""
    time_created: Optional[datetime.datetime] = rest_field(name="timeCreated", visibility=["read"], format="rfc3339")
    """Specifies the time at which the Dedicated Host resource was created. Minimum api-version:
     2021-11-01."""

    @overload
    def __init__(
        self,
        *,
        platform_fault_domain: Optional[int] = None,
        auto_replace_on_failure: Optional[bool] = None,
        license_type: Optional[Union[str, "_models.DedicatedHostLicenseTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DedicatedHostUpdate(UpdateResource):
    """Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType
    may be updated.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Properties of the dedicated host.
    :vartype properties: ~azure.mgmt.compute.models.DedicatedHostProperties
    :ivar sku: [List all available dedicated host sizes for resizing]
     (https://docs.microsoft.com/rest/api/compute/dedicated-hosts/listavailablesizes). Resizing can
     be only used to scale up DedicatedHost. Only name is required to be set.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    """

    properties: Optional["_models.DedicatedHostProperties"] = rest_field()
    """Properties of the dedicated host."""
    sku: Optional["_models.Sku"] = rest_field()
    """[List all available dedicated host sizes for resizing]
     (https://docs.microsoft.com/rest/api/compute/dedicated-hosts/listavailablesizes). Resizing can
     be only used to scale up DedicatedHost. Only name is required to be set."""

    __flattened_items = [
        "platform_fault_domain",
        "auto_replace_on_failure",
        "host_id",
        "virtual_machines",
        "license_type",
        "provisioning_time",
        "provisioning_state",
        "instance_view",
        "time_created",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.DedicatedHostProperties"] = None,
        sku: Optional["_models.Sku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class DiagnosticsProfile(_model_base.Model):
    """Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15.

    :ivar boot_diagnostics: Boot Diagnostics is a debugging feature which allows you to view
     Console Output and Screenshot to diagnose VM status. **NOTE**\\ : If storageUri is being
     specified then ensure that the storage account is in the same region and subscription as the
     VM. You can easily view the output of your console log. Azure also enables you to see a
     screenshot of the VM from the hypervisor.
    :vartype boot_diagnostics: ~azure.mgmt.compute.models.BootDiagnostics
    """

    boot_diagnostics: Optional["_models.BootDiagnostics"] = rest_field(name="bootDiagnostics")
    """Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot
     to diagnose VM status. **NOTE**\ : If storageUri is being specified then ensure that the
     storage account is in the same region and subscription as the VM. You can easily view the
     output of your console log. Azure also enables you to see a screenshot of the VM from the
     hypervisor."""

    @overload
    def __init__(
        self,
        *,
        boot_diagnostics: Optional["_models.BootDiagnostics"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiffDiskSettings(_model_base.Model):
    """Describes the parameters of ephemeral disk settings that can be specified for operating system
    disk. **Note:** The ephemeral disk settings can only be specified for managed disk.

    :ivar option: Specifies the ephemeral disk settings for operating system disk. "Local"
    :vartype option: str or ~azure.mgmt.compute.models.DiffDiskOptions
    :ivar placement: Specifies the ephemeral disk placement for operating system disk. Possible
     values are: **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is:
     **CacheDisk** if one is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk**
     is used. Refer to the VM size documentation for Windows VM at
     https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at
     https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a
     cache disk. Minimum api-version for NvmeDisk: 2024-03-01. Known values are: "CacheDisk",
     "ResourceDisk", and "NvmeDisk".
    :vartype placement: str or ~azure.mgmt.compute.models.DiffDiskPlacement
    """

    option: Optional[Union[str, "_models.DiffDiskOptions"]] = rest_field()
    """Specifies the ephemeral disk settings for operating system disk. \"Local\""""
    placement: Optional[Union[str, "_models.DiffDiskPlacement"]] = rest_field()
    """Specifies the ephemeral disk placement for operating system disk. Possible values are:
     **CacheDisk,** **ResourceDisk,** **NvmeDisk.** The defaulting behavior is: **CacheDisk** if one
     is configured for the VM size otherwise **ResourceDisk** or **NvmeDisk** is used. Refer to the
     VM size documentation for Windows VM at
     https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux VM at
     https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check which VM sizes exposes a
     cache disk. Minimum api-version for NvmeDisk: 2024-03-01. Known values are: \"CacheDisk\",
     \"ResourceDisk\", and \"NvmeDisk\"."""

    @overload
    def __init__(
        self,
        *,
        option: Optional[Union[str, "_models.DiffDiskOptions"]] = None,
        placement: Optional[Union[str, "_models.DiffDiskPlacement"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DisallowedConfiguration(_model_base.Model):
    """Specifies the disallowed configuration for a virtual machine image.

    :ivar vm_disk_type: VM disk types which are disallowed. Known values are: "None" and
     "Unmanaged".
    :vartype vm_disk_type: str or ~azure.mgmt.compute.models.VmDiskTypes
    """

    vm_disk_type: Optional[Union[str, "_models.VmDiskTypes"]] = rest_field(name="vmDiskType")
    """VM disk types which are disallowed. Known values are: \"None\" and \"Unmanaged\"."""

    @overload
    def __init__(
        self,
        *,
        vm_disk_type: Optional[Union[str, "_models.VmDiskTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubResource(_model_base.Model):
    """SubResource.

    :ivar id: Resource Id.
    :vartype id: str
    """

    id: Optional[str] = rest_field()
    """Resource Id."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiskEncryptionSetParameters(SubResource):
    """Describes the parameter of customer managed disk encryption set resource id that can be
    specified for disk. **Note:** The disk encryption set resource id can only be specified for
    managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details.

    :ivar id: Resource Id.
    :vartype id: str
    """

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiskEncryptionSettings(_model_base.Model):
    """Describes a Encryption Settings for a Disk.

    :ivar disk_encryption_key: Specifies the location of the disk encryption key, which is a Key
     Vault Secret.
    :vartype disk_encryption_key: ~azure.mgmt.compute.models.KeyVaultSecretReference
    :ivar key_encryption_key: Specifies the location of the key encryption key in Key Vault.
    :vartype key_encryption_key: ~azure.mgmt.compute.models.KeyVaultKeyReference
    :ivar enabled: Specifies whether disk encryption should be enabled on the virtual machine.
    :vartype enabled: bool
    """

    disk_encryption_key: Optional["_models.KeyVaultSecretReference"] = rest_field(name="diskEncryptionKey")
    """Specifies the location of the disk encryption key, which is a Key Vault Secret."""
    key_encryption_key: Optional["_models.KeyVaultKeyReference"] = rest_field(name="keyEncryptionKey")
    """Specifies the location of the key encryption key in Key Vault."""
    enabled: Optional[bool] = rest_field()
    """Specifies whether disk encryption should be enabled on the virtual machine."""

    @overload
    def __init__(
        self,
        *,
        disk_encryption_key: Optional["_models.KeyVaultSecretReference"] = None,
        key_encryption_key: Optional["_models.KeyVaultKeyReference"] = None,
        enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiskInstanceView(_model_base.Model):
    """The instance view of the disk.

    :ivar name: The disk name.
    :vartype name: str
    :ivar encryption_settings: Specifies the encryption settings for the OS Disk.
     :code:`<br>`:code:`<br>` Minimum api-version: 2015-06-15.
    :vartype encryption_settings: list[~azure.mgmt.compute.models.DiskEncryptionSettings]
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    """

    name: Optional[str] = rest_field()
    """The disk name."""
    encryption_settings: Optional[List["_models.DiskEncryptionSettings"]] = rest_field(name="encryptionSettings")
    """Specifies the encryption settings for the OS Disk. :code:`<br>`:code:`<br>` Minimum
     api-version: 2015-06-15."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        encryption_settings: Optional[List["_models.DiskEncryptionSettings"]] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubResourceReadOnly(_model_base.Model):
    """SubResourceReadOnly.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Resource Id."""


class DiskRestorePointAttributes(SubResourceReadOnly):
    """Disk Restore Point details.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar encryption: Encryption at rest settings for disk restore point. It is an optional
     property that can be specified in the input while creating a restore point.
    :vartype encryption: ~azure.mgmt.compute.models.RestorePointEncryption
    :ivar source_disk_restore_point: Resource Id of the source disk restore point.
    :vartype source_disk_restore_point: ~azure.mgmt.compute.models.ApiEntityReference
    """

    encryption: Optional["_models.RestorePointEncryption"] = rest_field()
    """Encryption at rest settings for disk restore point. It is an optional property that can be
     specified in the input while creating a restore point."""
    source_disk_restore_point: Optional["_models.ApiEntityReference"] = rest_field(name="sourceDiskRestorePoint")
    """Resource Id of the source disk restore point."""

    @overload
    def __init__(
        self,
        *,
        encryption: Optional["_models.RestorePointEncryption"] = None,
        source_disk_restore_point: Optional["_models.ApiEntityReference"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiskRestorePointInstanceView(_model_base.Model):
    """The instance view of a disk restore point.

    :ivar id: Disk restore point Id.
    :vartype id: str
    :ivar replication_status: The disk restore point replication status information.
    :vartype replication_status: ~azure.mgmt.compute.models.DiskRestorePointReplicationStatus
    """

    id: Optional[str] = rest_field()
    """Disk restore point Id."""
    replication_status: Optional["_models.DiskRestorePointReplicationStatus"] = rest_field(name="replicationStatus")
    """The disk restore point replication status information."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        replication_status: Optional["_models.DiskRestorePointReplicationStatus"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiskRestorePointReplicationStatus(_model_base.Model):
    """The instance view of a disk restore point.

    :ivar status: The resource status information.
    :vartype status: ~azure.mgmt.compute.models.InstanceViewStatus
    :ivar completion_percent: Replication completion percentage.
    :vartype completion_percent: int
    """

    status: Optional["_models.InstanceViewStatus"] = rest_field()
    """The resource status information."""
    completion_percent: Optional[int] = rest_field(name="completionPercent")
    """Replication completion percentage."""

    @overload
    def __init__(
        self,
        *,
        status: Optional["_models.InstanceViewStatus"] = None,
        completion_percent: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EncryptionIdentity(_model_base.Model):
    """Specifies the Managed Identity used by ADE to get access token for keyvault operations.

    :ivar user_assigned_identity_resource_id: Specifies ARM Resource ID of one of the user
     identities associated with the VM.
    :vartype user_assigned_identity_resource_id: str
    """

    user_assigned_identity_resource_id: Optional[str] = rest_field(name="userAssignedIdentityResourceId")
    """Specifies ARM Resource ID of one of the user identities associated with the VM."""

    @overload
    def __init__(
        self,
        *,
        user_assigned_identity_resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.compute.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.compute.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.compute.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EventGridAndResourceGraph(_model_base.Model):
    """Specifies eventGridAndResourceGraph related Scheduled Event related configurations.

    :ivar enable: Specifies if event grid and resource graph is enabled for Scheduled event related
     configurations.
    :vartype enable: bool
    """

    enable: Optional[bool] = rest_field()
    """Specifies if event grid and resource graph is enabled for Scheduled event related
     configurations."""

    @overload
    def __init__(
        self,
        *,
        enable: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ExtendedLocation(_model_base.Model):
    """The complex type of the extended location.

    :ivar name: The name of the extended location.
    :vartype name: str
    :ivar type: The type of the extended location. "EdgeZone"
    :vartype type: str or ~azure.mgmt.compute.models.ExtendedLocationTypes
    """

    name: Optional[str] = rest_field()
    """The name of the extended location."""
    type: Optional[Union[str, "_models.ExtendedLocationTypes"]] = rest_field()
    """The type of the extended location. \"EdgeZone\""""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.ExtendedLocationTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class HardwareProfile(_model_base.Model):
    """Specifies the hardware settings for the virtual machine.

    :ivar vm_size: Specifies the size of the virtual machine. The enum data type is currently
     deprecated and will be removed by December 23rd 2023. The recommended way to get the list of
     available sizes is using these APIs: `List all available virtual machine sizes in an
     availability set
     <https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes>`_\\ , `List
     all available virtual machine sizes in a region
     <https://docs.microsoft.com/rest/api/compute/resourceskus/list>`_\\ , `List all available
     virtual machine sizes for resizing
     <https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes>`_. For more
     information about virtual machine sizes, see `Sizes for virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/sizes>`_. The available VM sizes depend on
     region and availability set. Known values are: "Basic_A0", "Basic_A1", "Basic_A2", "Basic_A3",
     "Basic_A4", "Standard_A0", "Standard_A1", "Standard_A2", "Standard_A3", "Standard_A4",
     "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10",
     "Standard_A11", "Standard_A1_v2", "Standard_A2_v2", "Standard_A4_v2", "Standard_A8_v2",
     "Standard_A2m_v2", "Standard_A4m_v2", "Standard_A8m_v2", "Standard_B1s", "Standard_B1ms",
     "Standard_B2s", "Standard_B2ms", "Standard_B4ms", "Standard_B8ms", "Standard_D1",
     "Standard_D2", "Standard_D3", "Standard_D4", "Standard_D11", "Standard_D12", "Standard_D13",
     "Standard_D14", "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2",
     "Standard_D5_v2", "Standard_D2_v3", "Standard_D4_v3", "Standard_D8_v3", "Standard_D16_v3",
     "Standard_D32_v3", "Standard_D64_v3", "Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3",
     "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3", "Standard_D11_v2",
     "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2", "Standard_D15_v2", "Standard_DS1",
     "Standard_DS2", "Standard_DS3", "Standard_DS4", "Standard_DS11", "Standard_DS12",
     "Standard_DS13", "Standard_DS14", "Standard_DS1_v2", "Standard_DS2_v2", "Standard_DS3_v2",
     "Standard_DS4_v2", "Standard_DS5_v2", "Standard_DS11_v2", "Standard_DS12_v2",
     "Standard_DS13_v2", "Standard_DS14_v2", "Standard_DS15_v2", "Standard_DS13-4_v2",
     "Standard_DS13-2_v2", "Standard_DS14-8_v2", "Standard_DS14-4_v2", "Standard_E2_v3",
     "Standard_E4_v3", "Standard_E8_v3", "Standard_E16_v3", "Standard_E32_v3", "Standard_E64_v3",
     "Standard_E2s_v3", "Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3",
     "Standard_E32s_v3", "Standard_E64s_v3", "Standard_E32-16_v3", "Standard_E32-8s_v3",
     "Standard_E64-32s_v3", "Standard_E64-16s_v3", "Standard_F1", "Standard_F2", "Standard_F4",
     "Standard_F8", "Standard_F16", "Standard_F1s", "Standard_F2s", "Standard_F4s", "Standard_F8s",
     "Standard_F16s", "Standard_F2s_v2", "Standard_F4s_v2", "Standard_F8s_v2", "Standard_F16s_v2",
     "Standard_F32s_v2", "Standard_F64s_v2", "Standard_F72s_v2", "Standard_G1", "Standard_G2",
     "Standard_G3", "Standard_G4", "Standard_G5", "Standard_GS1", "Standard_GS2", "Standard_GS3",
     "Standard_GS4", "Standard_GS5", "Standard_GS4-8", "Standard_GS4-4", "Standard_GS5-16",
     "Standard_GS5-8", "Standard_H8", "Standard_H16", "Standard_H8m", "Standard_H16m",
     "Standard_H16r", "Standard_H16mr", "Standard_L4s", "Standard_L8s", "Standard_L16s",
     "Standard_L32s", "Standard_M64s", "Standard_M64ms", "Standard_M128s", "Standard_M128ms",
     "Standard_M64-32ms", "Standard_M64-16ms", "Standard_M128-64ms", "Standard_M128-32ms",
     "Standard_NC6", "Standard_NC12", "Standard_NC24", "Standard_NC24r", "Standard_NC6s_v2",
     "Standard_NC12s_v2", "Standard_NC24s_v2", "Standard_NC24rs_v2", "Standard_NC6s_v3",
     "Standard_NC12s_v3", "Standard_NC24s_v3", "Standard_NC24rs_v3", "Standard_ND6s",
     "Standard_ND12s", "Standard_ND24s", "Standard_ND24rs", "Standard_NV6", "Standard_NV12", and
     "Standard_NV24".
    :vartype vm_size: str or ~azure.mgmt.compute.models.VirtualMachineSizeTypes
    :ivar vm_size_properties: Specifies the properties for customizing the size of the virtual
     machine. Minimum api-version: 2021-07-01. This feature is still in preview mode and is not
     supported for VirtualMachineScaleSet. Please follow the instructions in `VM Customization
     <https://aka.ms/vmcustomization>`_ for more details.
    :vartype vm_size_properties: ~azure.mgmt.compute.models.VMSizeProperties
    """

    vm_size: Optional[Union[str, "_models.VirtualMachineSizeTypes"]] = rest_field(name="vmSize")
    """Specifies the size of the virtual machine. The enum data type is currently deprecated and will
     be removed by December 23rd 2023. The recommended way to get the list of available sizes is
     using these APIs: `List all available virtual machine sizes in an availability set
     <https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes>`_\ , `List
     all available virtual machine sizes in a region
     <https://docs.microsoft.com/rest/api/compute/resourceskus/list>`_\ , `List all available
     virtual machine sizes for resizing
     <https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes>`_. For more
     information about virtual machine sizes, see `Sizes for virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/sizes>`_. The available VM sizes depend on
     region and availability set. Known values are: \"Basic_A0\", \"Basic_A1\", \"Basic_A2\",
     \"Basic_A3\", \"Basic_A4\", \"Standard_A0\", \"Standard_A1\", \"Standard_A2\", \"Standard_A3\",
     \"Standard_A4\", \"Standard_A5\", \"Standard_A6\", \"Standard_A7\", \"Standard_A8\",
     \"Standard_A9\", \"Standard_A10\", \"Standard_A11\", \"Standard_A1_v2\", \"Standard_A2_v2\",
     \"Standard_A4_v2\", \"Standard_A8_v2\", \"Standard_A2m_v2\", \"Standard_A4m_v2\",
     \"Standard_A8m_v2\", \"Standard_B1s\", \"Standard_B1ms\", \"Standard_B2s\", \"Standard_B2ms\",
     \"Standard_B4ms\", \"Standard_B8ms\", \"Standard_D1\", \"Standard_D2\", \"Standard_D3\",
     \"Standard_D4\", \"Standard_D11\", \"Standard_D12\", \"Standard_D13\", \"Standard_D14\",
     \"Standard_D1_v2\", \"Standard_D2_v2\", \"Standard_D3_v2\", \"Standard_D4_v2\",
     \"Standard_D5_v2\", \"Standard_D2_v3\", \"Standard_D4_v3\", \"Standard_D8_v3\",
     \"Standard_D16_v3\", \"Standard_D32_v3\", \"Standard_D64_v3\", \"Standard_D2s_v3\",
     \"Standard_D4s_v3\", \"Standard_D8s_v3\", \"Standard_D16s_v3\", \"Standard_D32s_v3\",
     \"Standard_D64s_v3\", \"Standard_D11_v2\", \"Standard_D12_v2\", \"Standard_D13_v2\",
     \"Standard_D14_v2\", \"Standard_D15_v2\", \"Standard_DS1\", \"Standard_DS2\", \"Standard_DS3\",
     \"Standard_DS4\", \"Standard_DS11\", \"Standard_DS12\", \"Standard_DS13\", \"Standard_DS14\",
     \"Standard_DS1_v2\", \"Standard_DS2_v2\", \"Standard_DS3_v2\", \"Standard_DS4_v2\",
     \"Standard_DS5_v2\", \"Standard_DS11_v2\", \"Standard_DS12_v2\", \"Standard_DS13_v2\",
     \"Standard_DS14_v2\", \"Standard_DS15_v2\", \"Standard_DS13-4_v2\", \"Standard_DS13-2_v2\",
     \"Standard_DS14-8_v2\", \"Standard_DS14-4_v2\", \"Standard_E2_v3\", \"Standard_E4_v3\",
     \"Standard_E8_v3\", \"Standard_E16_v3\", \"Standard_E32_v3\", \"Standard_E64_v3\",
     \"Standard_E2s_v3\", \"Standard_E4s_v3\", \"Standard_E8s_v3\", \"Standard_E16s_v3\",
     \"Standard_E32s_v3\", \"Standard_E64s_v3\", \"Standard_E32-16_v3\", \"Standard_E32-8s_v3\",
     \"Standard_E64-32s_v3\", \"Standard_E64-16s_v3\", \"Standard_F1\", \"Standard_F2\",
     \"Standard_F4\", \"Standard_F8\", \"Standard_F16\", \"Standard_F1s\", \"Standard_F2s\",
     \"Standard_F4s\", \"Standard_F8s\", \"Standard_F16s\", \"Standard_F2s_v2\",
     \"Standard_F4s_v2\", \"Standard_F8s_v2\", \"Standard_F16s_v2\", \"Standard_F32s_v2\",
     \"Standard_F64s_v2\", \"Standard_F72s_v2\", \"Standard_G1\", \"Standard_G2\", \"Standard_G3\",
     \"Standard_G4\", \"Standard_G5\", \"Standard_GS1\", \"Standard_GS2\", \"Standard_GS3\",
     \"Standard_GS4\", \"Standard_GS5\", \"Standard_GS4-8\", \"Standard_GS4-4\",
     \"Standard_GS5-16\", \"Standard_GS5-8\", \"Standard_H8\", \"Standard_H16\", \"Standard_H8m\",
     \"Standard_H16m\", \"Standard_H16r\", \"Standard_H16mr\", \"Standard_L4s\", \"Standard_L8s\",
     \"Standard_L16s\", \"Standard_L32s\", \"Standard_M64s\", \"Standard_M64ms\",
     \"Standard_M128s\", \"Standard_M128ms\", \"Standard_M64-32ms\", \"Standard_M64-16ms\",
     \"Standard_M128-64ms\", \"Standard_M128-32ms\", \"Standard_NC6\", \"Standard_NC12\",
     \"Standard_NC24\", \"Standard_NC24r\", \"Standard_NC6s_v2\", \"Standard_NC12s_v2\",
     \"Standard_NC24s_v2\", \"Standard_NC24rs_v2\", \"Standard_NC6s_v3\", \"Standard_NC12s_v3\",
     \"Standard_NC24s_v3\", \"Standard_NC24rs_v3\", \"Standard_ND6s\", \"Standard_ND12s\",
     \"Standard_ND24s\", \"Standard_ND24rs\", \"Standard_NV6\", \"Standard_NV12\", and
     \"Standard_NV24\"."""
    vm_size_properties: Optional["_models.VMSizeProperties"] = rest_field(name="vmSizeProperties")
    """Specifies the properties for customizing the size of the virtual machine. Minimum api-version:
     2021-07-01. This feature is still in preview mode and is not supported for
     VirtualMachineScaleSet. Please follow the instructions in `VM Customization
     <https://aka.ms/vmcustomization>`_ for more details."""

    @overload
    def __init__(
        self,
        *,
        vm_size: Optional[Union[str, "_models.VirtualMachineSizeTypes"]] = None,
        vm_size_properties: Optional["_models.VMSizeProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Image(TrackedResource):
    """The source user image virtual hard disk. The virtual hard disk will be copied before being
    attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive
    must not exist.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of an Image.
    :vartype properties: ~azure.mgmt.compute.models.ImageProperties
    :ivar extended_location: The extended location of the Image.
    :vartype extended_location: ~azure.mgmt.compute.models.ExtendedLocation
    """

    properties: Optional["_models.ImageProperties"] = rest_field()
    """Describes the properties of an Image."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(name="extendedLocation")
    """The extended location of the Image."""

    __flattened_items = ["source_virtual_machine", "storage_profile", "provisioning_state", "hyper_v_generation"]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.ImageProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ImageDisk(_model_base.Model):
    """Describes a image disk.

    :ivar snapshot: The snapshot.
    :vartype snapshot: ~azure.mgmt.compute.models.SubResource
    :ivar managed_disk: The managedDisk.
    :vartype managed_disk: ~azure.mgmt.compute.models.SubResource
    :ivar blob_uri: The Virtual Hard Disk.
    :vartype blob_uri: str
    :ivar caching: Specifies the caching requirements. Possible values are: **None,** **ReadOnly,**
     **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium
     storage.**. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar disk_size_gb: Specifies the size of empty data disks in gigabytes. This element can be
     used to overwrite the name of the disk in a virtual machine image. This value cannot be larger
     than 1023 GB.
    :vartype disk_size_gb: int
    :ivar storage_account_type: Specifies the storage account type for the managed disk. NOTE:
     UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. Known values
     are: "Standard_LRS", "Premium_LRS", "StandardSSD_LRS", "UltraSSD_LRS", "Premium_ZRS",
     "StandardSSD_ZRS", and "PremiumV2_LRS".
    :vartype storage_account_type: str or ~azure.mgmt.compute.models.StorageAccountTypes
    :ivar disk_encryption_set: Specifies the customer managed disk encryption set resource id for
     the managed image disk.
    :vartype disk_encryption_set: ~azure.mgmt.compute.models.DiskEncryptionSetParameters
    """

    snapshot: Optional["_models.SubResource"] = rest_field()
    """The snapshot."""
    managed_disk: Optional["_models.SubResource"] = rest_field(name="managedDisk")
    """The managedDisk."""
    blob_uri: Optional[str] = rest_field(name="blobUri")
    """The Virtual Hard Disk."""
    caching: Optional[Union[str, "_models.CachingTypes"]] = rest_field()
    """Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.**
     The default values are: **None for Standard storage. ReadOnly for Premium storage.**. Known
     values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    disk_size_gb: Optional[int] = rest_field(name="diskSizeGB")
    """Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the
     name of the disk in a virtual machine image. This value cannot be larger than 1023 GB."""
    storage_account_type: Optional[Union[str, "_models.StorageAccountTypes"]] = rest_field(name="storageAccountType")
    """Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used
     with data disks, it cannot be used with OS Disk. Known values are: \"Standard_LRS\",
     \"Premium_LRS\", \"StandardSSD_LRS\", \"UltraSSD_LRS\", \"Premium_ZRS\", \"StandardSSD_ZRS\",
     and \"PremiumV2_LRS\"."""
    disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = rest_field(name="diskEncryptionSet")
    """Specifies the customer managed disk encryption set resource id for the managed image disk."""

    @overload
    def __init__(
        self,
        *,
        snapshot: Optional["_models.SubResource"] = None,
        managed_disk: Optional["_models.SubResource"] = None,
        blob_uri: Optional[str] = None,
        caching: Optional[Union[str, "_models.CachingTypes"]] = None,
        disk_size_gb: Optional[int] = None,
        storage_account_type: Optional[Union[str, "_models.StorageAccountTypes"]] = None,
        disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageDataDisk(ImageDisk):
    """Describes a data disk.


    :ivar snapshot: The snapshot.
    :vartype snapshot: ~azure.mgmt.compute.models.SubResource
    :ivar managed_disk: The managedDisk.
    :vartype managed_disk: ~azure.mgmt.compute.models.SubResource
    :ivar blob_uri: The Virtual Hard Disk.
    :vartype blob_uri: str
    :ivar caching: Specifies the caching requirements. Possible values are: **None,** **ReadOnly,**
     **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium
     storage.**. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar disk_size_gb: Specifies the size of empty data disks in gigabytes. This element can be
     used to overwrite the name of the disk in a virtual machine image. This value cannot be larger
     than 1023 GB.
    :vartype disk_size_gb: int
    :ivar storage_account_type: Specifies the storage account type for the managed disk. NOTE:
     UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. Known values
     are: "Standard_LRS", "Premium_LRS", "StandardSSD_LRS", "UltraSSD_LRS", "Premium_ZRS",
     "StandardSSD_ZRS", and "PremiumV2_LRS".
    :vartype storage_account_type: str or ~azure.mgmt.compute.models.StorageAccountTypes
    :ivar disk_encryption_set: Specifies the customer managed disk encryption set resource id for
     the managed image disk.
    :vartype disk_encryption_set: ~azure.mgmt.compute.models.DiskEncryptionSetParameters
    :ivar lun: Specifies the logical unit number of the data disk. This value is used to identify
     data disks within the VM and therefore must be unique for each data disk attached to a VM.
     Required.
    :vartype lun: int
    """

    lun: int = rest_field()
    """Specifies the logical unit number of the data disk. This value is used to identify data disks
     within the VM and therefore must be unique for each data disk attached to a VM. Required."""

    @overload
    def __init__(
        self,
        *,
        lun: int,
        snapshot: Optional["_models.SubResource"] = None,
        managed_disk: Optional["_models.SubResource"] = None,
        blob_uri: Optional[str] = None,
        caching: Optional[Union[str, "_models.CachingTypes"]] = None,
        disk_size_gb: Optional[int] = None,
        storage_account_type: Optional[Union[str, "_models.StorageAccountTypes"]] = None,
        disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageDeprecationStatus(_model_base.Model):
    """Describes image deprecation status properties on the image.

    :ivar image_state: Describes the state of the image. Known values are: "Active",
     "ScheduledForDeprecation", and "Deprecated".
    :vartype image_state: str or ~azure.mgmt.compute.models.ImageState
    :ivar scheduled_deprecation_time: The time, in future, at which this image will be marked as
     deprecated. This scheduled time is chosen by the Publisher.
    :vartype scheduled_deprecation_time: ~datetime.datetime
    :ivar alternative_option: Describes the alternative option specified by the Publisher for this
     image when this image is deprecated.
    :vartype alternative_option: ~azure.mgmt.compute.models.AlternativeOption
    """

    image_state: Optional[Union[str, "_models.ImageState"]] = rest_field(name="imageState")
    """Describes the state of the image. Known values are: \"Active\", \"ScheduledForDeprecation\",
     and \"Deprecated\"."""
    scheduled_deprecation_time: Optional[datetime.datetime] = rest_field(
        name="scheduledDeprecationTime", format="rfc3339"
    )
    """The time, in future, at which this image will be marked as deprecated. This scheduled time is
     chosen by the Publisher."""
    alternative_option: Optional["_models.AlternativeOption"] = rest_field(name="alternativeOption")
    """Describes the alternative option specified by the Publisher for this image when this image is
     deprecated."""

    @overload
    def __init__(
        self,
        *,
        image_state: Optional[Union[str, "_models.ImageState"]] = None,
        scheduled_deprecation_time: Optional[datetime.datetime] = None,
        alternative_option: Optional["_models.AlternativeOption"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageOSDisk(ImageDisk):
    """Describes an Operating System disk.


    :ivar snapshot: The snapshot.
    :vartype snapshot: ~azure.mgmt.compute.models.SubResource
    :ivar managed_disk: The managedDisk.
    :vartype managed_disk: ~azure.mgmt.compute.models.SubResource
    :ivar blob_uri: The Virtual Hard Disk.
    :vartype blob_uri: str
    :ivar caching: Specifies the caching requirements. Possible values are: **None,** **ReadOnly,**
     **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium
     storage.**. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar disk_size_gb: Specifies the size of empty data disks in gigabytes. This element can be
     used to overwrite the name of the disk in a virtual machine image. This value cannot be larger
     than 1023 GB.
    :vartype disk_size_gb: int
    :ivar storage_account_type: Specifies the storage account type for the managed disk. NOTE:
     UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. Known values
     are: "Standard_LRS", "Premium_LRS", "StandardSSD_LRS", "UltraSSD_LRS", "Premium_ZRS",
     "StandardSSD_ZRS", and "PremiumV2_LRS".
    :vartype storage_account_type: str or ~azure.mgmt.compute.models.StorageAccountTypes
    :ivar disk_encryption_set: Specifies the customer managed disk encryption set resource id for
     the managed image disk.
    :vartype disk_encryption_set: ~azure.mgmt.compute.models.DiskEncryptionSetParameters
    :ivar os_type: This property allows you to specify the type of the OS that is included in the
     disk if creating a VM from a custom image. Possible values are: **Windows,** **Linux.**.
     Required. Known values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.compute.models.OperatingSystemTypes
    :ivar os_state: The OS State. For managed images, use Generalized. Required. Known values are:
     "Generalized" and "Specialized".
    :vartype os_state: str or ~azure.mgmt.compute.models.OperatingSystemStateTypes
    """

    os_type: Union[str, "_models.OperatingSystemTypes"] = rest_field(name="osType")
    """This property allows you to specify the type of the OS that is included in the disk if creating
     a VM from a custom image. Possible values are: **Windows,** **Linux.**. Required. Known values
     are: \"Windows\" and \"Linux\"."""
    os_state: Union[str, "_models.OperatingSystemStateTypes"] = rest_field(name="osState")
    """The OS State. For managed images, use Generalized. Required. Known values are: \"Generalized\"
     and \"Specialized\"."""

    @overload
    def __init__(
        self,
        *,
        os_type: Union[str, "_models.OperatingSystemTypes"],
        os_state: Union[str, "_models.OperatingSystemStateTypes"],
        snapshot: Optional["_models.SubResource"] = None,
        managed_disk: Optional["_models.SubResource"] = None,
        blob_uri: Optional[str] = None,
        caching: Optional[Union[str, "_models.CachingTypes"]] = None,
        disk_size_gb: Optional[int] = None,
        storage_account_type: Optional[Union[str, "_models.StorageAccountTypes"]] = None,
        disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageProperties(_model_base.Model):
    """Describes the properties of an Image.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar source_virtual_machine: The source virtual machine from which Image is created.
    :vartype source_virtual_machine: ~azure.mgmt.compute.models.SubResource
    :ivar storage_profile: Specifies the storage settings for the virtual machine disks.
    :vartype storage_profile: ~azure.mgmt.compute.models.ImageStorageProfile
    :ivar provisioning_state: The provisioning state.
    :vartype provisioning_state: str
    :ivar hyper_v_generation: Specifies the HyperVGenerationType of the VirtualMachine created from
     the image. From API Version 2019-03-01 if the image source is a blob, then we need the user to
     specify the value, if the source is managed resource like disk or snapshot, we may require the
     user to specify the property if we cannot deduce it from the source managed resource. Known
     values are: "V1" and "V2".
    :vartype hyper_v_generation: str or ~azure.mgmt.compute.models.HyperVGenerationTypes
    """

    source_virtual_machine: Optional["_models.SubResource"] = rest_field(name="sourceVirtualMachine")
    """The source virtual machine from which Image is created."""
    storage_profile: Optional["_models.ImageStorageProfile"] = rest_field(name="storageProfile")
    """Specifies the storage settings for the virtual machine disks."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state."""
    hyper_v_generation: Optional[Union[str, "_models.HyperVGenerationTypes"]] = rest_field(name="hyperVGeneration")
    """Specifies the HyperVGenerationType of the VirtualMachine created from the image. From API
     Version 2019-03-01 if the image source is a blob, then we need the user to specify the value,
     if the source is managed resource like disk or snapshot, we may require the user to specify the
     property if we cannot deduce it from the source managed resource. Known values are: \"V1\" and
     \"V2\"."""

    @overload
    def __init__(
        self,
        *,
        source_virtual_machine: Optional["_models.SubResource"] = None,
        storage_profile: Optional["_models.ImageStorageProfile"] = None,
        hyper_v_generation: Optional[Union[str, "_models.HyperVGenerationTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageReference(SubResource):
    """Specifies information about the image to use. You can specify information about platform
    images, marketplace images, or virtual machine images. This element is required when you want
    to use a platform image, marketplace image, or virtual machine image, but is not used in other
    creation operations. NOTE: Image reference publisher and offer can only be set when you create
    the scale set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar publisher: The image publisher.
    :vartype publisher: str
    :ivar offer: Specifies the offer of the platform image or marketplace image used to create the
     virtual machine.
    :vartype offer: str
    :ivar sku: The image SKU.
    :vartype sku: str
    :ivar version: Specifies the version of the platform image or marketplace image used to create
     the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and
     Build are decimal numbers. Specify 'latest' to use the latest version of an image available at
     deploy time. Even if you use 'latest', the VM image will not automatically update after deploy
     time even if a new version becomes available. Please do not use field 'version' for gallery
     image deployment, gallery image should always use 'id' field for deployment, to use 'latest'
     version of gallery image, just set
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}'  # pylint: disable=line-too-long
     in the 'id' field without version input.
    :vartype version: str
    :ivar exact_version: Specifies in decimal numbers, the version of platform image or marketplace
     image used to create the virtual machine. This readonly field differs from 'version', only if
     the value specified in 'version' field is 'latest'.
    :vartype exact_version: str
    :ivar shared_gallery_image_id: Specified the shared gallery image unique id for vm deployment.
     This can be fetched from shared gallery image GET call.
    :vartype shared_gallery_image_id: str
    :ivar community_gallery_image_id: Specified the community gallery image unique id for vm
     deployment. This can be fetched from community gallery image GET call.
    :vartype community_gallery_image_id: str
    """

    publisher: Optional[str] = rest_field()
    """The image publisher."""
    offer: Optional[str] = rest_field()
    """Specifies the offer of the platform image or marketplace image used to create the virtual
     machine."""
    sku: Optional[str] = rest_field()
    """The image SKU."""
    version: Optional[str] = rest_field()
    """Specifies the version of the platform image or marketplace image used to create the virtual
     machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are
     decimal numbers. Specify 'latest' to use the latest version of an image available at deploy
     time. Even if you use 'latest', the VM image will not automatically update after deploy time
     even if a new version becomes available. Please do not use field 'version' for gallery image
     deployment, gallery image should always use 'id' field for deployment, to use 'latest' version
     of gallery image, just set
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}'  # pylint: disable=line-too-long
     in the 'id' field without version input."""
    exact_version: Optional[str] = rest_field(name="exactVersion", visibility=["read"])
    """Specifies in decimal numbers, the version of platform image or marketplace image used to create
     the virtual machine. This readonly field differs from 'version', only if the value specified in
     'version' field is 'latest'."""
    shared_gallery_image_id: Optional[str] = rest_field(name="sharedGalleryImageId")
    """Specified the shared gallery image unique id for vm deployment. This can be fetched from shared
     gallery image GET call."""
    community_gallery_image_id: Optional[str] = rest_field(name="communityGalleryImageId")
    """Specified the community gallery image unique id for vm deployment. This can be fetched from
     community gallery image GET call."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        publisher: Optional[str] = None,
        offer: Optional[str] = None,
        sku: Optional[str] = None,
        version: Optional[str] = None,
        shared_gallery_image_id: Optional[str] = None,
        community_gallery_image_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageStorageProfile(_model_base.Model):
    """Describes a storage profile.

    :ivar os_disk: Specifies information about the operating system disk used by the virtual
     machine. :code:`<br>`:code:`<br>` For more information about disks, see `About disks and VHDs
     for Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_.
    :vartype os_disk: ~azure.mgmt.compute.models.ImageOSDisk
    :ivar data_disks: Specifies the parameters that are used to add a data disk to a virtual
     machine. :code:`<br>`:code:`<br>` For more information about disks, see `About disks and VHDs
     for Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_.
    :vartype data_disks: list[~azure.mgmt.compute.models.ImageDataDisk]
    :ivar zone_resilient: Specifies whether an image is zone resilient or not. Default is false.
     Zone resilient images can be created only in regions that provide Zone Redundant Storage (ZRS).
    :vartype zone_resilient: bool
    """

    os_disk: Optional["_models.ImageOSDisk"] = rest_field(name="osDisk")
    """Specifies information about the operating system disk used by the virtual machine.
     :code:`<br>`:code:`<br>` For more information about disks, see `About disks and VHDs for Azure
     virtual machines <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_."""
    data_disks: Optional[List["_models.ImageDataDisk"]] = rest_field(name="dataDisks")
    """Specifies the parameters that are used to add a data disk to a virtual machine.
     :code:`<br>`:code:`<br>` For more information about disks, see `About disks and VHDs for Azure
     virtual machines <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_."""
    zone_resilient: Optional[bool] = rest_field(name="zoneResilient")
    """Specifies whether an image is zone resilient or not. Default is false. Zone resilient images
     can be created only in regions that provide Zone Redundant Storage (ZRS)."""

    @overload
    def __init__(
        self,
        *,
        os_disk: Optional["_models.ImageOSDisk"] = None,
        data_disks: Optional[List["_models.ImageDataDisk"]] = None,
        zone_resilient: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ImageUpdate(UpdateResource):
    """The source user image virtual hard disk. Only tags may be updated.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Describes the properties of an Image.
    :vartype properties: ~azure.mgmt.compute.models.ImageProperties
    """

    properties: Optional["_models.ImageProperties"] = rest_field()
    """Describes the properties of an Image."""

    __flattened_items = ["source_virtual_machine", "storage_profile", "provisioning_state", "hyper_v_generation"]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.ImageProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class InnerError(_model_base.Model):
    """Inner error details.

    :ivar exceptiontype: The exception type.
    :vartype exceptiontype: str
    :ivar errordetail: The internal error message or exception dump.
    :vartype errordetail: str
    """

    exceptiontype: Optional[str] = rest_field()
    """The exception type."""
    errordetail: Optional[str] = rest_field()
    """The internal error message or exception dump."""

    @overload
    def __init__(
        self,
        *,
        exceptiontype: Optional[str] = None,
        errordetail: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InstanceViewStatus(_model_base.Model):
    """Instance view status.

    :ivar code: The status code.
    :vartype code: str
    :ivar level: The level code. Known values are: "Info", "Warning", and "Error".
    :vartype level: str or ~azure.mgmt.compute.models.StatusLevelTypes
    :ivar display_status: The short localizable label for the status.
    :vartype display_status: str
    :ivar message: The detailed status message, including for alerts and error messages.
    :vartype message: str
    :ivar time: The time of the status.
    :vartype time: ~datetime.datetime
    """

    code: Optional[str] = rest_field()
    """The status code."""
    level: Optional[Union[str, "_models.StatusLevelTypes"]] = rest_field()
    """The level code. Known values are: \"Info\", \"Warning\", and \"Error\"."""
    display_status: Optional[str] = rest_field(name="displayStatus")
    """The short localizable label for the status."""
    message: Optional[str] = rest_field()
    """The detailed status message, including for alerts and error messages."""
    time: Optional[datetime.datetime] = rest_field(format="rfc3339")
    """The time of the status."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        level: Optional[Union[str, "_models.StatusLevelTypes"]] = None,
        display_status: Optional[str] = None,
        message: Optional[str] = None,
        time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KeyVaultKeyReference(_model_base.Model):
    """Describes a reference to Key Vault Key.


    :ivar key_url: The URL referencing a key encryption key in Key Vault. Required.
    :vartype key_url: str
    :ivar source_vault: The relative URL of the Key Vault containing the key. Required.
    :vartype source_vault: ~azure.mgmt.compute.models.SubResource
    """

    key_url: str = rest_field(name="keyUrl")
    """The URL referencing a key encryption key in Key Vault. Required."""
    source_vault: "_models.SubResource" = rest_field(name="sourceVault")
    """The relative URL of the Key Vault containing the key. Required."""

    @overload
    def __init__(
        self,
        *,
        key_url: str,
        source_vault: "_models.SubResource",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KeyVaultSecretReference(_model_base.Model):
    """Describes a reference to Key Vault Secret.


    :ivar secret_url: The URL referencing a secret in a Key Vault. Required.
    :vartype secret_url: str
    :ivar source_vault: The relative URL of the Key Vault containing the secret. Required.
    :vartype source_vault: ~azure.mgmt.compute.models.SubResource
    """

    secret_url: str = rest_field(name="secretUrl")
    """The URL referencing a secret in a Key Vault. Required."""
    source_vault: "_models.SubResource" = rest_field(name="sourceVault")
    """The relative URL of the Key Vault containing the secret. Required."""

    @overload
    def __init__(
        self,
        *,
        secret_url: str,
        source_vault: "_models.SubResource",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LastPatchInstallationSummary(_model_base.Model):
    """Describes the properties of the last installed patch summary.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The overall success or failure status of the operation. It remains "InProgress"
     until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded",
     or "CompletedWithWarnings.". Known values are: "Unknown", "InProgress", "Failed", "Succeeded",
     and "CompletedWithWarnings".
    :vartype status: str or ~azure.mgmt.compute.models.PatchOperationStatus
    :ivar installation_activity_id: The activity ID of the operation that produced this result. It
     is used to correlate across CRP and extension logs.
    :vartype installation_activity_id: str
    :ivar maintenance_window_exceeded: Describes whether the operation ran out of time before it
     completed all its intended actions.
    :vartype maintenance_window_exceeded: bool
    :ivar not_selected_patch_count: The number of all available patches but not going to be
     installed because it didn't match a classification or inclusion list entry.
    :vartype not_selected_patch_count: int
    :ivar excluded_patch_count: The number of all available patches but excluded explicitly by a
     customer-specified exclusion list match.
    :vartype excluded_patch_count: int
    :ivar pending_patch_count: The number of all available patches expected to be installed over
     the course of the patch installation operation.
    :vartype pending_patch_count: int
    :ivar installed_patch_count: The count of patches that successfully installed.
    :vartype installed_patch_count: int
    :ivar failed_patch_count: The count of patches that failed installation.
    :vartype failed_patch_count: int
    :ivar start_time: The UTC timestamp when the operation began.
    :vartype start_time: ~datetime.datetime
    :ivar last_modified_time: The UTC timestamp when the operation began.
    :vartype last_modified_time: ~datetime.datetime
    :ivar error: The errors that were encountered during execution of the operation. The details
     array contains the list of them.
    :vartype error: ~azure.mgmt.compute.models.ApiError
    """

    status: Optional[Union[str, "_models.PatchOperationStatus"]] = rest_field(visibility=["read"])
    """The overall success or failure status of the operation. It remains \"InProgress\" until the
     operation completes. At that point it will become \"Unknown\", \"Failed\", \"Succeeded\", or
     \"CompletedWithWarnings.\". Known values are: \"Unknown\", \"InProgress\", \"Failed\",
     \"Succeeded\", and \"CompletedWithWarnings\"."""
    installation_activity_id: Optional[str] = rest_field(name="installationActivityId", visibility=["read"])
    """The activity ID of the operation that produced this result. It is used to correlate across CRP
     and extension logs."""
    maintenance_window_exceeded: Optional[bool] = rest_field(name="maintenanceWindowExceeded", visibility=["read"])
    """Describes whether the operation ran out of time before it completed all its intended actions."""
    not_selected_patch_count: Optional[int] = rest_field(name="notSelectedPatchCount", visibility=["read"])
    """The number of all available patches but not going to be installed because it didn't match a
     classification or inclusion list entry."""
    excluded_patch_count: Optional[int] = rest_field(name="excludedPatchCount", visibility=["read"])
    """The number of all available patches but excluded explicitly by a customer-specified exclusion
     list match."""
    pending_patch_count: Optional[int] = rest_field(name="pendingPatchCount", visibility=["read"])
    """The number of all available patches expected to be installed over the course of the patch
     installation operation."""
    installed_patch_count: Optional[int] = rest_field(name="installedPatchCount", visibility=["read"])
    """The count of patches that successfully installed."""
    failed_patch_count: Optional[int] = rest_field(name="failedPatchCount", visibility=["read"])
    """The count of patches that failed installation."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """The UTC timestamp when the operation began."""
    last_modified_time: Optional[datetime.datetime] = rest_field(
        name="lastModifiedTime", visibility=["read"], format="rfc3339"
    )
    """The UTC timestamp when the operation began."""
    error: Optional["_models.ApiError"] = rest_field(visibility=["read"])
    """The errors that were encountered during execution of the operation. The details array contains
     the list of them."""


class LinuxConfiguration(_model_base.Model):
    """Specifies the Linux operating system settings on the virtual machine. For a list of supported
    Linux distributions, see `Linux on Azure-Endorsed Distributions
    <https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros>`_.

    :ivar disable_password_authentication: Specifies whether password authentication should be
     disabled.
    :vartype disable_password_authentication: bool
    :ivar ssh: Specifies the ssh key configuration for a Linux OS.
    :vartype ssh: ~azure.mgmt.compute.models.SshConfiguration
    :ivar provision_vm_agent: Indicates whether virtual machine agent should be provisioned on the
     virtual machine. When this property is not specified in the request body, default behavior is
     to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can
     be added to the VM later.
    :vartype provision_vm_agent: bool
    :ivar patch_settings: [Preview Feature] Specifies settings related to VM Guest Patching on
     Linux.
    :vartype patch_settings: ~azure.mgmt.compute.models.LinuxPatchSettings
    :ivar enable_vm_agent_platform_updates: Indicates whether VMAgent Platform Updates is enabled
     for the Linux virtual machine. Default value is false.
    :vartype enable_vm_agent_platform_updates: bool
    """

    disable_password_authentication: Optional[bool] = rest_field(name="disablePasswordAuthentication")
    """Specifies whether password authentication should be disabled."""
    ssh: Optional["_models.SshConfiguration"] = rest_field()
    """Specifies the ssh key configuration for a Linux OS."""
    provision_vm_agent: Optional[bool] = rest_field(name="provisionVMAgent")
    """Indicates whether virtual machine agent should be provisioned on the virtual machine. When this
     property is not specified in the request body, default behavior is to set it to true. This will
     ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."""
    patch_settings: Optional["_models.LinuxPatchSettings"] = rest_field(name="patchSettings")
    """[Preview Feature] Specifies settings related to VM Guest Patching on Linux."""
    enable_vm_agent_platform_updates: Optional[bool] = rest_field(name="enableVMAgentPlatformUpdates")
    """Indicates whether VMAgent Platform Updates is enabled for the Linux virtual machine. Default
     value is false."""

    @overload
    def __init__(
        self,
        *,
        disable_password_authentication: Optional[bool] = None,
        ssh: Optional["_models.SshConfiguration"] = None,
        provision_vm_agent: Optional[bool] = None,
        patch_settings: Optional["_models.LinuxPatchSettings"] = None,
        enable_vm_agent_platform_updates: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LinuxParameters(_model_base.Model):
    """Input for InstallPatches on a Linux VM, as directly received by the API.

    :ivar classifications_to_include: The update classifications to select when installing patches
     for Linux.
    :vartype classifications_to_include: list[str or
     ~azure.mgmt.compute.models.VMGuestPatchClassificationLinux]
    :ivar package_name_masks_to_include: packages to include in the patch operation. Format:
     packageName_packageVersion.
    :vartype package_name_masks_to_include: list[str]
    :ivar package_name_masks_to_exclude: packages to exclude in the patch operation. Format:
     packageName_packageVersion.
    :vartype package_name_masks_to_exclude: list[str]
    :ivar maintenance_run_id: This is used as a maintenance run identifier for Auto VM Guest
     Patching in Linux.
    :vartype maintenance_run_id: str
    """

    classifications_to_include: Optional[List[Union[str, "_models.VMGuestPatchClassificationLinux"]]] = rest_field(
        name="classificationsToInclude"
    )
    """The update classifications to select when installing patches for Linux."""
    package_name_masks_to_include: Optional[List[str]] = rest_field(name="packageNameMasksToInclude")
    """packages to include in the patch operation. Format: packageName_packageVersion."""
    package_name_masks_to_exclude: Optional[List[str]] = rest_field(name="packageNameMasksToExclude")
    """packages to exclude in the patch operation. Format: packageName_packageVersion."""
    maintenance_run_id: Optional[str] = rest_field(name="maintenanceRunId")
    """This is used as a maintenance run identifier for Auto VM Guest Patching in Linux."""

    @overload
    def __init__(
        self,
        *,
        classifications_to_include: Optional[List[Union[str, "_models.VMGuestPatchClassificationLinux"]]] = None,
        package_name_masks_to_include: Optional[List[str]] = None,
        package_name_masks_to_exclude: Optional[List[str]] = None,
        maintenance_run_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LinuxPatchSettings(_model_base.Model):
    """Specifies settings related to VM Guest Patching on Linux.

    :ivar patch_mode: Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual
     machines associated to virtual machine scale set with OrchestrationMode as Flexible.:code:`<br
     />`:code:`<br />` Possible values are::code:`<br />`:code:`<br />` **ImageDefault** - The
     virtual machine's default patching configuration is used. :code:`<br />`:code:`<br />`
     **AutomaticByPlatform** - The virtual machine will be automatically updated by the platform.
     The property provisionVMAgent must be true. Known values are: "ImageDefault" and
     "AutomaticByPlatform".
    :vartype patch_mode: str or ~azure.mgmt.compute.models.LinuxVMGuestPatchMode
    :ivar assessment_mode: Specifies the mode of VM Guest Patch Assessment for the IaaS virtual
     machine.:code:`<br />`:code:`<br />` Possible values are::code:`<br />`:code:`<br />`
     **ImageDefault** - You control the timing of patch assessments on a virtual machine. :code:`<br
     />`:code:`<br />` **AutomaticByPlatform** - The platform will trigger periodic patch
     assessments. The property provisionVMAgent must be true. Known values are: "ImageDefault" and
     "AutomaticByPlatform".
    :vartype assessment_mode: str or ~azure.mgmt.compute.models.LinuxPatchAssessmentMode
    :ivar automatic_by_platform_settings: Specifies additional settings for patch mode
     AutomaticByPlatform in VM Guest Patching on Linux.
    :vartype automatic_by_platform_settings:
     ~azure.mgmt.compute.models.LinuxVMGuestPatchAutomaticByPlatformSettings
    """

    patch_mode: Optional[Union[str, "_models.LinuxVMGuestPatchMode"]] = rest_field(name="patchMode")
    """Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated
     to virtual machine scale set with OrchestrationMode as Flexible.:code:`<br />`:code:`<br />`
     Possible values are::code:`<br />`:code:`<br />` **ImageDefault** - The virtual machine's
     default patching configuration is used. :code:`<br />`:code:`<br />` **AutomaticByPlatform** -
     The virtual machine will be automatically updated by the platform. The property
     provisionVMAgent must be true. Known values are: \"ImageDefault\" and \"AutomaticByPlatform\"."""
    assessment_mode: Optional[Union[str, "_models.LinuxPatchAssessmentMode"]] = rest_field(name="assessmentMode")
    """Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.:code:`<br
     />`:code:`<br />` Possible values are::code:`<br />`:code:`<br />` **ImageDefault** - You
     control the timing of patch assessments on a virtual machine. :code:`<br />`:code:`<br />`
     **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property
     provisionVMAgent must be true. Known values are: \"ImageDefault\" and \"AutomaticByPlatform\"."""
    automatic_by_platform_settings: Optional["_models.LinuxVMGuestPatchAutomaticByPlatformSettings"] = rest_field(
        name="automaticByPlatformSettings"
    )
    """Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on Linux."""

    @overload
    def __init__(
        self,
        *,
        patch_mode: Optional[Union[str, "_models.LinuxVMGuestPatchMode"]] = None,
        assessment_mode: Optional[Union[str, "_models.LinuxPatchAssessmentMode"]] = None,
        automatic_by_platform_settings: Optional["_models.LinuxVMGuestPatchAutomaticByPlatformSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LinuxVMGuestPatchAutomaticByPlatformSettings(_model_base.Model):  # pylint: disable=name-too-long
    """Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in
    Linux patch settings.

    :ivar reboot_setting: Specifies the reboot setting for all AutomaticByPlatform patch
     installation operations. Known values are: "Unknown", "IfRequired", "Never", and "Always".
    :vartype reboot_setting: str or
     ~azure.mgmt.compute.models.LinuxVMGuestPatchAutomaticByPlatformRebootSetting
    :ivar bypass_platform_safety_checks_on_user_schedule: Enables customer to schedule patching
     without accidental upgrades.
    :vartype bypass_platform_safety_checks_on_user_schedule: bool
    """

    reboot_setting: Optional[Union[str, "_models.LinuxVMGuestPatchAutomaticByPlatformRebootSetting"]] = rest_field(
        name="rebootSetting"
    )
    """Specifies the reboot setting for all AutomaticByPlatform patch installation operations. Known
     values are: \"Unknown\", \"IfRequired\", \"Never\", and \"Always\"."""
    bypass_platform_safety_checks_on_user_schedule: Optional[bool] = rest_field(
        name="bypassPlatformSafetyChecksOnUserSchedule"
    )
    """Enables customer to schedule patching without accidental upgrades."""

    @overload
    def __init__(
        self,
        *,
        reboot_setting: Optional[Union[str, "_models.LinuxVMGuestPatchAutomaticByPlatformRebootSetting"]] = None,
        bypass_platform_safety_checks_on_user_schedule: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LogAnalyticsInputBase(_model_base.Model):
    """Api input base class for LogAnalytics Api.

    All required parameters must be populated in order to send to server.

    :ivar blob_container_sas_uri: SAS Uri of the logging blob container to which LogAnalytics Api
     writes output logs to. Required.
    :vartype blob_container_sas_uri: str
    :ivar from_time: From time of the query. Required.
    :vartype from_time: ~datetime.datetime
    :ivar to_time: To time of the query. Required.
    :vartype to_time: ~datetime.datetime
    :ivar group_by_throttle_policy: Group query result by Throttle Policy applied.
    :vartype group_by_throttle_policy: bool
    :ivar group_by_operation_name: Group query result by Operation Name.
    :vartype group_by_operation_name: bool
    :ivar group_by_resource_name: Group query result by Resource Name.
    :vartype group_by_resource_name: bool
    :ivar group_by_client_application_id: Group query result by Client Application ID.
    :vartype group_by_client_application_id: bool
    :ivar group_by_user_agent: Group query result by User Agent.
    :vartype group_by_user_agent: bool
    """

    blob_container_sas_uri: str = rest_field(name="blobContainerSasUri")
    """SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to.
     Required."""
    from_time: datetime.datetime = rest_field(name="fromTime", format="rfc3339")
    """From time of the query. Required."""
    to_time: datetime.datetime = rest_field(name="toTime", format="rfc3339")
    """To time of the query. Required."""
    group_by_throttle_policy: Optional[bool] = rest_field(name="groupByThrottlePolicy")
    """Group query result by Throttle Policy applied."""
    group_by_operation_name: Optional[bool] = rest_field(name="groupByOperationName")
    """Group query result by Operation Name."""
    group_by_resource_name: Optional[bool] = rest_field(name="groupByResourceName")
    """Group query result by Resource Name."""
    group_by_client_application_id: Optional[bool] = rest_field(name="groupByClientApplicationId")
    """Group query result by Client Application ID."""
    group_by_user_agent: Optional[bool] = rest_field(name="groupByUserAgent")
    """Group query result by User Agent."""

    @overload
    def __init__(
        self,
        *,
        blob_container_sas_uri: str,
        from_time: datetime.datetime,
        to_time: datetime.datetime,
        group_by_throttle_policy: Optional[bool] = None,
        group_by_operation_name: Optional[bool] = None,
        group_by_resource_name: Optional[bool] = None,
        group_by_client_application_id: Optional[bool] = None,
        group_by_user_agent: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MaintenanceRedeployStatus(_model_base.Model):
    """Maintenance Operation Status.

    :ivar is_customer_initiated_maintenance_allowed: True, if customer is allowed to perform
     Maintenance.
    :vartype is_customer_initiated_maintenance_allowed: bool
    :ivar pre_maintenance_window_start_time: Start Time for the Pre Maintenance Window.
    :vartype pre_maintenance_window_start_time: ~datetime.datetime
    :ivar pre_maintenance_window_end_time: End Time for the Pre Maintenance Window.
    :vartype pre_maintenance_window_end_time: ~datetime.datetime
    :ivar maintenance_window_start_time: Start Time for the Maintenance Window.
    :vartype maintenance_window_start_time: ~datetime.datetime
    :ivar maintenance_window_end_time: End Time for the Maintenance Window.
    :vartype maintenance_window_end_time: ~datetime.datetime
    :ivar last_operation_result_code: The Last Maintenance Operation Result Code. Known values are:
     "None", "RetryLater", "MaintenanceAborted", and "MaintenanceCompleted".
    :vartype last_operation_result_code: str or
     ~azure.mgmt.compute.models.MaintenanceOperationResultCodeTypes
    :ivar last_operation_message: Message returned for the last Maintenance Operation.
    :vartype last_operation_message: str
    """

    is_customer_initiated_maintenance_allowed: Optional[bool] = rest_field(name="isCustomerInitiatedMaintenanceAllowed")
    """True, if customer is allowed to perform Maintenance."""
    pre_maintenance_window_start_time: Optional[datetime.datetime] = rest_field(
        name="preMaintenanceWindowStartTime", format="rfc3339"
    )
    """Start Time for the Pre Maintenance Window."""
    pre_maintenance_window_end_time: Optional[datetime.datetime] = rest_field(
        name="preMaintenanceWindowEndTime", format="rfc3339"
    )
    """End Time for the Pre Maintenance Window."""
    maintenance_window_start_time: Optional[datetime.datetime] = rest_field(
        name="maintenanceWindowStartTime", format="rfc3339"
    )
    """Start Time for the Maintenance Window."""
    maintenance_window_end_time: Optional[datetime.datetime] = rest_field(
        name="maintenanceWindowEndTime", format="rfc3339"
    )
    """End Time for the Maintenance Window."""
    last_operation_result_code: Optional[Union[str, "_models.MaintenanceOperationResultCodeTypes"]] = rest_field(
        name="lastOperationResultCode"
    )
    """The Last Maintenance Operation Result Code. Known values are: \"None\", \"RetryLater\",
     \"MaintenanceAborted\", and \"MaintenanceCompleted\"."""
    last_operation_message: Optional[str] = rest_field(name="lastOperationMessage")
    """Message returned for the last Maintenance Operation."""

    @overload
    def __init__(
        self,
        *,
        is_customer_initiated_maintenance_allowed: Optional[bool] = None,
        pre_maintenance_window_start_time: Optional[datetime.datetime] = None,
        pre_maintenance_window_end_time: Optional[datetime.datetime] = None,
        maintenance_window_start_time: Optional[datetime.datetime] = None,
        maintenance_window_end_time: Optional[datetime.datetime] = None,
        last_operation_result_code: Optional[Union[str, "_models.MaintenanceOperationResultCodeTypes"]] = None,
        last_operation_message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ManagedDiskParameters(SubResource):
    """The parameters of a managed disk.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar storage_account_type: Specifies the storage account type for the managed disk. NOTE:
     UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. Known values
     are: "Standard_LRS", "Premium_LRS", "StandardSSD_LRS", "UltraSSD_LRS", "Premium_ZRS",
     "StandardSSD_ZRS", and "PremiumV2_LRS".
    :vartype storage_account_type: str or ~azure.mgmt.compute.models.StorageAccountTypes
    :ivar disk_encryption_set: Specifies the customer managed disk encryption set resource id for
     the managed disk.
    :vartype disk_encryption_set: ~azure.mgmt.compute.models.DiskEncryptionSetParameters
    :ivar security_profile: Specifies the security profile for the managed disk.
    :vartype security_profile: ~azure.mgmt.compute.models.VMDiskSecurityProfile
    """

    storage_account_type: Optional[Union[str, "_models.StorageAccountTypes"]] = rest_field(name="storageAccountType")
    """Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used
     with data disks, it cannot be used with OS Disk. Known values are: \"Standard_LRS\",
     \"Premium_LRS\", \"StandardSSD_LRS\", \"UltraSSD_LRS\", \"Premium_ZRS\", \"StandardSSD_ZRS\",
     and \"PremiumV2_LRS\"."""
    disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = rest_field(name="diskEncryptionSet")
    """Specifies the customer managed disk encryption set resource id for the managed disk."""
    security_profile: Optional["_models.VMDiskSecurityProfile"] = rest_field(name="securityProfile")
    """Specifies the security profile for the managed disk."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        storage_account_type: Optional[Union[str, "_models.StorageAccountTypes"]] = None,
        disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = None,
        security_profile: Optional["_models.VMDiskSecurityProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkInterfaceReference(SubResource):
    """Describes a network interface reference.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar properties: Describes a network interface reference properties.
    :vartype properties: ~azure.mgmt.compute.models.NetworkInterfaceReferenceProperties
    """

    properties: Optional["_models.NetworkInterfaceReferenceProperties"] = rest_field()
    """Describes a network interface reference properties."""

    __flattened_items = ["primary", "delete_option"]

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        properties: Optional["_models.NetworkInterfaceReferenceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class NetworkInterfaceReferenceProperties(_model_base.Model):
    """Describes a network interface reference properties.

    :ivar primary: Specifies the primary network interface in case the virtual machine has more
     than 1 network interface.
    :vartype primary: bool
    :ivar delete_option: Specify what happens to the network interface when the VM is deleted.
     Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DeleteOptions
    """

    primary: Optional[bool] = rest_field()
    """Specifies the primary network interface in case the virtual machine has more than 1 network
     interface."""
    delete_option: Optional[Union[str, "_models.DeleteOptions"]] = rest_field(name="deleteOption")
    """Specify what happens to the network interface when the VM is deleted. Known values are:
     \"Delete\" and \"Detach\"."""

    @overload
    def __init__(
        self,
        *,
        primary: Optional[bool] = None,
        delete_option: Optional[Union[str, "_models.DeleteOptions"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NetworkProfile(_model_base.Model):
    """Specifies the network interfaces or the networking configuration of the virtual machine.

    :ivar network_interfaces: Specifies the list of resource Ids for the network interfaces
     associated with the virtual machine.
    :vartype network_interfaces: list[~azure.mgmt.compute.models.NetworkInterfaceReference]
    :ivar network_api_version: specifies the Microsoft.Network API version used when creating
     networking resources in the Network Interface Configurations. "2020-11-01"
    :vartype network_api_version: str or ~azure.mgmt.compute.models.NetworkApiVersion
    :ivar network_interface_configurations: Specifies the networking configurations that will be
     used to create the virtual machine networking resources.
    :vartype network_interface_configurations:
     list[~azure.mgmt.compute.models.VirtualMachineNetworkInterfaceConfiguration]
    """

    network_interfaces: Optional[List["_models.NetworkInterfaceReference"]] = rest_field(name="networkInterfaces")
    """Specifies the list of resource Ids for the network interfaces associated with the virtual
     machine."""
    network_api_version: Optional[Union[str, "_models.NetworkApiVersion"]] = rest_field(name="networkApiVersion")
    """specifies the Microsoft.Network API version used when creating networking resources in the
     Network Interface Configurations. \"2020-11-01\""""
    network_interface_configurations: Optional[List["_models.VirtualMachineNetworkInterfaceConfiguration"]] = (
        rest_field(name="networkInterfaceConfigurations")
    )
    """Specifies the networking configurations that will be used to create the virtual machine
     networking resources."""

    @overload
    def __init__(
        self,
        *,
        network_interfaces: Optional[List["_models.NetworkInterfaceReference"]] = None,
        network_api_version: Optional[Union[str, "_models.NetworkApiVersion"]] = None,
        network_interface_configurations: Optional[List["_models.VirtualMachineNetworkInterfaceConfiguration"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NoContentResponse(_model_base.Model):
    """There is no content to send for this request, but the headers may be useful."""


class OkResponse(_model_base.Model):
    """The request has succeeded."""


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.compute.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.compute.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.compute.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(visibility=["read"])
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType")
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        action_type: Optional[Union[str, "_models.ActionType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class OrchestrationServiceStateInput(_model_base.Model):
    """The input for OrchestrationServiceState.

    All required parameters must be populated in order to send to server.

    :ivar service_name: The name of the service. Required. "AutomaticRepairs"
    :vartype service_name: str or ~azure.mgmt.compute.models.OrchestrationServiceNames
    :ivar action: The action to be performed. Required. Known values are: "Resume" and "Suspend".
    :vartype action: str or ~azure.mgmt.compute.models.OrchestrationServiceStateAction
    """

    service_name: Union[str, "_models.OrchestrationServiceNames"] = rest_field(name="serviceName")
    """The name of the service. Required. \"AutomaticRepairs\""""
    action: Union[str, "_models.OrchestrationServiceStateAction"] = rest_field()
    """The action to be performed. Required. Known values are: \"Resume\" and \"Suspend\"."""

    @overload
    def __init__(
        self,
        *,
        service_name: Union[str, "_models.OrchestrationServiceNames"],
        action: Union[str, "_models.OrchestrationServiceStateAction"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OrchestrationServiceSummary(_model_base.Model):
    """Summary for an orchestration service of a virtual machine scale set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar service_name: The name of the service. "AutomaticRepairs"
    :vartype service_name: str or ~azure.mgmt.compute.models.OrchestrationServiceNames
    :ivar service_state: The current state of the service. Known values are: "NotRunning",
     "Running", and "Suspended".
    :vartype service_state: str or ~azure.mgmt.compute.models.OrchestrationServiceState
    """

    service_name: Optional[Union[str, "_models.OrchestrationServiceNames"]] = rest_field(
        name="serviceName", visibility=["read"]
    )
    """The name of the service. \"AutomaticRepairs\""""
    service_state: Optional[Union[str, "_models.OrchestrationServiceState"]] = rest_field(
        name="serviceState", visibility=["read"]
    )
    """The current state of the service. Known values are: \"NotRunning\", \"Running\", and
     \"Suspended\"."""


class OSDisk(_model_base.Model):
    """Specifies information about the operating system disk used by the virtual machine. For more
    information about disks, see `About disks and VHDs for Azure virtual machines
    <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_.


    :ivar os_type: This property allows you to specify the type of the OS that is included in the
     disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,**
     **Linux.**. Known values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.compute.models.OperatingSystemTypes
    :ivar encryption_settings: Specifies the encryption settings for the OS Disk. Minimum
     api-version: 2015-06-15.
    :vartype encryption_settings: ~azure.mgmt.compute.models.DiskEncryptionSettings
    :ivar name: The disk name.
    :vartype name: str
    :ivar vhd: The virtual hard disk.
    :vartype vhd: ~azure.mgmt.compute.models.VirtualHardDisk
    :ivar image: The source user image virtual hard disk. The virtual hard disk will be copied
     before being attached to the virtual machine. If SourceImage is provided, the destination
     virtual hard drive must not exist.
    :vartype image: ~azure.mgmt.compute.models.VirtualHardDisk
    :ivar caching: Specifies the caching requirements. Possible values are: **None,** **ReadOnly,**
     **ReadWrite.** The defaulting behavior is: **None for Standard storage. ReadOnly for Premium
     storage.**. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar write_accelerator_enabled: Specifies whether writeAccelerator should be enabled or
     disabled on the disk.
    :vartype write_accelerator_enabled: bool
    :ivar diff_disk_settings: Specifies the ephemeral Disk Settings for the operating system disk
     used by the virtual machine.
    :vartype diff_disk_settings: ~azure.mgmt.compute.models.DiffDiskSettings
    :ivar create_option: Specifies how the virtual machine disk should be created. Possible values
     are **Attach:** This value is used when you are using a specialized disk to create the virtual
     machine. **FromImage:** This value is used when you are using an image to create the virtual
     machine. If you are using a platform image, you should also use the imageReference element
     described above. If you are using a marketplace image, you should also use the plan element
     previously described. Required. Known values are: "FromImage", "Empty", "Attach", "Copy", and
     "Restore".
    :vartype create_option: str or ~azure.mgmt.compute.models.DiskCreateOptionTypes
    :ivar disk_size_gb: Specifies the size of an empty data disk in gigabytes. This element can be
     used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is
     the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
    :vartype disk_size_gb: int
    :ivar managed_disk: The managed disk parameters.
    :vartype managed_disk: ~azure.mgmt.compute.models.ManagedDiskParameters
    :ivar delete_option: Specifies whether OS Disk should be deleted or detached upon VM deletion.
     Possible values are: **Delete.** If this value is used, the OS disk is deleted when VM is
     deleted. **Detach.** If this value is used, the os disk is retained after VM is deleted. The
     default value is set to **Detach**. For an ephemeral OS Disk, the default value is set to
     **Delete**. The user cannot change the delete option for an ephemeral OS Disk. Known values
     are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DiskDeleteOptionTypes
    """

    os_type: Optional[Union[str, "_models.OperatingSystemTypes"]] = rest_field(name="osType")
    """This property allows you to specify the type of the OS that is included in the disk if creating
     a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**. Known
     values are: \"Windows\" and \"Linux\"."""
    encryption_settings: Optional["_models.DiskEncryptionSettings"] = rest_field(name="encryptionSettings")
    """Specifies the encryption settings for the OS Disk. Minimum api-version: 2015-06-15."""
    name: Optional[str] = rest_field()
    """The disk name."""
    vhd: Optional["_models.VirtualHardDisk"] = rest_field()
    """The virtual hard disk."""
    image: Optional["_models.VirtualHardDisk"] = rest_field()
    """The source user image virtual hard disk. The virtual hard disk will be copied before being
     attached to the virtual machine. If SourceImage is provided, the destination virtual hard drive
     must not exist."""
    caching: Optional[Union[str, "_models.CachingTypes"]] = rest_field()
    """Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.**
     The defaulting behavior is: **None for Standard storage. ReadOnly for Premium storage.**. Known
     values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    write_accelerator_enabled: Optional[bool] = rest_field(name="writeAcceleratorEnabled")
    """Specifies whether writeAccelerator should be enabled or disabled on the disk."""
    diff_disk_settings: Optional["_models.DiffDiskSettings"] = rest_field(name="diffDiskSettings")
    """Specifies the ephemeral Disk Settings for the operating system disk used by the virtual
     machine."""
    create_option: Union[str, "_models.DiskCreateOptionTypes"] = rest_field(name="createOption")
    """Specifies how the virtual machine disk should be created. Possible values are **Attach:** This
     value is used when you are using a specialized disk to create the virtual machine.
     **FromImage:** This value is used when you are using an image to create the virtual machine. If
     you are using a platform image, you should also use the imageReference element described above.
     If you are using a marketplace image, you should also use the plan element previously
     described. Required. Known values are: \"FromImage\", \"Empty\", \"Attach\", \"Copy\", and
     \"Restore\"."""
    disk_size_gb: Optional[int] = rest_field(name="diskSizeGB")
    """Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite
     the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of
     bytes x 1024^3 for the disk and the value cannot be larger than 1023."""
    managed_disk: Optional["_models.ManagedDiskParameters"] = rest_field(name="managedDisk")
    """The managed disk parameters."""
    delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = rest_field(name="deleteOption")
    """Specifies whether OS Disk should be deleted or detached upon VM deletion. Possible values are:
     **Delete.** If this value is used, the OS disk is deleted when VM is deleted. **Detach.** If
     this value is used, the os disk is retained after VM is deleted. The default value is set to
     **Detach**. For an ephemeral OS Disk, the default value is set to **Delete**. The user cannot
     change the delete option for an ephemeral OS Disk. Known values are: \"Delete\" and \"Detach\"."""

    @overload
    def __init__(
        self,
        *,
        create_option: Union[str, "_models.DiskCreateOptionTypes"],
        os_type: Optional[Union[str, "_models.OperatingSystemTypes"]] = None,
        encryption_settings: Optional["_models.DiskEncryptionSettings"] = None,
        name: Optional[str] = None,
        vhd: Optional["_models.VirtualHardDisk"] = None,
        image: Optional["_models.VirtualHardDisk"] = None,
        caching: Optional[Union[str, "_models.CachingTypes"]] = None,
        write_accelerator_enabled: Optional[bool] = None,
        diff_disk_settings: Optional["_models.DiffDiskSettings"] = None,
        disk_size_gb: Optional[int] = None,
        managed_disk: Optional["_models.ManagedDiskParameters"] = None,
        delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OSDiskImage(_model_base.Model):
    """Contains the os disk image information.


    :ivar operating_system: The operating system of the osDiskImage. Required. Known values are:
     "Windows" and "Linux".
    :vartype operating_system: str or ~azure.mgmt.compute.models.OperatingSystemTypes
    """

    operating_system: Union[str, "_models.OperatingSystemTypes"] = rest_field(name="operatingSystem")
    """The operating system of the osDiskImage. Required. Known values are: \"Windows\" and \"Linux\"."""

    @overload
    def __init__(
        self,
        *,
        operating_system: Union[str, "_models.OperatingSystemTypes"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OSImageNotificationProfile(_model_base.Model):
    """OSImageNotificationProfile.

    :ivar not_before_timeout: Length of time a Virtual Machine being reimaged or having its OS
     upgraded will have to potentially approve the OS Image Scheduled Event before the event is auto
     approved (timed out). The configuration is specified in ISO 8601 format, and the value must be
     15 minutes (PT15M).
    :vartype not_before_timeout: str
    :ivar enable: Specifies whether the OS Image Scheduled event is enabled or disabled.
    :vartype enable: bool
    """

    not_before_timeout: Optional[str] = rest_field(name="notBeforeTimeout")
    """Length of time a Virtual Machine being reimaged or having its OS upgraded will have to
     potentially approve the OS Image Scheduled Event before the event is auto approved (timed out).
     The configuration is specified in ISO 8601 format, and the value must be 15 minutes (PT15M)."""
    enable: Optional[bool] = rest_field()
    """Specifies whether the OS Image Scheduled event is enabled or disabled."""

    @overload
    def __init__(
        self,
        *,
        not_before_timeout: Optional[str] = None,
        enable: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OSProfile(_model_base.Model):
    """Specifies the operating system settings for the virtual machine. Some of the settings cannot be
    changed once VM is provisioned.

    :ivar computer_name: Specifies the host OS name of the virtual machine. This name cannot be
     updated after the VM is created. **Max-length (Windows):** 15 characters. **Max-length
     (Linux):** 64 characters. For naming conventions and restrictions see `Azure infrastructure
     services implementation guidelines
     <https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules>`_.
    :vartype computer_name: str
    :ivar admin_username: Specifies the name of the administrator account. :code:`<br>`:code:`<br>`
     This property cannot be updated after the VM is created. :code:`<br>`:code:`<br>`
     **Windows-only restriction:** Cannot end in "." :code:`<br>`:code:`<br>` **Disallowed values:**
     "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1",
     "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest",
     "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2",
     "test3", "user4", "user5". :code:`<br>`:code:`<br>` **Minimum-length (Linux):** 1  character
     :code:`<br>`:code:`<br>` **Max-length (Linux):** 64 characters :code:`<br>`:code:`<br>`
     **Max-length (Windows):** 20 characters.
    :vartype admin_username: str
    :ivar admin_password: Specifies the password of the administrator account.
     :code:`<br>`:code:`<br>` **Minimum-length (Windows):** 8 characters :code:`<br>`:code:`<br>`
     **Minimum-length (Linux):** 6 characters :code:`<br>`:code:`<br>` **Max-length (Windows):** 123
     characters :code:`<br>`:code:`<br>` **Max-length (Linux):** 72 characters
     :code:`<br>`:code:`<br>` **Complexity requirements:** 3 out of 4 conditions below need to be
     fulfilled :code:`<br>` Has lower characters :code:`<br>`Has upper characters :code:`<br>` Has a
     digit :code:`<br>` Has a special character (Regex match [\\W_]) :code:`<br>`:code:`<br>`
     **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word",
     "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" :code:`<br>`:code:`<br>` For
     resetting the password, see `How to reset the Remote Desktop service or its login password in a
     Windows VM <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp>`_
     :code:`<br>`:code:`<br>` For resetting root password, see `Manage users, SSH, and check or
     repair disks on Azure Linux VMs using the VMAccess Extension
     <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection>`_.
    :vartype admin_password: str
    :ivar custom_data: Specifies a base-64 encoded string of custom data. The base-64 encoded
     string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum
     length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in
     customData property.** This property cannot be updated after the VM is created. The property
     'customData' is passed to the VM to be saved as a file, for more information see `Custom Data
     on Azure VMs <https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/>`_.
     For using cloud-init for your Linux VM, see `Using cloud-init to customize a Linux VM during
     creation <https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init>`_.
    :vartype custom_data: str
    :ivar windows_configuration: Specifies Windows operating system settings on the virtual
     machine.
    :vartype windows_configuration: ~azure.mgmt.compute.models.WindowsConfiguration
    :ivar linux_configuration: Specifies the Linux operating system settings on the virtual
     machine. For a list of supported Linux distributions, see `Linux on Azure-Endorsed
     Distributions <https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros>`_.
    :vartype linux_configuration: ~azure.mgmt.compute.models.LinuxConfiguration
    :ivar secrets: Specifies set of certificates that should be installed onto the virtual machine.
     To install certificates on a virtual machine it is recommended to use the `Azure Key Vault
     virtual machine extension for Linux
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux>`_ or the `Azure
     Key Vault virtual machine extension for Windows
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows>`_.
    :vartype secrets: list[~azure.mgmt.compute.models.VaultSecretGroup]
    :ivar allow_extension_operations: Specifies whether extension operations should be allowed on
     the virtual machine. This may only be set to False when no extensions are present on the
     virtual machine.
    :vartype allow_extension_operations: bool
    :ivar require_guest_provision_signal: Optional property which must either be set to True or
     omitted.
    :vartype require_guest_provision_signal: bool
    """

    computer_name: Optional[str] = rest_field(name="computerName")
    """Specifies the host OS name of the virtual machine. This name cannot be updated after the VM is
     created. **Max-length (Windows):** 15 characters. **Max-length (Linux):** 64 characters. For
     naming conventions and restrictions see `Azure infrastructure services implementation
     guidelines
     <https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules>`_."""
    admin_username: Optional[str] = rest_field(name="adminUsername")
    """Specifies the name of the administrator account. :code:`<br>`:code:`<br>` This property cannot
     be updated after the VM is created. :code:`<br>`:code:`<br>` **Windows-only restriction:**
     Cannot end in \".\" :code:`<br>`:code:`<br>` **Disallowed values:** \"administrator\",
     \"admin\", \"user\", \"user1\", \"test\", \"user2\", \"test1\", \"user3\", \"admin1\", \"1\",
     \"123\", \"a\", \"actuser\", \"adm\", \"admin2\", \"aspnet\", \"backup\", \"console\",
     \"david\", \"guest\", \"john\", \"owner\", \"root\", \"server\", \"sql\", \"support\",
     \"support_388945a0\", \"sys\", \"test2\", \"test3\", \"user4\", \"user5\".
     :code:`<br>`:code:`<br>` **Minimum-length (Linux):** 1  character :code:`<br>`:code:`<br>`
     **Max-length (Linux):** 64 characters :code:`<br>`:code:`<br>` **Max-length (Windows):** 20
     characters."""
    admin_password: Optional[str] = rest_field(name="adminPassword")
    """Specifies the password of the administrator account. :code:`<br>`:code:`<br>` **Minimum-length
     (Windows):** 8 characters :code:`<br>`:code:`<br>` **Minimum-length (Linux):** 6 characters
     :code:`<br>`:code:`<br>` **Max-length (Windows):** 123 characters :code:`<br>`:code:`<br>`
     **Max-length (Linux):** 72 characters :code:`<br>`:code:`<br>` **Complexity requirements:** 3
     out of 4 conditions below need to be fulfilled :code:`<br>` Has lower characters
     :code:`<br>`Has upper characters :code:`<br>` Has a digit :code:`<br>` Has a special character
     (Regex match [\W_]) :code:`<br>`:code:`<br>` **Disallowed values:** \"abc@123\", \"P@$$w0rd\",
     \"P@ssw0rd\", \"P@ssword123\", \"Pa$$word\", \"pass@word1\", \"Password!\", \"Password1\",
     \"Password22\", \"iloveyou!\" :code:`<br>`:code:`<br>` For resetting the password, see `How to
     reset the Remote Desktop service or its login password in a Windows VM
     <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp>`_
     :code:`<br>`:code:`<br>` For resetting root password, see `Manage users, SSH, and check or
     repair disks on Azure Linux VMs using the VMAccess Extension
     <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection>`_."""
    custom_data: Optional[str] = rest_field(name="customData")
    """Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a
     binary array that is saved as a file on the Virtual Machine. The maximum length of the binary
     array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.**
     This property cannot be updated after the VM is created. The property 'customData' is passed to
     the VM to be saved as a file, for more information see `Custom Data on Azure VMs
     <https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/>`_. For using
     cloud-init for your Linux VM, see `Using cloud-init to customize a Linux VM during creation
     <https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init>`_."""
    windows_configuration: Optional["_models.WindowsConfiguration"] = rest_field(name="windowsConfiguration")
    """Specifies Windows operating system settings on the virtual machine."""
    linux_configuration: Optional["_models.LinuxConfiguration"] = rest_field(name="linuxConfiguration")
    """Specifies the Linux operating system settings on the virtual machine. For a list of supported
     Linux distributions, see `Linux on Azure-Endorsed Distributions
     <https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros>`_."""
    secrets: Optional[List["_models.VaultSecretGroup"]] = rest_field()
    """Specifies set of certificates that should be installed onto the virtual machine. To install
     certificates on a virtual machine it is recommended to use the `Azure Key Vault virtual machine
     extension for Linux
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux>`_ or the `Azure
     Key Vault virtual machine extension for Windows
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows>`_."""
    allow_extension_operations: Optional[bool] = rest_field(name="allowExtensionOperations")
    """Specifies whether extension operations should be allowed on the virtual machine. This may only
     be set to False when no extensions are present on the virtual machine."""
    require_guest_provision_signal: Optional[bool] = rest_field(name="requireGuestProvisionSignal")
    """Optional property which must either be set to True or omitted."""

    @overload
    def __init__(
        self,
        *,
        computer_name: Optional[str] = None,
        admin_username: Optional[str] = None,
        admin_password: Optional[str] = None,
        custom_data: Optional[str] = None,
        windows_configuration: Optional["_models.WindowsConfiguration"] = None,
        linux_configuration: Optional["_models.LinuxConfiguration"] = None,
        secrets: Optional[List["_models.VaultSecretGroup"]] = None,
        allow_extension_operations: Optional[bool] = None,
        require_guest_provision_signal: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OSProfileProvisioningData(_model_base.Model):
    """Additional parameters for Reimaging Non-Ephemeral Virtual Machine.

    :ivar admin_password: Specifies the password of the administrator account.
     :code:`<br>`:code:`<br>` **Minimum-length (Windows):** 8 characters :code:`<br>`:code:`<br>`
     **Minimum-length (Linux):** 6 characters :code:`<br>`:code:`<br>` **Max-length (Windows):** 123
     characters :code:`<br>`:code:`<br>` **Max-length (Linux):** 72 characters
     :code:`<br>`:code:`<br>` **Complexity requirements:** 3 out of 4 conditions below need to be
     fulfilled :code:`<br>` Has lower characters :code:`<br>`Has upper characters :code:`<br>` Has a
     digit :code:`<br>` Has a special character (Regex match [\\W_]) :code:`<br>`:code:`<br>`
     **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word",
     "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" :code:`<br>`:code:`<br>` For
     resetting the password, see `How to reset the Remote Desktop service or its login password in a
     Windows VM <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp>`_
     :code:`<br>`:code:`<br>` For resetting root password, see `Manage users, SSH, and check or
     repair disks on Azure Linux VMs using the VMAccess Extension
     <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection>`_.
    :vartype admin_password: str
    :ivar custom_data: Specifies a base-64 encoded string of custom data. The base-64 encoded
     string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum
     length of the binary array is 65535 bytes. **Note: Do not pass any secrets or passwords in
     customData property.** This property cannot be updated after the VM is created. The property
     customData is passed to the VM to be saved as a file, for more information see `Custom Data on
     Azure VMs <https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/>`_. If
     using cloud-init for your Linux VM, see `Using cloud-init to customize a Linux VM during
     creation <https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init>`_.
    :vartype custom_data: str
    """

    admin_password: Optional[str] = rest_field(name="adminPassword")
    """Specifies the password of the administrator account. :code:`<br>`:code:`<br>` **Minimum-length
     (Windows):** 8 characters :code:`<br>`:code:`<br>` **Minimum-length (Linux):** 6 characters
     :code:`<br>`:code:`<br>` **Max-length (Windows):** 123 characters :code:`<br>`:code:`<br>`
     **Max-length (Linux):** 72 characters :code:`<br>`:code:`<br>` **Complexity requirements:** 3
     out of 4 conditions below need to be fulfilled :code:`<br>` Has lower characters
     :code:`<br>`Has upper characters :code:`<br>` Has a digit :code:`<br>` Has a special character
     (Regex match [\W_]) :code:`<br>`:code:`<br>` **Disallowed values:** \"abc@123\", \"P@$$w0rd\",
     \"P@ssw0rd\", \"P@ssword123\", \"Pa$$word\", \"pass@word1\", \"Password!\", \"Password1\",
     \"Password22\", \"iloveyou!\" :code:`<br>`:code:`<br>` For resetting the password, see `How to
     reset the Remote Desktop service or its login password in a Windows VM
     <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp>`_
     :code:`<br>`:code:`<br>` For resetting root password, see `Manage users, SSH, and check or
     repair disks on Azure Linux VMs using the VMAccess Extension
     <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection>`_."""
    custom_data: Optional[str] = rest_field(name="customData")
    """Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a
     binary array that is saved as a file on the Virtual Machine. The maximum length of the binary
     array is 65535 bytes. **Note: Do not pass any secrets or passwords in customData property.**
     This property cannot be updated after the VM is created. The property customData is passed to
     the VM to be saved as a file, for more information see `Custom Data on Azure VMs
     <https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/>`_. If using
     cloud-init for your Linux VM, see `Using cloud-init to customize a Linux VM during creation
     <https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init>`_."""

    @overload
    def __init__(
        self,
        *,
        admin_password: Optional[str] = None,
        custom_data: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PatchInstallationDetail(_model_base.Model):
    """Information about a specific patch that was encountered during an installation action.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar patch_id: A unique identifier for the patch.
    :vartype patch_id: str
    :ivar name: The friendly name of the patch.
    :vartype name: str
    :ivar version: The version string of the package. It may conform to Semantic Versioning. Only
     applies to Linux.
    :vartype version: str
    :ivar kb_id: The KBID of the patch. Only applies to Windows patches.
    :vartype kb_id: str
    :ivar classifications: The classification(s) of the patch as provided by the patch publisher.
    :vartype classifications: list[str]
    :ivar installation_state: The state of the patch after the installation operation completed.
     Known values are: "Unknown", "Installed", "Failed", "Excluded", "NotSelected", and "Pending".
    :vartype installation_state: str or ~azure.mgmt.compute.models.PatchInstallationState
    """

    patch_id: Optional[str] = rest_field(name="patchId", visibility=["read"])
    """A unique identifier for the patch."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The friendly name of the patch."""
    version: Optional[str] = rest_field(visibility=["read"])
    """The version string of the package. It may conform to Semantic Versioning. Only applies to
     Linux."""
    kb_id: Optional[str] = rest_field(name="kbId", visibility=["read"])
    """The KBID of the patch. Only applies to Windows patches."""
    classifications: Optional[List[str]] = rest_field(visibility=["read"])
    """The classification(s) of the patch as provided by the patch publisher."""
    installation_state: Optional[Union[str, "_models.PatchInstallationState"]] = rest_field(
        name="installationState", visibility=["read"]
    )
    """The state of the patch after the installation operation completed. Known values are:
     \"Unknown\", \"Installed\", \"Failed\", \"Excluded\", \"NotSelected\", and \"Pending\"."""


class PatchSettings(_model_base.Model):
    """Specifies settings related to VM Guest Patching on Windows.

    :ivar patch_mode: Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual
     machines associated to virtual machine scale set with OrchestrationMode as Flexible.:code:`<br
     />`:code:`<br />` Possible values are::code:`<br />`:code:`<br />` **Manual** - You  control
     the application of patches to a virtual machine. You do this by applying patches manually
     inside the VM. In this mode, automatic updates are disabled; the property
     WindowsConfiguration.enableAutomaticUpdates must be false:code:`<br />`:code:`<br />`
     **AutomaticByOS** - The virtual machine will automatically be updated by the OS. The property
     WindowsConfiguration.enableAutomaticUpdates must be true. :code:`<br />`:code:`<br />`
     **AutomaticByPlatform** - the virtual machine will automatically updated by the platform. The
     properties provisionVMAgent and WindowsConfiguration.enableAutomaticUpdates must be true. Known
     values are: "Manual", "AutomaticByOS", and "AutomaticByPlatform".
    :vartype patch_mode: str or ~azure.mgmt.compute.models.WindowsVMGuestPatchMode
    :ivar enable_hotpatching: Enables customers to patch their Azure VMs without requiring a
     reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must
     be set to 'AutomaticByPlatform'.
    :vartype enable_hotpatching: bool
    :ivar assessment_mode: Specifies the mode of VM Guest patch assessment for the IaaS virtual
     machine.:code:`<br />`:code:`<br />` Possible values are::code:`<br />`:code:`<br />`
     **ImageDefault** - You control the timing of patch assessments on a virtual machine.:code:`<br
     />`:code:`<br />` **AutomaticByPlatform** - The platform will trigger periodic patch
     assessments. The property provisionVMAgent must be true. Known values are: "ImageDefault" and
     "AutomaticByPlatform".
    :vartype assessment_mode: str or ~azure.mgmt.compute.models.WindowsPatchAssessmentMode
    :ivar automatic_by_platform_settings: Specifies additional settings for patch mode
     AutomaticByPlatform in VM Guest Patching on Windows.
    :vartype automatic_by_platform_settings:
     ~azure.mgmt.compute.models.WindowsVMGuestPatchAutomaticByPlatformSettings
    """

    patch_mode: Optional[Union[str, "_models.WindowsVMGuestPatchMode"]] = rest_field(name="patchMode")
    """Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated
     to virtual machine scale set with OrchestrationMode as Flexible.:code:`<br />`:code:`<br />`
     Possible values are::code:`<br />`:code:`<br />` **Manual** - You  control the application of
     patches to a virtual machine. You do this by applying patches manually inside the VM. In this
     mode, automatic updates are disabled; the property WindowsConfiguration.enableAutomaticUpdates
     must be false:code:`<br />`:code:`<br />` **AutomaticByOS** - The virtual machine will
     automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates
     must be true. :code:`<br />`:code:`<br />` **AutomaticByPlatform** - the virtual machine will
     automatically updated by the platform. The properties provisionVMAgent and
     WindowsConfiguration.enableAutomaticUpdates must be true. Known values are: \"Manual\",
     \"AutomaticByOS\", and \"AutomaticByPlatform\"."""
    enable_hotpatching: Optional[bool] = rest_field(name="enableHotpatching")
    """Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching,
     the 'provisionVMAgent' must be set to true and 'patchMode' must be set to
     'AutomaticByPlatform'."""
    assessment_mode: Optional[Union[str, "_models.WindowsPatchAssessmentMode"]] = rest_field(name="assessmentMode")
    """Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.:code:`<br
     />`:code:`<br />` Possible values are::code:`<br />`:code:`<br />` **ImageDefault** - You
     control the timing of patch assessments on a virtual machine.:code:`<br />`:code:`<br />`
     **AutomaticByPlatform** - The platform will trigger periodic patch assessments. The property
     provisionVMAgent must be true. Known values are: \"ImageDefault\" and \"AutomaticByPlatform\"."""
    automatic_by_platform_settings: Optional["_models.WindowsVMGuestPatchAutomaticByPlatformSettings"] = rest_field(
        name="automaticByPlatformSettings"
    )
    """Specifies additional settings for patch mode AutomaticByPlatform in VM Guest Patching on
     Windows."""

    @overload
    def __init__(
        self,
        *,
        patch_mode: Optional[Union[str, "_models.WindowsVMGuestPatchMode"]] = None,
        enable_hotpatching: Optional[bool] = None,
        assessment_mode: Optional[Union[str, "_models.WindowsPatchAssessmentMode"]] = None,
        automatic_by_platform_settings: Optional["_models.WindowsVMGuestPatchAutomaticByPlatformSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Plan(_model_base.Model):
    """Specifies information about the marketplace image used to create the virtual machine. This
    element is only used for marketplace images. Before you can use a marketplace image from an
    API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace
    image that you want to use and then click **Want to deploy programmatically, Get Started ->**.
    Enter any required information and then click **Save**.

    :ivar name: The plan ID.
    :vartype name: str
    :ivar publisher: The publisher ID.
    :vartype publisher: str
    :ivar product: Specifies the product of the image from the marketplace. This is the same value
     as Offer under the imageReference element.
    :vartype product: str
    :ivar promotion_code: The promotion code.
    :vartype promotion_code: str
    """

    name: Optional[str] = rest_field()
    """The plan ID."""
    publisher: Optional[str] = rest_field()
    """The publisher ID."""
    product: Optional[str] = rest_field()
    """Specifies the product of the image from the marketplace. This is the same value as Offer under
     the imageReference element."""
    promotion_code: Optional[str] = rest_field(name="promotionCode")
    """The promotion code."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        publisher: Optional[str] = None,
        product: Optional[str] = None,
        promotion_code: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PriorityMixPolicy(_model_base.Model):
    """Specifies the target splits for Spot and Regular priority VMs within a scale set with flexible
    orchestration mode. With this property the customer is able to specify the base number of
    regular priority VMs created as the VMSS flex instance scales out and the split between Spot
    and Regular priority VMs after this base target has been reached.

    :ivar base_regular_priority_count: The base number of regular priority VMs that will be created
     in this scale set as it scales out.
    :vartype base_regular_priority_count: int
    :ivar regular_priority_percentage_above_base: The percentage of VM instances, after the base
     regular priority count has been reached, that are expected to use regular priority.
    :vartype regular_priority_percentage_above_base: int
    """

    base_regular_priority_count: Optional[int] = rest_field(name="baseRegularPriorityCount")
    """The base number of regular priority VMs that will be created in this scale set as it scales
     out."""
    regular_priority_percentage_above_base: Optional[int] = rest_field(name="regularPriorityPercentageAboveBase")
    """The percentage of VM instances, after the base regular priority count has been reached, that
     are expected to use regular priority."""

    @overload
    def __init__(
        self,
        *,
        base_regular_priority_count: Optional[int] = None,
        regular_priority_percentage_above_base: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProximityPlacementGroup(TrackedResource):
    """Specifies information about the proximity placement group.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a Proximity Placement Group.
    :vartype properties: ~azure.mgmt.compute.models.ProximityPlacementGroupProperties
    :ivar zones: Specifies the Availability Zone where virtual machine, virtual machine scale set
     or availability set associated with the  proximity placement group can be created.
    :vartype zones: list[str]
    """

    properties: Optional["_models.ProximityPlacementGroupProperties"] = rest_field()
    """Describes the properties of a Proximity Placement Group."""
    zones: Optional[List[str]] = rest_field()
    """Specifies the Availability Zone where virtual machine, virtual machine scale set or
     availability set associated with the  proximity placement group can be created."""

    __flattened_items = [
        "proximity_placement_group_type",
        "virtual_machines",
        "virtual_machine_scale_sets",
        "availability_sets",
        "colocation_status",
        "intent",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.ProximityPlacementGroupProperties"] = None,
        zones: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ProximityPlacementGroupProperties(_model_base.Model):
    """Describes the properties of a Proximity Placement Group.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar proximity_placement_group_type: Specifies the type of the proximity placement group.
     Possible values are: **Standard** : Co-locate resources within an Azure region or Availability
     Zone. **Ultra** : For future use. Known values are: "Standard" and "Ultra".
    :vartype proximity_placement_group_type: str or
     ~azure.mgmt.compute.models.ProximityPlacementGroupType
    :ivar virtual_machines: A list of references to all virtual machines in the proximity placement
     group.
    :vartype virtual_machines: list[~azure.mgmt.compute.models.SubResourceWithColocationStatus]
    :ivar virtual_machine_scale_sets: A list of references to all virtual machine scale sets in the
     proximity placement group.
    :vartype virtual_machine_scale_sets:
     list[~azure.mgmt.compute.models.SubResourceWithColocationStatus]
    :ivar availability_sets: A list of references to all availability sets in the proximity
     placement group.
    :vartype availability_sets: list[~azure.mgmt.compute.models.SubResourceWithColocationStatus]
    :ivar colocation_status: Describes colocation status of the Proximity Placement Group.
    :vartype colocation_status: ~azure.mgmt.compute.models.InstanceViewStatus
    :ivar intent: Specifies the user intent of the proximity placement group.
    :vartype intent: ~azure.mgmt.compute.models.ProximityPlacementGroupPropertiesIntent
    """

    proximity_placement_group_type: Optional[Union[str, "_models.ProximityPlacementGroupType"]] = rest_field(
        name="proximityPlacementGroupType"
    )
    """Specifies the type of the proximity placement group. Possible values are: **Standard** :
     Co-locate resources within an Azure region or Availability Zone. **Ultra** : For future use.
     Known values are: \"Standard\" and \"Ultra\"."""
    virtual_machines: Optional[List["_models.SubResourceWithColocationStatus"]] = rest_field(
        name="virtualMachines", visibility=["read"]
    )
    """A list of references to all virtual machines in the proximity placement group."""
    virtual_machine_scale_sets: Optional[List["_models.SubResourceWithColocationStatus"]] = rest_field(
        name="virtualMachineScaleSets", visibility=["read"]
    )
    """A list of references to all virtual machine scale sets in the proximity placement group."""
    availability_sets: Optional[List["_models.SubResourceWithColocationStatus"]] = rest_field(
        name="availabilitySets", visibility=["read"]
    )
    """A list of references to all availability sets in the proximity placement group."""
    colocation_status: Optional["_models.InstanceViewStatus"] = rest_field(name="colocationStatus")
    """Describes colocation status of the Proximity Placement Group."""
    intent: Optional["_models.ProximityPlacementGroupPropertiesIntent"] = rest_field()
    """Specifies the user intent of the proximity placement group."""

    @overload
    def __init__(
        self,
        *,
        proximity_placement_group_type: Optional[Union[str, "_models.ProximityPlacementGroupType"]] = None,
        colocation_status: Optional["_models.InstanceViewStatus"] = None,
        intent: Optional["_models.ProximityPlacementGroupPropertiesIntent"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProximityPlacementGroupPropertiesIntent(_model_base.Model):
    """Specifies the user intent of the proximity placement group.

    :ivar vm_sizes: Specifies possible sizes of virtual machines that can be created in the
     proximity placement group.
    :vartype vm_sizes: list[str]
    """

    vm_sizes: Optional[List[str]] = rest_field(name="vmSizes")
    """Specifies possible sizes of virtual machines that can be created in the proximity placement
     group."""

    @overload
    def __init__(
        self,
        *,
        vm_sizes: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProximityPlacementGroupUpdate(UpdateResource):
    """Specifies information about the proximity placement group.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProxyAgentSettings(_model_base.Model):
    """Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version:
    2023-09-01.

    :ivar enabled: Specifies whether ProxyAgent feature should be enabled on the virtual machine or
     virtual machine scale set.
    :vartype enabled: bool
    :ivar mode: Specifies the mode that ProxyAgent will execute on if the feature is enabled.
     ProxyAgent will start to audit or monitor but not enforce access control over requests to host
     endpoints in Audit mode, while in Enforce mode it will enforce access control. The default
     value is Enforce mode. Known values are: "Audit" and "Enforce".
    :vartype mode: str or ~azure.mgmt.compute.models.Mode
    :ivar key_incarnation_id: Increase the value of this property allows user to reset the key used
     for securing communication channel between guest and host.
    :vartype key_incarnation_id: int
    """

    enabled: Optional[bool] = rest_field()
    """Specifies whether ProxyAgent feature should be enabled on the virtual machine or virtual
     machine scale set."""
    mode: Optional[Union[str, "_models.Mode"]] = rest_field()
    """Specifies the mode that ProxyAgent will execute on if the feature is enabled. ProxyAgent will
     start to audit or monitor but not enforce access control over requests to host endpoints in
     Audit mode, while in Enforce mode it will enforce access control. The default value is Enforce
     mode. Known values are: \"Audit\" and \"Enforce\"."""
    key_incarnation_id: Optional[int] = rest_field(name="keyIncarnationId")
    """Increase the value of this property allows user to reset the key used for securing
     communication channel between guest and host."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        mode: Optional[Union[str, "_models.Mode"]] = None,
        key_incarnation_id: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    """


class PublicIPAddressSku(_model_base.Model):
    """Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.

    :ivar name: Specify public IP sku name. Known values are: "Basic" and "Standard".
    :vartype name: str or ~azure.mgmt.compute.models.PublicIPAddressSkuName
    :ivar tier: Specify public IP sku tier. Known values are: "Regional" and "Global".
    :vartype tier: str or ~azure.mgmt.compute.models.PublicIPAddressSkuTier
    """

    name: Optional[Union[str, "_models.PublicIPAddressSkuName"]] = rest_field()
    """Specify public IP sku name. Known values are: \"Basic\" and \"Standard\"."""
    tier: Optional[Union[str, "_models.PublicIPAddressSkuTier"]] = rest_field()
    """Specify public IP sku tier. Known values are: \"Regional\" and \"Global\"."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[Union[str, "_models.PublicIPAddressSkuName"]] = None,
        tier: Optional[Union[str, "_models.PublicIPAddressSkuTier"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PurchasePlan(_model_base.Model):
    """Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.


    :ivar publisher: The publisher ID. Required.
    :vartype publisher: str
    :ivar name: The plan ID. Required.
    :vartype name: str
    :ivar product: Specifies the product of the image from the marketplace. This is the same value
     as Offer under the imageReference element. Required.
    :vartype product: str
    """

    publisher: str = rest_field()
    """The publisher ID. Required."""
    name: str = rest_field()
    """The plan ID. Required."""
    product: str = rest_field()
    """Specifies the product of the image from the marketplace. This is the same value as Offer under
     the imageReference element. Required."""

    @overload
    def __init__(
        self,
        *,
        publisher: str,
        name: str,
        product: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RecoveryWalkResponse(_model_base.Model):
    """Response after calling a manual recovery walk.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar walk_performed: Whether the recovery walk was performed.
    :vartype walk_performed: bool
    :ivar next_platform_update_domain: The next update domain that needs to be walked. Null means
     walk spanning all update domains has been completed.
    :vartype next_platform_update_domain: int
    """

    walk_performed: Optional[bool] = rest_field(name="walkPerformed", visibility=["read"])
    """Whether the recovery walk was performed."""
    next_platform_update_domain: Optional[int] = rest_field(name="nextPlatformUpdateDomain", visibility=["read"])
    """The next update domain that needs to be walked. Null means walk spanning all update domains has
     been completed."""


class RequestRateByIntervalInput(LogAnalyticsInputBase):
    """Api request input for LogAnalytics getRequestRateByInterval Api.

    All required parameters must be populated in order to send to server.

    :ivar blob_container_sas_uri: SAS Uri of the logging blob container to which LogAnalytics Api
     writes output logs to. Required.
    :vartype blob_container_sas_uri: str
    :ivar from_time: From time of the query. Required.
    :vartype from_time: ~datetime.datetime
    :ivar to_time: To time of the query. Required.
    :vartype to_time: ~datetime.datetime
    :ivar group_by_throttle_policy: Group query result by Throttle Policy applied.
    :vartype group_by_throttle_policy: bool
    :ivar group_by_operation_name: Group query result by Operation Name.
    :vartype group_by_operation_name: bool
    :ivar group_by_resource_name: Group query result by Resource Name.
    :vartype group_by_resource_name: bool
    :ivar group_by_client_application_id: Group query result by Client Application ID.
    :vartype group_by_client_application_id: bool
    :ivar group_by_user_agent: Group query result by User Agent.
    :vartype group_by_user_agent: bool
    :ivar interval_length: Interval value in minutes used to create LogAnalytics call rate logs.
     Required. Known values are: "ThreeMins", "FiveMins", "ThirtyMins", and "SixtyMins".
    :vartype interval_length: str or ~azure.mgmt.compute.models.IntervalInMins
    """

    interval_length: Union[str, "_models.IntervalInMins"] = rest_field(name="intervalLength")
    """Interval value in minutes used to create LogAnalytics call rate logs. Required. Known values
     are: \"ThreeMins\", \"FiveMins\", \"ThirtyMins\", and \"SixtyMins\"."""

    @overload
    def __init__(
        self,
        *,
        blob_container_sas_uri: str,
        from_time: datetime.datetime,
        to_time: datetime.datetime,
        interval_length: Union[str, "_models.IntervalInMins"],
        group_by_throttle_policy: Optional[bool] = None,
        group_by_operation_name: Optional[bool] = None,
        group_by_resource_name: Optional[bool] = None,
        group_by_client_application_id: Optional[bool] = None,
        group_by_user_agent: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResiliencyPolicy(_model_base.Model):
    """Describes an resiliency policy - resilientVMCreationPolicy and/or resilientVMDeletionPolicy.

    :ivar resilient_vm_creation_policy: The configuration parameters used while performing
     resilient VM creation.
    :vartype resilient_vm_creation_policy: ~azure.mgmt.compute.models.ResilientVMCreationPolicy
    :ivar resilient_vm_deletion_policy: The configuration parameters used while performing
     resilient VM deletion.
    :vartype resilient_vm_deletion_policy: ~azure.mgmt.compute.models.ResilientVMDeletionPolicy
    """

    resilient_vm_creation_policy: Optional["_models.ResilientVMCreationPolicy"] = rest_field(
        name="resilientVMCreationPolicy"
    )
    """The configuration parameters used while performing resilient VM creation."""
    resilient_vm_deletion_policy: Optional["_models.ResilientVMDeletionPolicy"] = rest_field(
        name="resilientVMDeletionPolicy"
    )
    """The configuration parameters used while performing resilient VM deletion."""

    @overload
    def __init__(
        self,
        *,
        resilient_vm_creation_policy: Optional["_models.ResilientVMCreationPolicy"] = None,
        resilient_vm_deletion_policy: Optional["_models.ResilientVMDeletionPolicy"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResilientVMCreationPolicy(_model_base.Model):
    """The configuration parameters used while performing resilient VM creation.

    :ivar enabled: Specifies whether resilient VM creation should be enabled on the virtual machine
     scale set. The default value is false.
    :vartype enabled: bool
    """

    enabled: Optional[bool] = rest_field()
    """Specifies whether resilient VM creation should be enabled on the virtual machine scale set. The
     default value is false."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResilientVMDeletionPolicy(_model_base.Model):
    """The configuration parameters used while performing resilient VM deletion.

    :ivar enabled: Specifies whether resilient VM deletion should be enabled on the virtual machine
     scale set. The default value is false.
    :vartype enabled: bool
    """

    enabled: Optional[bool] = rest_field()
    """Specifies whether resilient VM deletion should be enabled on the virtual machine scale set. The
     default value is false."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceSharingProfile(_model_base.Model):
    """ResourceSharingProfile.

    :ivar subscription_ids: Specifies an array of subscription resource IDs that capacity
     reservation group is shared with. **Note:** Minimum api-version: 2023-09-01. Please refer to
     https://aka.ms/computereservationsharing for more details.
    :vartype subscription_ids: list[~azure.mgmt.compute.models.SubResource]
    """

    subscription_ids: Optional[List["_models.SubResource"]] = rest_field(name="subscriptionIds")
    """Specifies an array of subscription resource IDs that capacity reservation group is shared with.
     **Note:** Minimum api-version: 2023-09-01. Please refer to
     https://aka.ms/computereservationsharing for more details."""

    @overload
    def __init__(
        self,
        *,
        subscription_ids: Optional[List["_models.SubResource"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestorePoint(ProxyResource):
    """Restore Point details.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar properties: The restore point properties.
    :vartype properties: ~azure.mgmt.compute.models.RestorePointProperties
    """

    properties: Optional["_models.RestorePointProperties"] = rest_field()
    """The restore point properties."""

    __flattened_items = [
        "exclude_disks",
        "source_metadata",
        "provisioning_state",
        "consistency_mode",
        "time_created",
        "source_restore_point",
        "instance_view",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.RestorePointProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class RestorePointCollection(TrackedResource):
    """Create or update Restore Point collection parameters.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The restore point collection properties.
    :vartype properties: ~azure.mgmt.compute.models.RestorePointCollectionProperties
    """

    properties: Optional["_models.RestorePointCollectionProperties"] = rest_field()
    """The restore point collection properties."""

    __flattened_items = ["source", "provisioning_state", "restore_point_collection_id", "restore_points"]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.RestorePointCollectionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class RestorePointCollectionProperties(_model_base.Model):
    """The restore point collection properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar source: The properties of the source resource that this restore point collection is
     created from.
    :vartype source: ~azure.mgmt.compute.models.RestorePointCollectionSourceProperties
    :ivar provisioning_state: The provisioning state of the restore point collection.
    :vartype provisioning_state: str
    :ivar restore_point_collection_id: The unique id of the restore point collection.
    :vartype restore_point_collection_id: str
    :ivar restore_points: A list containing all restore points created under this restore point
     collection.
    :vartype restore_points: list[~azure.mgmt.compute.models.RestorePoint]
    """

    source: Optional["_models.RestorePointCollectionSourceProperties"] = rest_field()
    """The properties of the source resource that this restore point collection is created from."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state of the restore point collection."""
    restore_point_collection_id: Optional[str] = rest_field(name="restorePointCollectionId", visibility=["read"])
    """The unique id of the restore point collection."""
    restore_points: Optional[List["_models.RestorePoint"]] = rest_field(name="restorePoints", visibility=["read"])
    """A list containing all restore points created under this restore point collection."""

    @overload
    def __init__(
        self,
        *,
        source: Optional["_models.RestorePointCollectionSourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestorePointCollectionSourceProperties(_model_base.Model):
    """The properties of the source resource that this restore point collection is created from.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar location: Location of the source resource used to create this restore point collection.
    :vartype location: str
    :ivar id: Resource Id of the source resource used to create this restore point collection.
    :vartype id: str
    """

    location: Optional[str] = rest_field(visibility=["read"])
    """Location of the source resource used to create this restore point collection."""
    id: Optional[str] = rest_field()
    """Resource Id of the source resource used to create this restore point collection."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestorePointCollectionUpdate(UpdateResource):
    """Update Restore Point collection parameters.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The restore point collection properties.
    :vartype properties: ~azure.mgmt.compute.models.RestorePointCollectionProperties
    """

    properties: Optional["_models.RestorePointCollectionProperties"] = rest_field()
    """The restore point collection properties."""

    __flattened_items = ["source", "provisioning_state", "restore_point_collection_id", "restore_points"]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.RestorePointCollectionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class RestorePointEncryption(_model_base.Model):
    """Encryption at rest settings for disk restore point. It is an optional property that can be
    specified in the input while creating a restore point.

    :ivar disk_encryption_set: Describes the parameter of customer managed disk encryption set
     resource id that can be specified for disk. **Note:** The disk encryption set resource id can
     only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more
     details.
    :vartype disk_encryption_set: ~azure.mgmt.compute.models.DiskEncryptionSetParameters
    :ivar type: The type of key used to encrypt the data of the disk restore point. Known values
     are: "EncryptionAtRestWithPlatformKey", "EncryptionAtRestWithCustomerKey", and
     "EncryptionAtRestWithPlatformAndCustomerKeys".
    :vartype type: str or ~azure.mgmt.compute.models.RestorePointEncryptionType
    """

    disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = rest_field(name="diskEncryptionSet")
    """Describes the parameter of customer managed disk encryption set resource id that can be
     specified for disk. **Note:** The disk encryption set resource id can only be specified for
     managed disk. Please refer https://aka.ms/mdssewithcmkoverview for more details."""
    type: Optional[Union[str, "_models.RestorePointEncryptionType"]] = rest_field()
    """The type of key used to encrypt the data of the disk restore point. Known values are:
     \"EncryptionAtRestWithPlatformKey\", \"EncryptionAtRestWithCustomerKey\", and
     \"EncryptionAtRestWithPlatformAndCustomerKeys\"."""

    @overload
    def __init__(
        self,
        *,
        disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = None,
        type: Optional[Union[str, "_models.RestorePointEncryptionType"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestorePointInstanceView(_model_base.Model):
    """The instance view of a restore point.

    :ivar disk_restore_points: The disk restore points information.
    :vartype disk_restore_points: list[~azure.mgmt.compute.models.DiskRestorePointInstanceView]
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    """

    disk_restore_points: Optional[List["_models.DiskRestorePointInstanceView"]] = rest_field(name="diskRestorePoints")
    """The disk restore points information."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""

    @overload
    def __init__(
        self,
        *,
        disk_restore_points: Optional[List["_models.DiskRestorePointInstanceView"]] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestorePointProperties(_model_base.Model):
    """The restore point properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar exclude_disks: List of disk resource ids that the customer wishes to exclude from the
     restore point. If no disks are specified, all disks will be included.
    :vartype exclude_disks: list[~azure.mgmt.compute.models.ApiEntityReference]
    :ivar source_metadata: Gets the details of the VM captured at the time of the restore point
     creation.
    :vartype source_metadata: ~azure.mgmt.compute.models.RestorePointSourceMetadata
    :ivar provisioning_state: Gets the provisioning state of the restore point.
    :vartype provisioning_state: str
    :ivar consistency_mode: ConsistencyMode of the RestorePoint. Can be specified in the input
     while creating a restore point. For now, only CrashConsistent is accepted as a valid input.
     Please refer to https://aka.ms/RestorePoints for more details. Known values are:
     "CrashConsistent", "FileSystemConsistent", and "ApplicationConsistent".
    :vartype consistency_mode: str or ~azure.mgmt.compute.models.ConsistencyModeTypes
    :ivar time_created: Gets the creation time of the restore point.
    :vartype time_created: ~datetime.datetime
    :ivar source_restore_point: Resource Id of the source restore point from which a copy needs to
     be created.
    :vartype source_restore_point: ~azure.mgmt.compute.models.ApiEntityReference
    :ivar instance_view: The restore point instance view.
    :vartype instance_view: ~azure.mgmt.compute.models.RestorePointInstanceView
    """

    exclude_disks: Optional[List["_models.ApiEntityReference"]] = rest_field(name="excludeDisks")
    """List of disk resource ids that the customer wishes to exclude from the restore point. If no
     disks are specified, all disks will be included."""
    source_metadata: Optional["_models.RestorePointSourceMetadata"] = rest_field(name="sourceMetadata")
    """Gets the details of the VM captured at the time of the restore point creation."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """Gets the provisioning state of the restore point."""
    consistency_mode: Optional[Union[str, "_models.ConsistencyModeTypes"]] = rest_field(name="consistencyMode")
    """ConsistencyMode of the RestorePoint. Can be specified in the input while creating a restore
     point. For now, only CrashConsistent is accepted as a valid input. Please refer to
     https://aka.ms/RestorePoints for more details. Known values are: \"CrashConsistent\",
     \"FileSystemConsistent\", and \"ApplicationConsistent\"."""
    time_created: Optional[datetime.datetime] = rest_field(name="timeCreated", format="rfc3339")
    """Gets the creation time of the restore point."""
    source_restore_point: Optional["_models.ApiEntityReference"] = rest_field(name="sourceRestorePoint")
    """Resource Id of the source restore point from which a copy needs to be created."""
    instance_view: Optional["_models.RestorePointInstanceView"] = rest_field(name="instanceView", visibility=["read"])
    """The restore point instance view."""

    @overload
    def __init__(
        self,
        *,
        exclude_disks: Optional[List["_models.ApiEntityReference"]] = None,
        source_metadata: Optional["_models.RestorePointSourceMetadata"] = None,
        consistency_mode: Optional[Union[str, "_models.ConsistencyModeTypes"]] = None,
        time_created: Optional[datetime.datetime] = None,
        source_restore_point: Optional["_models.ApiEntityReference"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestorePointSourceMetadata(_model_base.Model):
    """Describes the properties of the Virtual Machine for which the restore point was created. The
    properties provided are a subset and the snapshot of the overall Virtual Machine properties
    captured at the time of the restore point creation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar hardware_profile: Gets the hardware profile.
    :vartype hardware_profile: ~azure.mgmt.compute.models.HardwareProfile
    :ivar storage_profile: Gets the storage profile.
    :vartype storage_profile: ~azure.mgmt.compute.models.RestorePointSourceVMStorageProfile
    :ivar os_profile: Gets the OS profile.
    :vartype os_profile: ~azure.mgmt.compute.models.OSProfile
    :ivar diagnostics_profile: Gets the diagnostics profile.
    :vartype diagnostics_profile: ~azure.mgmt.compute.models.DiagnosticsProfile
    :ivar license_type: Gets the license type, which is for bring your own license scenario.
    :vartype license_type: str
    :ivar vm_id: Gets the virtual machine unique id.
    :vartype vm_id: str
    :ivar security_profile: Gets the security profile.
    :vartype security_profile: ~azure.mgmt.compute.models.SecurityProfile
    :ivar location: Location of the VM from which the restore point was created.
    :vartype location: str
    :ivar user_data: UserData associated with the source VM for which restore point is captured,
     which is a base-64 encoded value.
    :vartype user_data: str
    :ivar hyper_v_generation: HyperVGeneration of the source VM for which restore point is
     captured. Known values are: "V1" and "V2".
    :vartype hyper_v_generation: str or ~azure.mgmt.compute.models.HyperVGenerationTypes
    """

    hardware_profile: Optional["_models.HardwareProfile"] = rest_field(name="hardwareProfile", visibility=["read"])
    """Gets the hardware profile."""
    storage_profile: Optional["_models.RestorePointSourceVMStorageProfile"] = rest_field(name="storageProfile")
    """Gets the storage profile."""
    os_profile: Optional["_models.OSProfile"] = rest_field(name="osProfile", visibility=["read"])
    """Gets the OS profile."""
    diagnostics_profile: Optional["_models.DiagnosticsProfile"] = rest_field(
        name="diagnosticsProfile", visibility=["read"]
    )
    """Gets the diagnostics profile."""
    license_type: Optional[str] = rest_field(name="licenseType", visibility=["read"])
    """Gets the license type, which is for bring your own license scenario."""
    vm_id: Optional[str] = rest_field(name="vmId", visibility=["read"])
    """Gets the virtual machine unique id."""
    security_profile: Optional["_models.SecurityProfile"] = rest_field(name="securityProfile", visibility=["read"])
    """Gets the security profile."""
    location: Optional[str] = rest_field(visibility=["read"])
    """Location of the VM from which the restore point was created."""
    user_data: Optional[str] = rest_field(name="userData", visibility=["read"])
    """UserData associated with the source VM for which restore point is captured, which is a base-64
     encoded value."""
    hyper_v_generation: Optional[Union[str, "_models.HyperVGenerationTypes"]] = rest_field(
        name="hyperVGeneration", visibility=["read"]
    )
    """HyperVGeneration of the source VM for which restore point is captured. Known values are: \"V1\"
     and \"V2\"."""

    @overload
    def __init__(
        self,
        *,
        storage_profile: Optional["_models.RestorePointSourceVMStorageProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestorePointSourceVMDataDisk(_model_base.Model):
    """Describes a data disk.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar lun: Gets the logical unit number.
    :vartype lun: int
    :ivar name: Gets the disk name.
    :vartype name: str
    :ivar caching: Gets the caching type. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar disk_size_gb: Gets the initial disk size in GB for blank data disks, and the new desired
     size for existing OS and Data disks.
    :vartype disk_size_gb: int
    :ivar managed_disk: Contains the managed disk details.
    :vartype managed_disk: ~azure.mgmt.compute.models.ManagedDiskParameters
    :ivar disk_restore_point: Contains Disk Restore Point properties.
    :vartype disk_restore_point: ~azure.mgmt.compute.models.DiskRestorePointAttributes
    :ivar write_accelerator_enabled: Shows true if the disk is write-accelerator enabled.
    :vartype write_accelerator_enabled: bool
    """

    lun: Optional[int] = rest_field(visibility=["read"])
    """Gets the logical unit number."""
    name: Optional[str] = rest_field(visibility=["read"])
    """Gets the disk name."""
    caching: Optional[Union[str, "_models.CachingTypes"]] = rest_field(visibility=["read"])
    """Gets the caching type. Known values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    disk_size_gb: Optional[int] = rest_field(name="diskSizeGB", visibility=["read"])
    """Gets the initial disk size in GB for blank data disks, and the new desired size for existing OS
     and Data disks."""
    managed_disk: Optional["_models.ManagedDiskParameters"] = rest_field(name="managedDisk")
    """Contains the managed disk details."""
    disk_restore_point: Optional["_models.DiskRestorePointAttributes"] = rest_field(name="diskRestorePoint")
    """Contains Disk Restore Point properties."""
    write_accelerator_enabled: Optional[bool] = rest_field(name="writeAcceleratorEnabled", visibility=["read"])
    """Shows true if the disk is write-accelerator enabled."""

    @overload
    def __init__(
        self,
        *,
        managed_disk: Optional["_models.ManagedDiskParameters"] = None,
        disk_restore_point: Optional["_models.DiskRestorePointAttributes"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestorePointSourceVmosDisk(_model_base.Model):
    """Describes an Operating System disk.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar os_type: Gets the Operating System type. Known values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.compute.models.OperatingSystemType
    :ivar encryption_settings: Gets the disk encryption settings.
    :vartype encryption_settings: ~azure.mgmt.compute.models.DiskEncryptionSettings
    :ivar name: Gets the disk name.
    :vartype name: str
    :ivar caching: Gets the caching type. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar disk_size_gb: Gets the disk size in GB.
    :vartype disk_size_gb: int
    :ivar managed_disk: Gets the managed disk details.
    :vartype managed_disk: ~azure.mgmt.compute.models.ManagedDiskParameters
    :ivar disk_restore_point: Contains Disk Restore Point properties.
    :vartype disk_restore_point: ~azure.mgmt.compute.models.DiskRestorePointAttributes
    :ivar write_accelerator_enabled: Shows true if the disk is write-accelerator enabled.
    :vartype write_accelerator_enabled: bool
    """

    os_type: Optional[Union[str, "_models.OperatingSystemType"]] = rest_field(name="osType", visibility=["read"])
    """Gets the Operating System type. Known values are: \"Windows\" and \"Linux\"."""
    encryption_settings: Optional["_models.DiskEncryptionSettings"] = rest_field(
        name="encryptionSettings", visibility=["read"]
    )
    """Gets the disk encryption settings."""
    name: Optional[str] = rest_field(visibility=["read"])
    """Gets the disk name."""
    caching: Optional[Union[str, "_models.CachingTypes"]] = rest_field(visibility=["read"])
    """Gets the caching type. Known values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    disk_size_gb: Optional[int] = rest_field(name="diskSizeGB", visibility=["read"])
    """Gets the disk size in GB."""
    managed_disk: Optional["_models.ManagedDiskParameters"] = rest_field(name="managedDisk")
    """Gets the managed disk details."""
    disk_restore_point: Optional["_models.DiskRestorePointAttributes"] = rest_field(name="diskRestorePoint")
    """Contains Disk Restore Point properties."""
    write_accelerator_enabled: Optional[bool] = rest_field(name="writeAcceleratorEnabled", visibility=["read"])
    """Shows true if the disk is write-accelerator enabled."""

    @overload
    def __init__(
        self,
        *,
        managed_disk: Optional["_models.ManagedDiskParameters"] = None,
        disk_restore_point: Optional["_models.DiskRestorePointAttributes"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RestorePointSourceVMStorageProfile(_model_base.Model):
    """Describes the storage profile.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar os_disk: Gets the OS disk of the VM captured at the time of the restore point creation.
    :vartype os_disk: ~azure.mgmt.compute.models.RestorePointSourceVmosDisk
    :ivar data_disk_list: Gets the data disks of the VM captured at the time of the restore point
     creation.
    :vartype data_disk_list: list[~azure.mgmt.compute.models.RestorePointSourceVMDataDisk]
    :ivar disk_controller_type: Gets the disk controller type of the VM captured at the time of the
     restore point creation. Known values are: "SCSI" and "NVMe".
    :vartype disk_controller_type: str or ~azure.mgmt.compute.models.DiskControllerTypes
    """

    os_disk: Optional["_models.RestorePointSourceVmosDisk"] = rest_field(name="osDisk")
    """Gets the OS disk of the VM captured at the time of the restore point creation."""
    data_disk_list: Optional[List["_models.RestorePointSourceVMDataDisk"]] = rest_field(name="dataDisks")
    """Gets the data disks of the VM captured at the time of the restore point creation."""
    disk_controller_type: Optional[Union[str, "_models.DiskControllerTypes"]] = rest_field(
        name="diskControllerType", visibility=["read"]
    )
    """Gets the disk controller type of the VM captured at the time of the restore point creation.
     Known values are: \"SCSI\" and \"NVMe\"."""

    @overload
    def __init__(
        self,
        *,
        os_disk: Optional["_models.RestorePointSourceVmosDisk"] = None,
        data_disk_list: Optional[List["_models.RestorePointSourceVMDataDisk"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RetrieveBootDiagnosticsDataResult(_model_base.Model):
    """The SAS URIs of the console screenshot and serial log blobs.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar console_screenshot_blob_uri: The console screenshot blob URI.
    :vartype console_screenshot_blob_uri: str
    :ivar serial_console_log_blob_uri: The serial console log blob URI.
    :vartype serial_console_log_blob_uri: str
    """

    console_screenshot_blob_uri: Optional[str] = rest_field(name="consoleScreenshotBlobUri", visibility=["read"])
    """The console screenshot blob URI."""
    serial_console_log_blob_uri: Optional[str] = rest_field(name="serialConsoleLogBlobUri", visibility=["read"])
    """The serial console log blob URI."""


class RollbackStatusInfo(_model_base.Model):
    """Information about rollback on failed VM instances after a OS Upgrade operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar successfully_rolledback_instance_count: The number of instances which have been
     successfully rolled back.
    :vartype successfully_rolledback_instance_count: int
    :ivar failed_rolledback_instance_count: The number of instances which failed to rollback.
    :vartype failed_rolledback_instance_count: int
    :ivar rollback_error: Error details if OS rollback failed.
    :vartype rollback_error: ~azure.mgmt.compute.models.ApiError
    """

    successfully_rolledback_instance_count: Optional[int] = rest_field(
        name="successfullyRolledbackInstanceCount", visibility=["read"]
    )
    """The number of instances which have been successfully rolled back."""
    failed_rolledback_instance_count: Optional[int] = rest_field(
        name="failedRolledbackInstanceCount", visibility=["read"]
    )
    """The number of instances which failed to rollback."""
    rollback_error: Optional["_models.ApiError"] = rest_field(name="rollbackError", visibility=["read"])
    """Error details if OS rollback failed."""


class RollingUpgradePolicy(_model_base.Model):
    """The configuration parameters used while performing a rolling upgrade.

    :ivar max_batch_instance_percent: The maximum percent of total virtual machine instances that
     will be upgraded simultaneously by the rolling upgrade in one batch. As this is a maximum,
     unhealthy instances in previous or future batches can cause the percentage of instances in a
     batch to decrease to ensure higher reliability. The default value for this parameter is 20%.
    :vartype max_batch_instance_percent: int
    :ivar max_unhealthy_instance_percent: The maximum percentage of the total virtual machine
     instances in the scale set that can be simultaneously unhealthy, either as a result of being
     upgraded, or by being found in an unhealthy state by the virtual machine health checks before
     the rolling upgrade aborts. This constraint will be checked prior to starting any batch. The
     default value for this parameter is 20%.
    :vartype max_unhealthy_instance_percent: int
    :ivar max_unhealthy_upgraded_instance_percent: The maximum percentage of upgraded virtual
     machine instances that can be found to be in an unhealthy state. This check will happen after
     each batch is upgraded. If this percentage is ever exceeded, the rolling update aborts. The
     default value for this parameter is 20%.
    :vartype max_unhealthy_upgraded_instance_percent: int
    :ivar pause_time_between_batches: The wait time between completing the update for all virtual
     machines in one batch and starting the next batch. The time duration should be specified in ISO
     8601 format. The default value is 0 seconds (PT0S).
    :vartype pause_time_between_batches: str
    :ivar enable_cross_zone_upgrade: Allow VMSS to ignore AZ boundaries when constructing upgrade
     batches. Take into consideration the Update Domain and maxBatchInstancePercent to determine the
     batch size.
    :vartype enable_cross_zone_upgrade: bool
    :ivar prioritize_unhealthy_instances: Upgrade all unhealthy instances in a scale set before any
     healthy instances.
    :vartype prioritize_unhealthy_instances: bool
    :ivar rollback_failed_instances_on_policy_breach: Rollback failed instances to previous model
     if the Rolling Upgrade policy is violated.
    :vartype rollback_failed_instances_on_policy_breach: bool
    :ivar max_surge: Create new virtual machines to upgrade the scale set, rather than updating the
     existing virtual machines. Existing virtual machines will be deleted once the new virtual
     machines are created for each batch.
    :vartype max_surge: bool
    """

    max_batch_instance_percent: Optional[int] = rest_field(name="maxBatchInstancePercent")
    """The maximum percent of total virtual machine instances that will be upgraded simultaneously by
     the rolling upgrade in one batch. As this is a maximum, unhealthy instances in previous or
     future batches can cause the percentage of instances in a batch to decrease to ensure higher
     reliability. The default value for this parameter is 20%."""
    max_unhealthy_instance_percent: Optional[int] = rest_field(name="maxUnhealthyInstancePercent")
    """The maximum percentage of the total virtual machine instances in the scale set that can be
     simultaneously unhealthy, either as a result of being upgraded, or by being found in an
     unhealthy state by the virtual machine health checks before the rolling upgrade aborts. This
     constraint will be checked prior to starting any batch. The default value for this parameter is
     20%."""
    max_unhealthy_upgraded_instance_percent: Optional[int] = rest_field(name="maxUnhealthyUpgradedInstancePercent")
    """The maximum percentage of upgraded virtual machine instances that can be found to be in an
     unhealthy state. This check will happen after each batch is upgraded. If this percentage is
     ever exceeded, the rolling update aborts. The default value for this parameter is 20%."""
    pause_time_between_batches: Optional[str] = rest_field(name="pauseTimeBetweenBatches")
    """The wait time between completing the update for all virtual machines in one batch and starting
     the next batch. The time duration should be specified in ISO 8601 format. The default value is
     0 seconds (PT0S)."""
    enable_cross_zone_upgrade: Optional[bool] = rest_field(name="enableCrossZoneUpgrade")
    """Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration
     the Update Domain and maxBatchInstancePercent to determine the batch size."""
    prioritize_unhealthy_instances: Optional[bool] = rest_field(name="prioritizeUnhealthyInstances")
    """Upgrade all unhealthy instances in a scale set before any healthy instances."""
    rollback_failed_instances_on_policy_breach: Optional[bool] = rest_field(
        name="rollbackFailedInstancesOnPolicyBreach"
    )
    """Rollback failed instances to previous model if the Rolling Upgrade policy is violated."""
    max_surge: Optional[bool] = rest_field(name="maxSurge")
    """Create new virtual machines to upgrade the scale set, rather than updating the existing virtual
     machines. Existing virtual machines will be deleted once the new virtual machines are created
     for each batch."""

    @overload
    def __init__(
        self,
        *,
        max_batch_instance_percent: Optional[int] = None,
        max_unhealthy_instance_percent: Optional[int] = None,
        max_unhealthy_upgraded_instance_percent: Optional[int] = None,
        pause_time_between_batches: Optional[str] = None,
        enable_cross_zone_upgrade: Optional[bool] = None,
        prioritize_unhealthy_instances: Optional[bool] = None,
        rollback_failed_instances_on_policy_breach: Optional[bool] = None,
        max_surge: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RollingUpgradeProgressInfo(_model_base.Model):
    """Information about the number of virtual machine instances in each upgrade state.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar successful_instance_count: The number of instances that have been successfully upgraded.
    :vartype successful_instance_count: int
    :ivar failed_instance_count: The number of instances that have failed to be upgraded
     successfully.
    :vartype failed_instance_count: int
    :ivar in_progress_instance_count: The number of instances that are currently being upgraded.
    :vartype in_progress_instance_count: int
    :ivar pending_instance_count: The number of instances that have not yet begun to be upgraded.
    :vartype pending_instance_count: int
    """

    successful_instance_count: Optional[int] = rest_field(name="successfulInstanceCount", visibility=["read"])
    """The number of instances that have been successfully upgraded."""
    failed_instance_count: Optional[int] = rest_field(name="failedInstanceCount", visibility=["read"])
    """The number of instances that have failed to be upgraded successfully."""
    in_progress_instance_count: Optional[int] = rest_field(name="inProgressInstanceCount", visibility=["read"])
    """The number of instances that are currently being upgraded."""
    pending_instance_count: Optional[int] = rest_field(name="pendingInstanceCount", visibility=["read"])
    """The number of instances that have not yet begun to be upgraded."""


class RollingUpgradeRunningStatus(_model_base.Model):
    """Information about the current running state of the overall upgrade.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Code indicating the current status of the upgrade. Known values are:
     "RollingForward", "Cancelled", "Completed", and "Faulted".
    :vartype code: str or ~azure.mgmt.compute.models.RollingUpgradeStatusCode
    :ivar start_time: Start time of the upgrade.
    :vartype start_time: ~datetime.datetime
    :ivar last_action: The last action performed on the rolling upgrade. Known values are: "Start"
     and "Cancel".
    :vartype last_action: str or ~azure.mgmt.compute.models.RollingUpgradeActionType
    :ivar last_action_time: Last action time of the upgrade.
    :vartype last_action_time: ~datetime.datetime
    """

    code: Optional[Union[str, "_models.RollingUpgradeStatusCode"]] = rest_field(visibility=["read"])
    """Code indicating the current status of the upgrade. Known values are: \"RollingForward\",
     \"Cancelled\", \"Completed\", and \"Faulted\"."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """Start time of the upgrade."""
    last_action: Optional[Union[str, "_models.RollingUpgradeActionType"]] = rest_field(
        name="lastAction", visibility=["read"]
    )
    """The last action performed on the rolling upgrade. Known values are: \"Start\" and \"Cancel\"."""
    last_action_time: Optional[datetime.datetime] = rest_field(
        name="lastActionTime", visibility=["read"], format="rfc3339"
    )
    """Last action time of the upgrade."""


class RollingUpgradeStatusInfo(TrackedResource):
    """The status of the latest virtual machine scale set rolling upgrade.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The status of the latest virtual machine scale set rolling upgrade.
    :vartype properties: ~azure.mgmt.compute.models.RollingUpgradeStatusInfoProperties
    """

    properties: Optional["_models.RollingUpgradeStatusInfoProperties"] = rest_field()
    """The status of the latest virtual machine scale set rolling upgrade."""

    __flattened_items = ["policy", "running_status", "progress", "error"]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.RollingUpgradeStatusInfoProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class RollingUpgradeStatusInfoProperties(_model_base.Model):
    """The status of the latest virtual machine scale set rolling upgrade.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar policy: The rolling upgrade policies applied for this upgrade.
    :vartype policy: ~azure.mgmt.compute.models.RollingUpgradePolicy
    :ivar running_status: Information about the current running state of the overall upgrade.
    :vartype running_status: ~azure.mgmt.compute.models.RollingUpgradeRunningStatus
    :ivar progress: Information about the number of virtual machine instances in each upgrade
     state.
    :vartype progress: ~azure.mgmt.compute.models.RollingUpgradeProgressInfo
    :ivar error: Error details for this upgrade, if there are any.
    :vartype error: ~azure.mgmt.compute.models.ApiError
    """

    policy: Optional["_models.RollingUpgradePolicy"] = rest_field(visibility=["read"])
    """The rolling upgrade policies applied for this upgrade."""
    running_status: Optional["_models.RollingUpgradeRunningStatus"] = rest_field(
        name="runningStatus", visibility=["read"]
    )
    """Information about the current running state of the overall upgrade."""
    progress: Optional["_models.RollingUpgradeProgressInfo"] = rest_field(visibility=["read"])
    """Information about the number of virtual machine instances in each upgrade state."""
    error: Optional["_models.ApiError"] = rest_field(visibility=["read"])
    """Error details for this upgrade, if there are any."""


class RunCommandDocumentBase(_model_base.Model):
    """Describes the properties of a Run Command metadata.


    :ivar schema: The VM run command schema. Required.
    :vartype schema: str
    :ivar id: The VM run command id. Required.
    :vartype id: str
    :ivar os_type: The Operating System type. Required. Known values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.compute.models.OperatingSystemTypes
    :ivar label: The VM run command label. Required.
    :vartype label: str
    :ivar description: The VM run command description. Required.
    :vartype description: str
    """

    schema: str = rest_field(name="$schema")
    """The VM run command schema. Required."""
    id: str = rest_field()
    """The VM run command id. Required."""
    os_type: Union[str, "_models.OperatingSystemTypes"] = rest_field(name="osType")
    """The Operating System type. Required. Known values are: \"Windows\" and \"Linux\"."""
    label: str = rest_field()
    """The VM run command label. Required."""
    description: str = rest_field()
    """The VM run command description. Required."""

    @overload
    def __init__(
        self,
        *,
        schema: str,
        id: str,  # pylint: disable=redefined-builtin
        os_type: Union[str, "_models.OperatingSystemTypes"],
        label: str,
        description: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunCommandDocument(RunCommandDocumentBase):
    """Describes the properties of a Run Command.


    :ivar schema: The VM run command schema. Required.
    :vartype schema: str
    :ivar id: The VM run command id. Required.
    :vartype id: str
    :ivar os_type: The Operating System type. Required. Known values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.compute.models.OperatingSystemTypes
    :ivar label: The VM run command label. Required.
    :vartype label: str
    :ivar description: The VM run command description. Required.
    :vartype description: str
    :ivar script: The script to be executed. Required.
    :vartype script: list[str]
    :ivar parameters: The parameters used by the script.
    :vartype parameters: list[~azure.mgmt.compute.models.RunCommandParameterDefinition]
    """

    script: List[str] = rest_field()
    """The script to be executed. Required."""
    parameters: Optional[List["_models.RunCommandParameterDefinition"]] = rest_field()
    """The parameters used by the script."""

    @overload
    def __init__(
        self,
        *,
        schema: str,
        id: str,  # pylint: disable=redefined-builtin
        os_type: Union[str, "_models.OperatingSystemTypes"],
        label: str,
        description: str,
        script: List[str],
        parameters: Optional[List["_models.RunCommandParameterDefinition"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunCommandInput(_model_base.Model):
    """Capture Virtual Machine parameters.

    All required parameters must be populated in order to send to server.

    :ivar command_id: The run command id. Required.
    :vartype command_id: str
    :ivar script: Optional. The script to be executed.  When this value is given, the given script
     will override the default script of the command.
    :vartype script: list[str]
    :ivar parameters: The run command parameters.
    :vartype parameters: list[~azure.mgmt.compute.models.RunCommandInputParameter]
    """

    command_id: str = rest_field(name="commandId")
    """The run command id. Required."""
    script: Optional[List[str]] = rest_field()
    """Optional. The script to be executed.  When this value is given, the given script will override
     the default script of the command."""
    parameters: Optional[List["_models.RunCommandInputParameter"]] = rest_field()
    """The run command parameters."""

    @overload
    def __init__(
        self,
        *,
        command_id: str,
        script: Optional[List[str]] = None,
        parameters: Optional[List["_models.RunCommandInputParameter"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunCommandInputParameter(_model_base.Model):
    """Describes the properties of a run command parameter.


    :ivar name: The run command parameter name. Required.
    :vartype name: str
    :ivar value: The run command parameter value. Required.
    :vartype value: str
    """

    name: str = rest_field()
    """The run command parameter name. Required."""
    value: str = rest_field()
    """The run command parameter value. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        value: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunCommandManagedIdentity(_model_base.Model):
    """Contains clientId or objectId (use only one, not both) of a user-assigned managed identity that
    has access to storage blob used in Run Command. Use an empty RunCommandManagedIdentity object
    in case of system-assigned identity. Make sure the Azure storage blob exists in case of
    scriptUri, and managed identity has been given access to blob's container with 'Storage Blob
    Data Reader' role assignment with scriptUri blob and 'Storage Blob Data Contributor' for Append
    blobs(outputBlobUri, errorBlobUri). In case of user assigned identity, make sure you add it
    under VM's identity. For more info on managed identity and Run Command, refer
    https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.

    :ivar client_id: Client Id (GUID value) of the user-assigned managed identity. ObjectId should
     not be used if this is provided.
    :vartype client_id: str
    :ivar object_id: Object Id (GUID value) of the user-assigned managed identity. ClientId should
     not be used if this is provided.
    :vartype object_id: str
    """

    client_id: Optional[str] = rest_field(name="clientId")
    """Client Id (GUID value) of the user-assigned managed identity. ObjectId should not be used if
     this is provided."""
    object_id: Optional[str] = rest_field(name="objectId")
    """Object Id (GUID value) of the user-assigned managed identity. ClientId should not be used if
     this is provided."""

    @overload
    def __init__(
        self,
        *,
        client_id: Optional[str] = None,
        object_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunCommandParameterDefinition(_model_base.Model):
    """Describes the properties of a run command parameter.


    :ivar name: The run command parameter name. Required.
    :vartype name: str
    :ivar type: The run command parameter type. Required.
    :vartype type: str
    :ivar default_value: The run command parameter default value.
    :vartype default_value: str
    :ivar required: The run command parameter required.
    :vartype required: bool
    """

    name: str = rest_field()
    """The run command parameter name. Required."""
    type: str = rest_field()
    """The run command parameter type. Required."""
    default_value: Optional[str] = rest_field(name="defaultValue")
    """The run command parameter default value."""
    required: Optional[bool] = rest_field()
    """The run command parameter required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        type: str,
        default_value: Optional[str] = None,
        required: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RunCommandResult(_model_base.Model):
    """RunCommandResult.

    :ivar value: Run command operation response.
    :vartype value: list[~azure.mgmt.compute.models.InstanceViewStatus]
    """

    value: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """Run command operation response."""

    @overload
    def __init__(
        self,
        *,
        value: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScaleInPolicy(_model_base.Model):
    """Describes a scale-in policy for a virtual machine scale set.

    :ivar rules: The rules to be followed when scaling-in a virtual machine scale set.
     :code:`<br>`:code:`<br>` Possible values are: :code:`<br>`:code:`<br>` **Default** When a
     virtual machine scale set is scaled in, the scale set will first be balanced across zones if it
     is a zonal scale set. Then, it will be balanced across Fault Domains as far as possible. Within
     each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not
     protected from scale-in. :code:`<br>`:code:`<br>` **OldestVM** When a virtual machine scale set
     is being scaled-in, the oldest virtual machines that are not protected from scale-in will be
     chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced
     across zones. Within each zone, the oldest virtual machines that are not protected will be
     chosen for removal. :code:`<br>`:code:`<br>` **NewestVM** When a virtual machine scale set is
     being scaled-in, the newest virtual machines that are not protected from scale-in will be
     chosen for removal. For zonal virtual machine scale sets, the scale set will first be balanced
     across zones. Within each zone, the newest virtual machines that are not protected will be
     chosen for removal. :code:`<br>`:code:`<br>`.
    :vartype rules: list[str or ~azure.mgmt.compute.models.VirtualMachineScaleSetScaleInRules]
    :ivar force_deletion: This property allows you to specify if virtual machines chosen for
     removal have to be force deleted when a virtual machine scale set is being scaled-in.(Feature
     in Preview).
    :vartype force_deletion: bool
    """

    rules: Optional[List[Union[str, "_models.VirtualMachineScaleSetScaleInRules"]]] = rest_field()
    """The rules to be followed when scaling-in a virtual machine scale set. :code:`<br>`:code:`<br>`
     Possible values are: :code:`<br>`:code:`<br>` **Default** When a virtual machine scale set is
     scaled in, the scale set will first be balanced across zones if it is a zonal scale set. Then,
     it will be balanced across Fault Domains as far as possible. Within each Fault Domain, the
     virtual machines chosen for removal will be the newest ones that are not protected from
     scale-in. :code:`<br>`:code:`<br>` **OldestVM** When a virtual machine scale set is being
     scaled-in, the oldest virtual machines that are not protected from scale-in will be chosen for
     removal. For zonal virtual machine scale sets, the scale set will first be balanced across
     zones. Within each zone, the oldest virtual machines that are not protected will be chosen for
     removal. :code:`<br>`:code:`<br>` **NewestVM** When a virtual machine scale set is being
     scaled-in, the newest virtual machines that are not protected from scale-in will be chosen for
     removal. For zonal virtual machine scale sets, the scale set will first be balanced across
     zones. Within each zone, the newest virtual machines that are not protected will be chosen for
     removal. :code:`<br>`:code:`<br>`."""
    force_deletion: Optional[bool] = rest_field(name="forceDeletion")
    """This property allows you to specify if virtual machines chosen for removal have to be force
     deleted when a virtual machine scale set is being scaled-in.(Feature in Preview)."""

    @overload
    def __init__(
        self,
        *,
        rules: Optional[List[Union[str, "_models.VirtualMachineScaleSetScaleInRules"]]] = None,
        force_deletion: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScheduledEventsAdditionalPublishingTargets(_model_base.Model):  # pylint: disable=name-too-long
    """ScheduledEventsAdditionalPublishingTargets.

    :ivar event_grid_and_resource_graph: The configuration parameters used while creating
     eventGridAndResourceGraph Scheduled Event setting.
    :vartype event_grid_and_resource_graph: ~azure.mgmt.compute.models.EventGridAndResourceGraph
    """

    event_grid_and_resource_graph: Optional["_models.EventGridAndResourceGraph"] = rest_field(
        name="eventGridAndResourceGraph"
    )
    """The configuration parameters used while creating eventGridAndResourceGraph Scheduled Event
     setting."""

    @overload
    def __init__(
        self,
        *,
        event_grid_and_resource_graph: Optional["_models.EventGridAndResourceGraph"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScheduledEventsPolicy(_model_base.Model):
    """Specifies Redeploy, Reboot and ScheduledEventsAdditionalPublishingTargets Scheduled Event
    related configurations.

    :ivar user_initiated_redeploy: The configuration parameters used while creating
     userInitiatedRedeploy scheduled event setting creation.
    :vartype user_initiated_redeploy: ~azure.mgmt.compute.models.UserInitiatedRedeploy
    :ivar user_initiated_reboot: The configuration parameters used while creating
     userInitiatedReboot scheduled event setting creation.
    :vartype user_initiated_reboot: ~azure.mgmt.compute.models.UserInitiatedReboot
    :ivar scheduled_events_additional_publishing_targets: The configuration parameters used while
     publishing scheduledEventsAdditionalPublishingTargets.
    :vartype scheduled_events_additional_publishing_targets:
     ~azure.mgmt.compute.models.ScheduledEventsAdditionalPublishingTargets
    """

    user_initiated_redeploy: Optional["_models.UserInitiatedRedeploy"] = rest_field(name="userInitiatedRedeploy")
    """The configuration parameters used while creating userInitiatedRedeploy scheduled event setting
     creation."""
    user_initiated_reboot: Optional["_models.UserInitiatedReboot"] = rest_field(name="userInitiatedReboot")
    """The configuration parameters used while creating userInitiatedReboot scheduled event setting
     creation."""
    scheduled_events_additional_publishing_targets: Optional["_models.ScheduledEventsAdditionalPublishingTargets"] = (
        rest_field(name="scheduledEventsAdditionalPublishingTargets")
    )
    """The configuration parameters used while publishing scheduledEventsAdditionalPublishingTargets."""

    @overload
    def __init__(
        self,
        *,
        user_initiated_redeploy: Optional["_models.UserInitiatedRedeploy"] = None,
        user_initiated_reboot: Optional["_models.UserInitiatedReboot"] = None,
        scheduled_events_additional_publishing_targets: Optional[
            "_models.ScheduledEventsAdditionalPublishingTargets"
        ] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScheduledEventsProfile(_model_base.Model):
    """ScheduledEventsProfile.

    :ivar terminate_notification_profile: Specifies Terminate Scheduled Event related
     configurations.
    :vartype terminate_notification_profile:
     ~azure.mgmt.compute.models.TerminateNotificationProfile
    :ivar os_image_notification_profile: Specifies OS Image Scheduled Event related configurations.
    :vartype os_image_notification_profile: ~azure.mgmt.compute.models.OSImageNotificationProfile
    """

    terminate_notification_profile: Optional["_models.TerminateNotificationProfile"] = rest_field(
        name="terminateNotificationProfile"
    )
    """Specifies Terminate Scheduled Event related configurations."""
    os_image_notification_profile: Optional["_models.OSImageNotificationProfile"] = rest_field(
        name="osImageNotificationProfile"
    )
    """Specifies OS Image Scheduled Event related configurations."""

    @overload
    def __init__(
        self,
        *,
        terminate_notification_profile: Optional["_models.TerminateNotificationProfile"] = None,
        os_image_notification_profile: Optional["_models.OSImageNotificationProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecurityPostureReference(_model_base.Model):
    """Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01.


    :ivar id: The security posture reference id in the form of
     /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar exclude_extensions: The list of virtual machine extension names to exclude when applying
     the security posture.
    :vartype exclude_extensions: list[str]
    :ivar is_overridable: Whether the security posture can be overridden by the user.
    :vartype is_overridable: bool
    """

    id: str = rest_field()
    """The security posture reference id in the form of
     /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest.  # pylint: disable=line-too-long
     Required."""
    exclude_extensions: Optional[List[str]] = rest_field(name="excludeExtensions")
    """The list of virtual machine extension names to exclude when applying the security posture."""
    is_overridable: Optional[bool] = rest_field(name="isOverridable")
    """Whether the security posture can be overridden by the user."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        exclude_extensions: Optional[List[str]] = None,
        is_overridable: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecurityPostureReferenceUpdate(_model_base.Model):
    """Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01.

    :ivar id: The security posture reference id in the form of
     /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar exclude_extensions: The list of virtual machine extension names to exclude when applying
     the security posture.
    :vartype exclude_extensions: list[str]
    :ivar is_overridable: Whether the security posture can be overridden by the user.
    :vartype is_overridable: bool
    """

    id: Optional[str] = rest_field()
    """The security posture reference id in the form of
     /CommunityGalleries/{communityGalleryName}/securityPostures/{securityPostureName}/versions/{major.minor.patch}|latest.  # pylint: disable=line-too-long"""
    exclude_extensions: Optional[List[str]] = rest_field(name="excludeExtensions")
    """The list of virtual machine extension names to exclude when applying the security posture."""
    is_overridable: Optional[bool] = rest_field(name="isOverridable")
    """Whether the security posture can be overridden by the user."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        exclude_extensions: Optional[List[str]] = None,
        is_overridable: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SecurityProfile(_model_base.Model):
    """Specifies the Security profile settings for the virtual machine or virtual machine scale set.

    :ivar uefi_settings: Specifies the security settings like secure boot and vTPM used while
     creating the virtual machine. Minimum api-version: 2020-12-01.
    :vartype uefi_settings: ~azure.mgmt.compute.models.UefiSettings
    :ivar encryption_at_host: This property can be used by user in the request to enable or disable
     the Host Encryption for the virtual machine or virtual machine scale set. This will enable the
     encryption for all the disks including Resource/Temp disk at host itself. The default behavior
     is: The Encryption at host will be disabled unless this property is set to true for the
     resource.
    :vartype encryption_at_host: bool
    :ivar security_type: Specifies the SecurityType of the virtual machine. It has to be set to any
     specified value to enable UefiSettings. The default behavior is: UefiSettings will not be
     enabled unless this property is set. Known values are: "TrustedLaunch" and "ConfidentialVM".
    :vartype security_type: str or ~azure.mgmt.compute.models.SecurityTypes
    :ivar encryption_identity: Specifies the Managed Identity used by ADE to get access token for
     keyvault operations.
    :vartype encryption_identity: ~azure.mgmt.compute.models.EncryptionIdentity
    :ivar proxy_agent_settings: Specifies ProxyAgent settings while creating the virtual machine.
     Minimum api-version: 2023-09-01.
    :vartype proxy_agent_settings: ~azure.mgmt.compute.models.ProxyAgentSettings
    """

    uefi_settings: Optional["_models.UefiSettings"] = rest_field(name="uefiSettings")
    """Specifies the security settings like secure boot and vTPM used while creating the virtual
     machine. Minimum api-version: 2020-12-01."""
    encryption_at_host: Optional[bool] = rest_field(name="encryptionAtHost")
    """This property can be used by user in the request to enable or disable the Host Encryption for
     the virtual machine or virtual machine scale set. This will enable the encryption for all the
     disks including Resource/Temp disk at host itself. The default behavior is: The Encryption at
     host will be disabled unless this property is set to true for the resource."""
    security_type: Optional[Union[str, "_models.SecurityTypes"]] = rest_field(name="securityType")
    """Specifies the SecurityType of the virtual machine. It has to be set to any specified value to
     enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this
     property is set. Known values are: \"TrustedLaunch\" and \"ConfidentialVM\"."""
    encryption_identity: Optional["_models.EncryptionIdentity"] = rest_field(name="encryptionIdentity")
    """Specifies the Managed Identity used by ADE to get access token for keyvault operations."""
    proxy_agent_settings: Optional["_models.ProxyAgentSettings"] = rest_field(name="proxyAgentSettings")
    """Specifies ProxyAgent settings while creating the virtual machine. Minimum api-version:
     2023-09-01."""

    @overload
    def __init__(
        self,
        *,
        uefi_settings: Optional["_models.UefiSettings"] = None,
        encryption_at_host: Optional[bool] = None,
        security_type: Optional[Union[str, "_models.SecurityTypes"]] = None,
        encryption_identity: Optional["_models.EncryptionIdentity"] = None,
        proxy_agent_settings: Optional["_models.ProxyAgentSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ServiceArtifactReference(_model_base.Model):
    """Specifies the service artifact reference id used to set same image version for all virtual
    machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01.

    :ivar id: The service artifact reference id in the form of
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName}.  # pylint: disable=line-too-long
    :vartype id: str
    """

    id: Optional[str] = rest_field()
    """The service artifact reference id in the form of
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts/{serviceArtifactName}/vmArtifactsProfiles/{vmArtifactsProfilesName}.  # pylint: disable=line-too-long"""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Sku(_model_base.Model):
    """Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the
    hardware the scale set is currently on, you need to deallocate the VMs in the scale set before
    you modify the SKU name.

    :ivar name: The sku name.
    :vartype name: str
    :ivar tier: Specifies the tier of virtual machines in a scale set.:code:`<br />`:code:`<br />`
     Possible Values::code:`<br />`:code:`<br />` **Standard**\\ :code:`<br />`:code:`<br />`
     **Basic**.
    :vartype tier: str
    :ivar capacity: Specifies the number of virtual machines in the scale set.
    :vartype capacity: int
    """

    name: Optional[str] = rest_field()
    """The sku name."""
    tier: Optional[str] = rest_field()
    """Specifies the tier of virtual machines in a scale set.:code:`<br />`:code:`<br />` Possible
     Values::code:`<br />`:code:`<br />` **Standard**\ :code:`<br />`:code:`<br />` **Basic**."""
    capacity: Optional[int] = rest_field()
    """Specifies the number of virtual machines in the scale set."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        tier: Optional[str] = None,
        capacity: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SkuProfile(_model_base.Model):
    """Specifies the sku profile for the virtual machine scale set. With this property the customer is
    able to specify a list of VM sizes and an allocation strategy.

    :ivar vm_sizes: Specifies the VM sizes for the virtual machine scale set.
    :vartype vm_sizes: list[~azure.mgmt.compute.models.SkuProfileVMSize]
    :ivar allocation_strategy: Specifies the allocation strategy for the virtual machine scale set
     based on which the VMs will be allocated. Known values are: "LowestPrice" and
     "CapacityOptimized".
    :vartype allocation_strategy: str or ~azure.mgmt.compute.models.AllocationStrategy
    """

    vm_sizes: Optional[List["_models.SkuProfileVMSize"]] = rest_field(name="vmSizes")
    """Specifies the VM sizes for the virtual machine scale set."""
    allocation_strategy: Optional[Union[str, "_models.AllocationStrategy"]] = rest_field(name="allocationStrategy")
    """Specifies the allocation strategy for the virtual machine scale set based on which the VMs will
     be allocated. Known values are: \"LowestPrice\" and \"CapacityOptimized\"."""

    @overload
    def __init__(
        self,
        *,
        vm_sizes: Optional[List["_models.SkuProfileVMSize"]] = None,
        allocation_strategy: Optional[Union[str, "_models.AllocationStrategy"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SkuProfileVMSize(_model_base.Model):
    """Specifies the VM Size.

    :ivar name: Specifies the name of the VM Size.
    :vartype name: str
    """

    name: Optional[str] = rest_field()
    """Specifies the name of the VM Size."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SpotRestorePolicy(_model_base.Model):
    """Specifies the Spot-Try-Restore properties for the virtual machine scale set. With this property
    customer can enable or disable automatic restore of the evicted Spot VMSS VM instances
    opportunistically based on capacity availability and pricing constraint.

    :ivar enabled: Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be
     tried to be restored opportunistically based on capacity availability and pricing constraints.
    :vartype enabled: bool
    :ivar restore_timeout: Timeout value expressed as an ISO 8601 time duration after which the
     platform will not try to restore the VMSS SPOT instances.
    :vartype restore_timeout: str
    """

    enabled: Optional[bool] = rest_field()
    """Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be
     restored opportunistically based on capacity availability and pricing constraints."""
    restore_timeout: Optional[str] = rest_field(name="restoreTimeout")
    """Timeout value expressed as an ISO 8601 time duration after which the platform will not try to
     restore the VMSS SPOT instances."""

    @overload
    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        restore_timeout: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SshConfiguration(_model_base.Model):
    """SSH configuration for Linux based VMs running on Azure.

    :ivar public_keys: The list of SSH public keys used to authenticate with linux based VMs.
    :vartype public_keys: list[~azure.mgmt.compute.models.SshPublicKey]
    """

    public_keys: Optional[List["_models.SshPublicKey"]] = rest_field(name="publicKeys")
    """The list of SSH public keys used to authenticate with linux based VMs."""

    @overload
    def __init__(
        self,
        *,
        public_keys: Optional[List["_models.SshPublicKey"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SshGenerateKeyPairInputParameters(_model_base.Model):
    """Parameters for GenerateSshKeyPair.

    :ivar encryption_type: The encryption type of the SSH keys to be generated. See
     SshEncryptionTypes for possible set of values. If not provided, will default to RSA. Known
     values are: "RSA" and "Ed25519".
    :vartype encryption_type: str or ~azure.mgmt.compute.models.SshEncryptionTypes
    """

    encryption_type: Optional[Union[str, "_models.SshEncryptionTypes"]] = rest_field(name="encryptionType")
    """The encryption type of the SSH keys to be generated. See SshEncryptionTypes for possible set of
     values. If not provided, will default to RSA. Known values are: \"RSA\" and \"Ed25519\"."""

    @overload
    def __init__(
        self,
        *,
        encryption_type: Optional[Union[str, "_models.SshEncryptionTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SshPublicKey(_model_base.Model):
    """Contains information about SSH certificate public key and the path on the Linux VM where the
    public key is placed.

    :ivar path: Specifies the full path on the created VM where ssh public key is stored. If the
     file already exists, the specified key is appended to the file. Example:
     /home/user/.ssh/authorized_keys.
    :vartype path: str
    :ivar key_data: SSH public key certificate used to authenticate with the VM through ssh. The
     key needs to be at least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH
     keys on Linux and Mac for Linux VMs in
     Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).
    :vartype key_data: str
    """

    path: Optional[str] = rest_field()
    """Specifies the full path on the created VM where ssh public key is stored. If the file already
     exists, the specified key is appended to the file. Example: /home/user/.ssh/authorized_keys."""
    key_data: Optional[str] = rest_field(name="keyData")
    """SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at
     least 2048-bit and in ssh-rsa format. For creating ssh keys, see [Create SSH keys on Linux and
     Mac for Linux VMs in
     Azure]https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed)."""

    @overload
    def __init__(
        self,
        *,
        path: Optional[str] = None,
        key_data: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SshPublicKeyGenerateKeyPairResult(_model_base.Model):
    """Response from generation of an SSH key pair.


    :ivar private_key: Private key portion of the key pair used to authenticate to a virtual
     machine through ssh. The private key is returned in RFC3447 format and should be treated as a
     secret. Required.
    :vartype private_key: str
    :ivar public_key: Public key portion of the key pair used to authenticate to a virtual machine
     through ssh. The public key is in ssh-rsa format. Required.
    :vartype public_key: str
    :ivar id: The ARM resource id in the form of
     /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{SshPublicKeyName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    """

    private_key: str = rest_field(name="privateKey")
    """Private key portion of the key pair used to authenticate to a virtual machine through ssh. The
     private key is returned in RFC3447 format and should be treated as a secret. Required."""
    public_key: str = rest_field(name="publicKey")
    """Public key portion of the key pair used to authenticate to a virtual machine through ssh. The
     public key is in ssh-rsa format. Required."""
    id: str = rest_field()
    """The ARM resource id in the form of
     /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{SshPublicKeyName}.  # pylint: disable=line-too-long
     Required."""

    @overload
    def __init__(
        self,
        *,
        private_key: str,
        public_key: str,
        id: str,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SshPublicKeyResource(TrackedResource):
    """Specifies information about the SSH public key.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Properties of the SSH public key.
    :vartype properties: ~azure.mgmt.compute.models.SshPublicKeyResourceProperties
    """

    properties: Optional["_models.SshPublicKeyResourceProperties"] = rest_field()
    """Properties of the SSH public key."""

    __flattened_items = ["public_key"]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.SshPublicKeyResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SshPublicKeyResourceProperties(_model_base.Model):
    """Properties of the SSH public key.

    :ivar public_key: SSH public key used to authenticate to a virtual machine through ssh. If this
     property is not initially provided when the resource is created, the publicKey property will be
     populated when generateKeyPair is called. If the public key is provided upon resource creation,
     the provided public key needs to be at least 2048-bit and in ssh-rsa format.
    :vartype public_key: str
    """

    public_key: Optional[str] = rest_field(name="publicKey")
    """SSH public key used to authenticate to a virtual machine through ssh. If this property is not
     initially provided when the resource is created, the publicKey property will be populated when
     generateKeyPair is called. If the public key is provided upon resource creation, the provided
     public key needs to be at least 2048-bit and in ssh-rsa format."""

    @overload
    def __init__(
        self,
        *,
        public_key: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SshPublicKeyUpdateResource(UpdateResource):
    """Specifies information about the SSH public key.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Properties of the SSH public key.
    :vartype properties: ~azure.mgmt.compute.models.SshPublicKeyResourceProperties
    """

    properties: Optional["_models.SshPublicKeyResourceProperties"] = rest_field()
    """Properties of the SSH public key."""

    __flattened_items = ["public_key"]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.SshPublicKeyResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class StorageProfile(_model_base.Model):
    """Specifies the storage settings for the virtual machine disks.

    :ivar image_reference: Specifies information about the image to use. You can specify
     information about platform images, marketplace images, or virtual machine images. This element
     is required when you want to use a platform image, marketplace image, or virtual machine image,
     but is not used in other creation operations.
    :vartype image_reference: ~azure.mgmt.compute.models.ImageReference
    :ivar os_disk: Specifies information about the operating system disk used by the virtual
     machine. For more information about disks, see `About disks and VHDs for Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_.
    :vartype os_disk: ~azure.mgmt.compute.models.OSDisk
    :ivar data_disks: Specifies the parameters that are used to add a data disk to a virtual
     machine. For more information about disks, see `About disks and VHDs for Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_.
    :vartype data_disks: list[~azure.mgmt.compute.models.DataDisk]
    :ivar disk_controller_type: Specifies the disk controller type configured for the VM. **Note:**
     This property will be set to the default disk controller type if not specified provided virtual
     machine is being created with 'hyperVGeneration' set to V2 based on the capabilities of the
     operating system disk and VM size from the the specified minimum api version. You need to
     deallocate the VM before updating its disk controller type unless you are updating the VM size
     in the VM configuration which implicitly deallocates and reallocates the VM. Minimum
     api-version: 2022-08-01. Known values are: "SCSI" and "NVMe".
    :vartype disk_controller_type: str or ~azure.mgmt.compute.models.DiskControllerTypes
    """

    image_reference: Optional["_models.ImageReference"] = rest_field(name="imageReference")
    """Specifies information about the image to use. You can specify information about platform
     images, marketplace images, or virtual machine images. This element is required when you want
     to use a platform image, marketplace image, or virtual machine image, but is not used in other
     creation operations."""
    os_disk: Optional["_models.OSDisk"] = rest_field(name="osDisk")
    """Specifies information about the operating system disk used by the virtual machine. For more
     information about disks, see `About disks and VHDs for Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_."""
    data_disks: Optional[List["_models.DataDisk"]] = rest_field(name="dataDisks")
    """Specifies the parameters that are used to add a data disk to a virtual machine. For more
     information about disks, see `About disks and VHDs for Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_."""
    disk_controller_type: Optional[Union[str, "_models.DiskControllerTypes"]] = rest_field(name="diskControllerType")
    """Specifies the disk controller type configured for the VM. **Note:** This property will be set
     to the default disk controller type if not specified provided virtual machine is being created
     with 'hyperVGeneration' set to V2 based on the capabilities of the operating system disk and VM
     size from the the specified minimum api version. You need to deallocate the VM before updating
     its disk controller type unless you are updating the VM size in the VM configuration which
     implicitly deallocates and reallocates the VM. Minimum api-version: 2022-08-01. Known values
     are: \"SCSI\" and \"NVMe\"."""

    @overload
    def __init__(
        self,
        *,
        image_reference: Optional["_models.ImageReference"] = None,
        os_disk: Optional["_models.OSDisk"] = None,
        data_disks: Optional[List["_models.DataDisk"]] = None,
        disk_controller_type: Optional[Union[str, "_models.DiskControllerTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SubResourceWithColocationStatus(SubResource):
    """SubResourceWithColocationStatus.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar colocation_status: Describes colocation status of a resource in the Proximity Placement
     Group.
    :vartype colocation_status: ~azure.mgmt.compute.models.InstanceViewStatus
    """

    colocation_status: Optional["_models.InstanceViewStatus"] = rest_field(name="colocationStatus")
    """Describes colocation status of a resource in the Proximity Placement Group."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        colocation_status: Optional["_models.InstanceViewStatus"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.compute.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.compute.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy")
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="createdByType")
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(name="createdAt", format="rfc3339")
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy")
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(name="lastModifiedByType")
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(name="lastModifiedAt", format="rfc3339")
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TerminateNotificationProfile(_model_base.Model):
    """TerminateNotificationProfile.

    :ivar not_before_timeout: Configurable length of time a Virtual Machine being deleted will have
     to potentially approve the Terminate Scheduled Event before the event is auto approved (timed
     out). The configuration must be specified in ISO 8601 format, the default value is 5 minutes
     (PT5M).
    :vartype not_before_timeout: str
    :ivar enable: Specifies whether the Terminate Scheduled event is enabled or disabled.
    :vartype enable: bool
    """

    not_before_timeout: Optional[str] = rest_field(name="notBeforeTimeout")
    """Configurable length of time a Virtual Machine being deleted will have to potentially approve
     the Terminate Scheduled Event before the event is auto approved (timed out). The configuration
     must be specified in ISO 8601 format, the default value is 5 minutes (PT5M)."""
    enable: Optional[bool] = rest_field()
    """Specifies whether the Terminate Scheduled event is enabled or disabled."""

    @overload
    def __init__(
        self,
        *,
        not_before_timeout: Optional[str] = None,
        enable: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ThrottledRequestsInput(LogAnalyticsInputBase):
    """Api request input for LogAnalytics getThrottledRequests Api.

    All required parameters must be populated in order to send to server.

    :ivar blob_container_sas_uri: SAS Uri of the logging blob container to which LogAnalytics Api
     writes output logs to. Required.
    :vartype blob_container_sas_uri: str
    :ivar from_time: From time of the query. Required.
    :vartype from_time: ~datetime.datetime
    :ivar to_time: To time of the query. Required.
    :vartype to_time: ~datetime.datetime
    :ivar group_by_throttle_policy: Group query result by Throttle Policy applied.
    :vartype group_by_throttle_policy: bool
    :ivar group_by_operation_name: Group query result by Operation Name.
    :vartype group_by_operation_name: bool
    :ivar group_by_resource_name: Group query result by Resource Name.
    :vartype group_by_resource_name: bool
    :ivar group_by_client_application_id: Group query result by Client Application ID.
    :vartype group_by_client_application_id: bool
    :ivar group_by_user_agent: Group query result by User Agent.
    :vartype group_by_user_agent: bool
    """

    @overload
    def __init__(
        self,
        *,
        blob_container_sas_uri: str,
        from_time: datetime.datetime,
        to_time: datetime.datetime,
        group_by_throttle_policy: Optional[bool] = None,
        group_by_operation_name: Optional[bool] = None,
        group_by_resource_name: Optional[bool] = None,
        group_by_client_application_id: Optional[bool] = None,
        group_by_user_agent: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UefiSettings(_model_base.Model):
    """Specifies the security settings like secure boot and vTPM used while creating the virtual
    machine. Minimum api-version: 2020-12-01.

    :ivar secure_boot_enabled: Specifies whether secure boot should be enabled on the virtual
     machine. Minimum api-version: 2020-12-01.
    :vartype secure_boot_enabled: bool
    :ivar v_tpm_enabled: Specifies whether vTPM should be enabled on the virtual machine. Minimum
     api-version: 2020-12-01.
    :vartype v_tpm_enabled: bool
    """

    secure_boot_enabled: Optional[bool] = rest_field(name="secureBootEnabled")
    """Specifies whether secure boot should be enabled on the virtual machine. Minimum api-version:
     2020-12-01."""
    v_tpm_enabled: Optional[bool] = rest_field(name="vTpmEnabled")
    """Specifies whether vTPM should be enabled on the virtual machine. Minimum api-version:
     2020-12-01."""

    @overload
    def __init__(
        self,
        *,
        secure_boot_enabled: Optional[bool] = None,
        v_tpm_enabled: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpgradeOperationHistoricalStatusInfo(_model_base.Model):
    """Virtual Machine Scale Set OS Upgrade History operation response.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar properties: Information about the properties of the upgrade operation.
    :vartype properties: ~azure.mgmt.compute.models.UpgradeOperationHistoricalStatusInfoProperties
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: Resource location.
    :vartype location: str
    """

    properties: Optional["_models.UpgradeOperationHistoricalStatusInfoProperties"] = rest_field(visibility=["read"])
    """Information about the properties of the upgrade operation."""
    type: Optional[str] = rest_field(visibility=["read"])
    """Resource type."""
    location: Optional[str] = rest_field(visibility=["read"])
    """Resource location."""


class UpgradeOperationHistoricalStatusInfoProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes each OS upgrade on the Virtual Machine Scale Set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar running_status: Information about the overall status of the upgrade operation.
    :vartype running_status: ~azure.mgmt.compute.models.UpgradeOperationHistoryStatus
    :ivar progress: Counts of the VMs in each state.
    :vartype progress: ~azure.mgmt.compute.models.RollingUpgradeProgressInfo
    :ivar error: Error Details for this upgrade if there are any.
    :vartype error: ~azure.mgmt.compute.models.ApiError
    :ivar started_by: Invoker of the Upgrade Operation. Known values are: "Unknown", "User", and
     "Platform".
    :vartype started_by: str or ~azure.mgmt.compute.models.UpgradeOperationInvoker
    :ivar target_image_reference: Image Reference details.
    :vartype target_image_reference: ~azure.mgmt.compute.models.ImageReference
    :ivar rollback_info: Information about OS rollback if performed.
    :vartype rollback_info: ~azure.mgmt.compute.models.RollbackStatusInfo
    """

    running_status: Optional["_models.UpgradeOperationHistoryStatus"] = rest_field(
        name="runningStatus", visibility=["read"]
    )
    """Information about the overall status of the upgrade operation."""
    progress: Optional["_models.RollingUpgradeProgressInfo"] = rest_field(visibility=["read"])
    """Counts of the VMs in each state."""
    error: Optional["_models.ApiError"] = rest_field(visibility=["read"])
    """Error Details for this upgrade if there are any."""
    started_by: Optional[Union[str, "_models.UpgradeOperationInvoker"]] = rest_field(
        name="startedBy", visibility=["read"]
    )
    """Invoker of the Upgrade Operation. Known values are: \"Unknown\", \"User\", and \"Platform\"."""
    target_image_reference: Optional["_models.ImageReference"] = rest_field(
        name="targetImageReference", visibility=["read"]
    )
    """Image Reference details."""
    rollback_info: Optional["_models.RollbackStatusInfo"] = rest_field(name="rollbackInfo", visibility=["read"])
    """Information about OS rollback if performed."""


class UpgradeOperationHistoryStatus(_model_base.Model):
    """Information about the current running state of the overall upgrade.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Code indicating the current status of the upgrade. Known values are:
     "RollingForward", "Cancelled", "Completed", and "Faulted".
    :vartype code: str or ~azure.mgmt.compute.models.UpgradeState
    :ivar start_time: Start time of the upgrade.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: End time of the upgrade.
    :vartype end_time: ~datetime.datetime
    """

    code: Optional[Union[str, "_models.UpgradeState"]] = rest_field(visibility=["read"])
    """Code indicating the current status of the upgrade. Known values are: \"RollingForward\",
     \"Cancelled\", \"Completed\", and \"Faulted\"."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """Start time of the upgrade."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", visibility=["read"], format="rfc3339")
    """End time of the upgrade."""


class UpgradePolicy(_model_base.Model):
    """Describes an upgrade policy - automatic, manual, or rolling.

    :ivar mode: Specifies the mode of an upgrade to virtual machines in the scale set.:code:`<br
     />`:code:`<br />` Possible values are::code:`<br />`:code:`<br />` **Manual** - You  control
     the application of updates to virtual machines in the scale set. You do this by using the
     manualUpgrade action.:code:`<br />`:code:`<br />` **Automatic** - All virtual machines in the
     scale set are  automatically updated at the same time. Known values are: "Automatic", "Manual",
     and "Rolling".
    :vartype mode: str or ~azure.mgmt.compute.models.UpgradeMode
    :ivar rolling_upgrade_policy: The configuration parameters used while performing a rolling
     upgrade.
    :vartype rolling_upgrade_policy: ~azure.mgmt.compute.models.RollingUpgradePolicy
    :ivar automatic_os_upgrade_policy: Configuration parameters used for performing automatic OS
     Upgrade.
    :vartype automatic_os_upgrade_policy: ~azure.mgmt.compute.models.AutomaticOSUpgradePolicy
    """

    mode: Optional[Union[str, "_models.UpgradeMode"]] = rest_field()
    """Specifies the mode of an upgrade to virtual machines in the scale set.:code:`<br />`:code:`<br
     />` Possible values are::code:`<br />`:code:`<br />` **Manual** - You  control the application
     of updates to virtual machines in the scale set. You do this by using the manualUpgrade
     action.:code:`<br />`:code:`<br />` **Automatic** - All virtual machines in the scale set are
     automatically updated at the same time. Known values are: \"Automatic\", \"Manual\", and
     \"Rolling\"."""
    rolling_upgrade_policy: Optional["_models.RollingUpgradePolicy"] = rest_field(name="rollingUpgradePolicy")
    """The configuration parameters used while performing a rolling upgrade."""
    automatic_os_upgrade_policy: Optional["_models.AutomaticOSUpgradePolicy"] = rest_field(
        name="automaticOSUpgradePolicy"
    )
    """Configuration parameters used for performing automatic OS Upgrade."""

    @overload
    def __init__(
        self,
        *,
        mode: Optional[Union[str, "_models.UpgradeMode"]] = None,
        rolling_upgrade_policy: Optional["_models.RollingUpgradePolicy"] = None,
        automatic_os_upgrade_policy: Optional["_models.AutomaticOSUpgradePolicy"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Usage(_model_base.Model):
    """Describes Compute Resource Usage.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar unit: An enum describing the unit of usage measurement. Required. Default value is
     "Count".
    :vartype unit: str
    :ivar current_value: The current usage of the resource. Required.
    :vartype current_value: int
    :ivar limit: The maximum permitted usage of the resource. Required.
    :vartype limit: int
    :ivar name: The name of the type of usage. Required.
    :vartype name: ~azure.mgmt.compute.models.UsageName
    """

    unit: Literal["Count"] = rest_field()
    """An enum describing the unit of usage measurement. Required. Default value is \"Count\"."""
    current_value: int = rest_field(name="currentValue")
    """The current usage of the resource. Required."""
    limit: int = rest_field()
    """The maximum permitted usage of the resource. Required."""
    name: "_models.UsageName" = rest_field()
    """The name of the type of usage. Required."""

    @overload
    def __init__(
        self,
        *,
        current_value: int,
        limit: int,
        name: "_models.UsageName",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.unit: Literal["Count"] = "Count"


class UsageName(_model_base.Model):
    """The Usage Names.

    :ivar value: The name of the resource.
    :vartype value: str
    :ivar localized_value: The localized name of the resource.
    :vartype localized_value: str
    """

    value: Optional[str] = rest_field()
    """The name of the resource."""
    localized_value: Optional[str] = rest_field(name="localizedValue")
    """The localized name of the resource."""

    @overload
    def __init__(
        self,
        *,
        value: Optional[str] = None,
        localized_value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserAssignedIdentitiesValue(_model_base.Model):
    """UserAssignedIdentitiesValue.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of user assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client id of user assigned identity.
    :vartype client_id: str
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal id of user assigned identity."""
    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])
    """The client id of user assigned identity."""


class UserInitiatedReboot(_model_base.Model):
    """Specifies Reboot related Scheduled Event related configurations.

    :ivar automatically_approve: Specifies Reboot Scheduled Event related configurations.
    :vartype automatically_approve: bool
    """

    automatically_approve: Optional[bool] = rest_field(name="automaticallyApprove")
    """Specifies Reboot Scheduled Event related configurations."""

    @overload
    def __init__(
        self,
        *,
        automatically_approve: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserInitiatedRedeploy(_model_base.Model):
    """Specifies Redeploy related Scheduled Event related configurations.

    :ivar automatically_approve: Specifies Redeploy Scheduled Event related configurations.
    :vartype automatically_approve: bool
    """

    automatically_approve: Optional[bool] = rest_field(name="automaticallyApprove")
    """Specifies Redeploy Scheduled Event related configurations."""

    @overload
    def __init__(
        self,
        *,
        automatically_approve: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VaultCertificate(_model_base.Model):
    """Describes a single certificate reference in a Key Vault, and where the certificate should
    reside on the VM.

    :ivar certificate_url: This is the URL of a certificate that has been uploaded to Key Vault as
     a secret. For adding a secret to the Key Vault, see `Add a key or secret to the key vault
     <https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add>`_. In this case, your
     certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded
     in UTF-8: :code:`<br>`:code:`<br>` {:code:`<br>`
     "data":":code:`<Base64-encoded-certificate>`",:code:`<br>`  "dataType":"pfx",:code:`<br>`
     "password":":code:`<pfx-file-password>`":code:`<br>`} :code:`<br>` To install certificates on a
     virtual machine it is recommended to use the `Azure Key Vault virtual machine extension for
     Linux <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux>`_ or the
     `Azure Key Vault virtual machine extension for Windows
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows>`_.
    :vartype certificate_url: str
    :ivar certificate_store: For Windows VMs, specifies the certificate store on the Virtual
     Machine to which the certificate should be added. The specified certificate store is implicitly
     in the LocalMachine account. For Linux VMs, the certificate file is placed under the
     /var/lib/waagent directory, with the file name &lt;UppercaseThumbprint&gt;.crt for the X509
     certificate file and &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are
     .pem formatted.
    :vartype certificate_store: str
    """

    certificate_url: Optional[str] = rest_field(name="certificateUrl")
    """This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a
     secret to the Key Vault, see `Add a key or secret to the key vault
     <https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add>`_. In this case, your
     certificate needs to be It is the Base64 encoding of the following JSON Object which is encoded
     in UTF-8: :code:`<br>`:code:`<br>` {:code:`<br>`
     \"data\":\":code:`<Base64-encoded-certificate>`\",:code:`<br>`
     \"dataType\":\"pfx\",:code:`<br>`  \"password\":\":code:`<pfx-file-password>`\":code:`<br>`}
     :code:`<br>` To install certificates on a virtual machine it is recommended to use the `Azure
     Key Vault virtual machine extension for Linux
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux>`_ or the `Azure
     Key Vault virtual machine extension for Windows
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows>`_."""
    certificate_store: Optional[str] = rest_field(name="certificateStore")
    """For Windows VMs, specifies the certificate store on the Virtual Machine to which the
     certificate should be added. The specified certificate store is implicitly in the LocalMachine
     account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory,
     with the file name &lt;UppercaseThumbprint&gt;.crt for the X509 certificate file and
     &lt;UppercaseThumbprint&gt;.prv for private key. Both of these files are .pem formatted."""

    @overload
    def __init__(
        self,
        *,
        certificate_url: Optional[str] = None,
        certificate_store: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VaultSecretGroup(_model_base.Model):
    """Describes a set of certificates which are all in the same Key Vault.

    :ivar source_vault: The relative URL of the Key Vault containing all of the certificates in
     VaultCertificates.
    :vartype source_vault: ~azure.mgmt.compute.models.SubResource
    :ivar vault_certificates: The list of key vault references in SourceVault which contain
     certificates.
    :vartype vault_certificates: list[~azure.mgmt.compute.models.VaultCertificate]
    """

    source_vault: Optional["_models.SubResource"] = rest_field(name="sourceVault")
    """The relative URL of the Key Vault containing all of the certificates in VaultCertificates."""
    vault_certificates: Optional[List["_models.VaultCertificate"]] = rest_field(name="vaultCertificates")
    """The list of key vault references in SourceVault which contain certificates."""

    @overload
    def __init__(
        self,
        *,
        source_vault: Optional["_models.SubResource"] = None,
        vault_certificates: Optional[List["_models.VaultCertificate"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualHardDisk(_model_base.Model):
    """Describes the uri of a disk.

    :ivar uri: Specifies the virtual hard disk's uri.
    :vartype uri: str
    """

    uri: Optional[str] = rest_field()
    """Specifies the virtual hard disk's uri."""

    @overload
    def __init__(
        self,
        *,
        uri: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachine(TrackedResource):
    """Describes a Virtual Machine.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a Virtual Machine.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineProperties
    :ivar plan: Specifies information about the marketplace image used to create the virtual
     machine. This element is only used for marketplace images. Before you can use a marketplace
     image from an API, you must enable the image for programmatic use.  In the Azure portal, find
     the marketplace image that you want to use and then click **Want to deploy programmatically,
     Get Started ->**. Enter any required information and then click **Save**.
    :vartype plan: ~azure.mgmt.compute.models.Plan
    :ivar resources: The virtual machine child extension resources.
    :vartype resources: list[~azure.mgmt.compute.models.VirtualMachineExtension]
    :ivar identity: The identity of the virtual machine, if configured.
    :vartype identity: ~azure.mgmt.compute.models.VirtualMachineIdentity
    :ivar zones: The virtual machine zones.
    :vartype zones: list[str]
    :ivar extended_location: The extended location of the Virtual Machine.
    :vartype extended_location: ~azure.mgmt.compute.models.ExtendedLocation
    :ivar managed_by: ManagedBy is set to Virtual Machine Scale Set(VMSS) flex ARM resourceID, if
     the VM is part of the VMSS. This property is used by platform for internal resource group
     delete optimization.
    :vartype managed_by: str
    :ivar etag: Etag is property returned in Create/Update/Get response of the VM, so that customer
     can supply it in the header to ensure optimistic updates.
    :vartype etag: str
    """

    properties: Optional["_models.VirtualMachineProperties"] = rest_field()
    """Describes the properties of a Virtual Machine."""
    plan: Optional["_models.Plan"] = rest_field()
    """Specifies information about the marketplace image used to create the virtual machine. This
     element is only used for marketplace images. Before you can use a marketplace image from an
     API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace
     image that you want to use and then click **Want to deploy programmatically, Get Started ->**.
     Enter any required information and then click **Save**."""
    resources: Optional[List["_models.VirtualMachineExtension"]] = rest_field(visibility=["read"])
    """The virtual machine child extension resources."""
    identity: Optional["_models.VirtualMachineIdentity"] = rest_field()
    """The identity of the virtual machine, if configured."""
    zones: Optional[List[str]] = rest_field()
    """The virtual machine zones."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(name="extendedLocation")
    """The extended location of the Virtual Machine."""
    managed_by: Optional[str] = rest_field(name="managedBy", visibility=["read"])
    """ManagedBy is set to Virtual Machine Scale Set(VMSS) flex ARM resourceID, if the VM is part of
     the VMSS. This property is used by platform for internal resource group delete optimization."""
    etag: Optional[str] = rest_field(visibility=["read"])
    """Etag is property returned in Create/Update/Get response of the VM, so that customer can supply
     it in the header to ensure optimistic updates."""

    __flattened_items = [
        "hardware_profile",
        "scheduled_events_policy",
        "storage_profile",
        "additional_capabilities",
        "os_profile",
        "network_profile",
        "security_profile",
        "diagnostics_profile",
        "availability_set",
        "virtual_machine_scale_set",
        "proximity_placement_group",
        "priority",
        "eviction_policy",
        "billing_profile",
        "host",
        "host_group",
        "provisioning_state",
        "instance_view",
        "license_type",
        "vm_id",
        "extensions_time_budget",
        "platform_fault_domain",
        "scheduled_events_profile",
        "user_data",
        "capacity_reservation",
        "application_profile",
        "time_created",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualMachineProperties"] = None,
        plan: Optional["_models.Plan"] = None,
        identity: Optional["_models.VirtualMachineIdentity"] = None,
        zones: Optional[List[str]] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineAgentInstanceView(_model_base.Model):
    """The instance view of the VM Agent running on the virtual machine.

    :ivar vm_agent_version: The VM Agent full version.
    :vartype vm_agent_version: str
    :ivar extension_handlers: The virtual machine extension handler instance view.
    :vartype extension_handlers:
     list[~azure.mgmt.compute.models.VirtualMachineExtensionHandlerInstanceView]
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    """

    vm_agent_version: Optional[str] = rest_field(name="vmAgentVersion")
    """The VM Agent full version."""
    extension_handlers: Optional[List["_models.VirtualMachineExtensionHandlerInstanceView"]] = rest_field(
        name="extensionHandlers"
    )
    """The virtual machine extension handler instance view."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""

    @overload
    def __init__(
        self,
        *,
        vm_agent_version: Optional[str] = None,
        extension_handlers: Optional[List["_models.VirtualMachineExtensionHandlerInstanceView"]] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineAssessPatchesResult(_model_base.Model):
    """Describes the properties of an AssessPatches result.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The overall success or failure status of the operation. It remains "InProgress"
     until the operation completes. At that point it will become "Unknown", "Failed", "Succeeded",
     or "CompletedWithWarnings.". Known values are: "Unknown", "InProgress", "Failed", "Succeeded",
     and "CompletedWithWarnings".
    :vartype status: str or ~azure.mgmt.compute.models.PatchOperationStatus
    :ivar assessment_activity_id: The activity ID of the operation that produced this result. It is
     used to correlate across CRP and extension logs.
    :vartype assessment_activity_id: str
    :ivar reboot_pending: The overall reboot status of the VM. It will be true when partially
     installed patches require a reboot to complete installation but the reboot has not yet
     occurred.
    :vartype reboot_pending: bool
    :ivar critical_and_security_patch_count: The number of critical or security patches that have
     been detected as available and not yet installed.
    :vartype critical_and_security_patch_count: int
    :ivar other_patch_count: The number of all available patches excluding critical and security.
    :vartype other_patch_count: int
    :ivar start_date_time: The UTC timestamp when the operation began.
    :vartype start_date_time: ~datetime.datetime
    :ivar available_patches: The list of patches that have been detected as available for
     installation.
    :vartype available_patches:
     list[~azure.mgmt.compute.models.VirtualMachineSoftwarePatchProperties]
    :ivar error: The errors that were encountered during execution of the operation. The details
     array contains the list of them.
    :vartype error: ~azure.mgmt.compute.models.ApiError
    """

    status: Optional[Union[str, "_models.PatchOperationStatus"]] = rest_field(visibility=["read"])
    """The overall success or failure status of the operation. It remains \"InProgress\" until the
     operation completes. At that point it will become \"Unknown\", \"Failed\", \"Succeeded\", or
     \"CompletedWithWarnings.\". Known values are: \"Unknown\", \"InProgress\", \"Failed\",
     \"Succeeded\", and \"CompletedWithWarnings\"."""
    assessment_activity_id: Optional[str] = rest_field(name="assessmentActivityId", visibility=["read"])
    """The activity ID of the operation that produced this result. It is used to correlate across CRP
     and extension logs."""
    reboot_pending: Optional[bool] = rest_field(name="rebootPending", visibility=["read"])
    """The overall reboot status of the VM. It will be true when partially installed patches require a
     reboot to complete installation but the reboot has not yet occurred."""
    critical_and_security_patch_count: Optional[int] = rest_field(
        name="criticalAndSecurityPatchCount", visibility=["read"]
    )
    """The number of critical or security patches that have been detected as available and not yet
     installed."""
    other_patch_count: Optional[int] = rest_field(name="otherPatchCount", visibility=["read"])
    """The number of all available patches excluding critical and security."""
    start_date_time: Optional[datetime.datetime] = rest_field(
        name="startDateTime", visibility=["read"], format="rfc3339"
    )
    """The UTC timestamp when the operation began."""
    available_patches: Optional[List["_models.VirtualMachineSoftwarePatchProperties"]] = rest_field(
        name="availablePatches", visibility=["read"]
    )
    """The list of patches that have been detected as available for installation."""
    error: Optional["_models.ApiError"] = rest_field(visibility=["read"])
    """The errors that were encountered during execution of the operation. The details array contains
     the list of them."""


class VirtualMachineCaptureParameters(_model_base.Model):
    """Capture Virtual Machine parameters.

    All required parameters must be populated in order to send to server.

    :ivar vhd_prefix: The captured virtual hard disk's name prefix. Required.
    :vartype vhd_prefix: str
    :ivar destination_container_name: The destination container name. Required.
    :vartype destination_container_name: str
    :ivar overwrite_vhds: Specifies whether to overwrite the destination virtual hard disk, in case
     of conflict. Required.
    :vartype overwrite_vhds: bool
    """

    vhd_prefix: str = rest_field(name="vhdPrefix")
    """The captured virtual hard disk's name prefix. Required."""
    destination_container_name: str = rest_field(name="destinationContainerName")
    """The destination container name. Required."""
    overwrite_vhds: bool = rest_field(name="overwriteVhds")
    """Specifies whether to overwrite the destination virtual hard disk, in case of conflict.
     Required."""

    @overload
    def __init__(
        self,
        *,
        vhd_prefix: str,
        destination_container_name: str,
        overwrite_vhds: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineCaptureResult(SubResource):
    """Output of virtual machine capture operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar schema: the schema of the captured virtual machine.
    :vartype schema: str
    :ivar content_version: the version of the content.
    :vartype content_version: str
    :ivar parameters: parameters of the captured virtual machine.
    :vartype parameters: any
    :ivar resources: a list of resource items of the captured virtual machine.
    :vartype resources: list[any]
    """

    schema: Optional[str] = rest_field(name="$schema", visibility=["read"])
    """the schema of the captured virtual machine."""
    content_version: Optional[str] = rest_field(name="contentVersion", visibility=["read"])
    """the version of the content."""
    parameters: Optional[Any] = rest_field(visibility=["read"])
    """parameters of the captured virtual machine."""
    resources: Optional[List[Any]] = rest_field(visibility=["read"])
    """a list of resource items of the captured virtual machine."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineExtension(TrackedResource):
    """Describes a Virtual Machine Extension.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a Virtual Machine Extension.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineExtensionProperties
    """

    properties: Optional["_models.VirtualMachineExtensionProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Extension."""

    __flattened_items = [
        "force_update_tag",
        "publisher",
        "type",
        "type_handler_version",
        "auto_upgrade_minor_version",
        "enable_automatic_upgrade",
        "settings",
        "protected_settings",
        "provisioning_state",
        "instance_view",
        "suppress_failures",
        "protected_settings_from_key_vault",
        "provision_after_extensions",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualMachineExtensionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineExtensionHandlerInstanceView(_model_base.Model):  # pylint: disable=name-too-long
    """The instance view of a virtual machine extension handler.

    :ivar type: Specifies the type of the extension; an example is "CustomScriptExtension".
    :vartype type: str
    :ivar type_handler_version: Specifies the version of the script handler.
    :vartype type_handler_version: str
    :ivar status: The extension handler status.
    :vartype status: ~azure.mgmt.compute.models.InstanceViewStatus
    """

    type: Optional[str] = rest_field()
    """Specifies the type of the extension; an example is \"CustomScriptExtension\"."""
    type_handler_version: Optional[str] = rest_field(name="typeHandlerVersion")
    """Specifies the version of the script handler."""
    status: Optional["_models.InstanceViewStatus"] = rest_field()
    """The extension handler status."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        type_handler_version: Optional[str] = None,
        status: Optional["_models.InstanceViewStatus"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineExtensionImage(TrackedResource):
    """Describes a Virtual Machine Extension Image.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a Virtual Machine Extension Image.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineExtensionImageProperties
    """

    properties: Optional["_models.VirtualMachineExtensionImageProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Extension Image."""

    __flattened_items = [
        "operating_system",
        "compute_role",
        "handler_schema",
        "vm_scale_set_enabled",
        "supports_multiple_extensions",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualMachineExtensionImageProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineExtensionImageProperties(_model_base.Model):
    """Describes the properties of a Virtual Machine Extension Image.


    :ivar operating_system: The operating system this extension supports. Required.
    :vartype operating_system: str
    :ivar compute_role: The type of role (IaaS or PaaS) this extension supports. Required.
    :vartype compute_role: str
    :ivar handler_schema: The schema defined by publisher, where extension consumers should provide
     settings in a matching schema. Required.
    :vartype handler_schema: str
    :ivar vm_scale_set_enabled: Whether the extension can be used on xRP VMScaleSets. By default
     existing extensions are usable on scalesets, but there might be cases where a publisher wants
     to explicitly indicate the extension is only enabled for CRP VMs but not VMSS.
    :vartype vm_scale_set_enabled: bool
    :ivar supports_multiple_extensions: Whether the handler can support multiple extensions.
    :vartype supports_multiple_extensions: bool
    """

    operating_system: str = rest_field(name="operatingSystem")
    """The operating system this extension supports. Required."""
    compute_role: str = rest_field(name="computeRole")
    """The type of role (IaaS or PaaS) this extension supports. Required."""
    handler_schema: str = rest_field(name="handlerSchema")
    """The schema defined by publisher, where extension consumers should provide settings in a
     matching schema. Required."""
    vm_scale_set_enabled: Optional[bool] = rest_field(name="vmScaleSetEnabled")
    """Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable
     on scalesets, but there might be cases where a publisher wants to explicitly indicate the
     extension is only enabled for CRP VMs but not VMSS."""
    supports_multiple_extensions: Optional[bool] = rest_field(name="supportsMultipleExtensions")
    """Whether the handler can support multiple extensions."""

    @overload
    def __init__(
        self,
        *,
        operating_system: str,
        compute_role: str,
        handler_schema: str,
        vm_scale_set_enabled: Optional[bool] = None,
        supports_multiple_extensions: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineExtensionInstanceView(_model_base.Model):
    """The instance view of a virtual machine extension.

    :ivar name: The virtual machine extension name.
    :vartype name: str
    :ivar type: Specifies the type of the extension; an example is "CustomScriptExtension".
    :vartype type: str
    :ivar type_handler_version: Specifies the version of the script handler.
    :vartype type_handler_version: str
    :ivar substatuses: The resource status information.
    :vartype substatuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    """

    name: Optional[str] = rest_field()
    """The virtual machine extension name."""
    type: Optional[str] = rest_field()
    """Specifies the type of the extension; an example is \"CustomScriptExtension\"."""
    type_handler_version: Optional[str] = rest_field(name="typeHandlerVersion")
    """Specifies the version of the script handler."""
    substatuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[str] = None,
        type_handler_version: Optional[str] = None,
        substatuses: Optional[List["_models.InstanceViewStatus"]] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineExtensionProperties(_model_base.Model):
    """Describes the properties of a Virtual Machine Extension.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar force_update_tag: How the extension handler should be forced to update even if the
     extension configuration has not changed.
    :vartype force_update_tag: str
    :ivar publisher: The name of the extension handler publisher.
    :vartype publisher: str
    :ivar type: Specifies the type of the extension; an example is "CustomScriptExtension".
    :vartype type: str
    :ivar type_handler_version: Specifies the version of the script handler.
    :vartype type_handler_version: str
    :ivar auto_upgrade_minor_version: Indicates whether the extension should use a newer minor
     version if one is available at deployment time. Once deployed, however, the extension will not
     upgrade minor versions unless redeployed, even with this property set to true.
    :vartype auto_upgrade_minor_version: bool
    :ivar enable_automatic_upgrade: Indicates whether the extension should be automatically
     upgraded by the platform if there is a newer version of the extension available.
    :vartype enable_automatic_upgrade: bool
    :ivar settings: Json formatted public settings for the extension.
    :vartype settings: any
    :ivar protected_settings: The extension can contain either protectedSettings or
     protectedSettingsFromKeyVault or no protected settings at all.
    :vartype protected_settings: any
    :ivar provisioning_state: The provisioning state, which only appears in the response.
    :vartype provisioning_state: str
    :ivar instance_view: The virtual machine extension instance view.
    :vartype instance_view: ~azure.mgmt.compute.models.VirtualMachineExtensionInstanceView
    :ivar suppress_failures: Indicates whether failures stemming from the extension will be
     suppressed (Operational failures such as not connecting to the VM will not be suppressed
     regardless of this value). The default is false.
    :vartype suppress_failures: bool
    :ivar protected_settings_from_key_vault: The extensions protected settings that are passed by
     reference, and consumed from key vault.
    :vartype protected_settings_from_key_vault: ~azure.mgmt.compute.models.KeyVaultSecretReference
    :ivar provision_after_extensions: Collection of extension names after which this extension
     needs to be provisioned.
    :vartype provision_after_extensions: list[str]
    """

    force_update_tag: Optional[str] = rest_field(name="forceUpdateTag")
    """How the extension handler should be forced to update even if the extension configuration has
     not changed."""
    publisher: Optional[str] = rest_field()
    """The name of the extension handler publisher."""
    type: Optional[str] = rest_field()
    """Specifies the type of the extension; an example is \"CustomScriptExtension\"."""
    type_handler_version: Optional[str] = rest_field(name="typeHandlerVersion")
    """Specifies the version of the script handler."""
    auto_upgrade_minor_version: Optional[bool] = rest_field(name="autoUpgradeMinorVersion")
    """Indicates whether the extension should use a newer minor version if one is available at
     deployment time. Once deployed, however, the extension will not upgrade minor versions unless
     redeployed, even with this property set to true."""
    enable_automatic_upgrade: Optional[bool] = rest_field(name="enableAutomaticUpgrade")
    """Indicates whether the extension should be automatically upgraded by the platform if there is a
     newer version of the extension available."""
    settings: Optional[Any] = rest_field()
    """Json formatted public settings for the extension."""
    protected_settings: Optional[Any] = rest_field(name="protectedSettings")
    """The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no
     protected settings at all."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state, which only appears in the response."""
    instance_view: Optional["_models.VirtualMachineExtensionInstanceView"] = rest_field(name="instanceView")
    """The virtual machine extension instance view."""
    suppress_failures: Optional[bool] = rest_field(name="suppressFailures")
    """Indicates whether failures stemming from the extension will be suppressed (Operational failures
     such as not connecting to the VM will not be suppressed regardless of this value). The default
     is false."""
    protected_settings_from_key_vault: Optional["_models.KeyVaultSecretReference"] = rest_field(
        name="protectedSettingsFromKeyVault"
    )
    """The extensions protected settings that are passed by reference, and consumed from key vault."""
    provision_after_extensions: Optional[List[str]] = rest_field(name="provisionAfterExtensions")
    """Collection of extension names after which this extension needs to be provisioned."""

    @overload
    def __init__(
        self,
        *,
        force_update_tag: Optional[str] = None,
        publisher: Optional[str] = None,
        type: Optional[str] = None,
        type_handler_version: Optional[str] = None,
        auto_upgrade_minor_version: Optional[bool] = None,
        enable_automatic_upgrade: Optional[bool] = None,
        settings: Optional[Any] = None,
        protected_settings: Optional[Any] = None,
        instance_view: Optional["_models.VirtualMachineExtensionInstanceView"] = None,
        suppress_failures: Optional[bool] = None,
        protected_settings_from_key_vault: Optional["_models.KeyVaultSecretReference"] = None,
        provision_after_extensions: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineExtensionsListResult(_model_base.Model):
    """The List Extension operation response.

    :ivar value: The list of extensions.
    :vartype value: list[~azure.mgmt.compute.models.VirtualMachineExtension]
    """

    value: Optional[List["_models.VirtualMachineExtension"]] = rest_field()
    """The list of extensions."""

    @overload
    def __init__(
        self,
        *,
        value: Optional[List["_models.VirtualMachineExtension"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineExtensionUpdate(UpdateResource):
    """Describes a Virtual Machine Extension.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Describes the properties of a Virtual Machine Extension.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineExtensionUpdateProperties
    """

    properties: Optional["_models.VirtualMachineExtensionUpdateProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Extension."""

    __flattened_items = [
        "force_update_tag",
        "publisher",
        "type",
        "type_handler_version",
        "auto_upgrade_minor_version",
        "enable_automatic_upgrade",
        "settings",
        "protected_settings",
        "suppress_failures",
        "protected_settings_from_key_vault",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualMachineExtensionUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineExtensionUpdateProperties(_model_base.Model):
    """Describes the properties of a Virtual Machine Extension.

    :ivar force_update_tag: How the extension handler should be forced to update even if the
     extension configuration has not changed.
    :vartype force_update_tag: str
    :ivar publisher: The name of the extension handler publisher.
    :vartype publisher: str
    :ivar type: Specifies the type of the extension; an example is "CustomScriptExtension".
    :vartype type: str
    :ivar type_handler_version: Specifies the version of the script handler.
    :vartype type_handler_version: str
    :ivar auto_upgrade_minor_version: Indicates whether the extension should use a newer minor
     version if one is available at deployment time. Once deployed, however, the extension will not
     upgrade minor versions unless redeployed, even with this property set to true.
    :vartype auto_upgrade_minor_version: bool
    :ivar enable_automatic_upgrade: Indicates whether the extension should be automatically
     upgraded by the platform if there is a newer version of the extension available.
    :vartype enable_automatic_upgrade: bool
    :ivar settings: Json formatted public settings for the extension.
    :vartype settings: any
    :ivar protected_settings: The extension can contain either protectedSettings or
     protectedSettingsFromKeyVault or no protected settings at all.
    :vartype protected_settings: any
    :ivar suppress_failures: Indicates whether failures stemming from the extension will be
     suppressed (Operational failures such as not connecting to the VM will not be suppressed
     regardless of this value). The default is false.
    :vartype suppress_failures: bool
    :ivar protected_settings_from_key_vault: The extensions protected settings that are passed by
     reference, and consumed from key vault.
    :vartype protected_settings_from_key_vault: ~azure.mgmt.compute.models.KeyVaultSecretReference
    """

    force_update_tag: Optional[str] = rest_field(name="forceUpdateTag")
    """How the extension handler should be forced to update even if the extension configuration has
     not changed."""
    publisher: Optional[str] = rest_field()
    """The name of the extension handler publisher."""
    type: Optional[str] = rest_field()
    """Specifies the type of the extension; an example is \"CustomScriptExtension\"."""
    type_handler_version: Optional[str] = rest_field(name="typeHandlerVersion")
    """Specifies the version of the script handler."""
    auto_upgrade_minor_version: Optional[bool] = rest_field(name="autoUpgradeMinorVersion")
    """Indicates whether the extension should use a newer minor version if one is available at
     deployment time. Once deployed, however, the extension will not upgrade minor versions unless
     redeployed, even with this property set to true."""
    enable_automatic_upgrade: Optional[bool] = rest_field(name="enableAutomaticUpgrade")
    """Indicates whether the extension should be automatically upgraded by the platform if there is a
     newer version of the extension available."""
    settings: Optional[Any] = rest_field()
    """Json formatted public settings for the extension."""
    protected_settings: Optional[Any] = rest_field(name="protectedSettings")
    """The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no
     protected settings at all."""
    suppress_failures: Optional[bool] = rest_field(name="suppressFailures")
    """Indicates whether failures stemming from the extension will be suppressed (Operational failures
     such as not connecting to the VM will not be suppressed regardless of this value). The default
     is false."""
    protected_settings_from_key_vault: Optional["_models.KeyVaultSecretReference"] = rest_field(
        name="protectedSettingsFromKeyVault"
    )
    """The extensions protected settings that are passed by reference, and consumed from key vault."""

    @overload
    def __init__(
        self,
        *,
        force_update_tag: Optional[str] = None,
        publisher: Optional[str] = None,
        type: Optional[str] = None,
        type_handler_version: Optional[str] = None,
        auto_upgrade_minor_version: Optional[bool] = None,
        enable_automatic_upgrade: Optional[bool] = None,
        settings: Optional[Any] = None,
        protected_settings: Optional[Any] = None,
        suppress_failures: Optional[bool] = None,
        protected_settings_from_key_vault: Optional["_models.KeyVaultSecretReference"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineHealthStatus(_model_base.Model):
    """The health status of the VM.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The health status information for the VM.
    :vartype status: ~azure.mgmt.compute.models.InstanceViewStatus
    """

    status: Optional["_models.InstanceViewStatus"] = rest_field(visibility=["read"])
    """The health status information for the VM."""


class VirtualMachineIdentity(_model_base.Model):
    """Identity for the virtual machine.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of virtual machine identity. This property will only be
     provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant id associated with the virtual machine. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of identity used for the virtual machine. The type 'SystemAssigned,
     UserAssigned' includes both an implicitly created identity and a set of user assigned
     identities. The type 'None' will remove any identities from the virtual machine. Known values
     are: "SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", and "None".
    :vartype type: str or ~azure.mgmt.compute.models.ResourceIdentityType
    :ivar user_assigned_identities: The list of user identities associated with the Virtual
     Machine. The user identity dictionary key references will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.  # pylint: disable=line-too-long
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.compute.models.UserAssignedIdentitiesValue]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal id of virtual machine identity. This property will only be provided for a system
     assigned identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant id associated with the virtual machine. This property will only be provided for a
     system assigned identity."""
    type: Optional[Union[str, "_models.ResourceIdentityType"]] = rest_field()
    """The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned'
     includes both an implicitly created identity and a set of user assigned identities. The type
     'None' will remove any identities from the virtual machine. Known values are:
     \"SystemAssigned\", \"UserAssigned\", \"SystemAssigned, UserAssigned\", and \"None\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentitiesValue"]] = rest_field(
        name="userAssignedIdentities"
    )
    """The list of user identities associated with the Virtual Machine. The user identity dictionary
     key references will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.  # pylint: disable=line-too-long"""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ResourceIdentityType"]] = None,
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentitiesValue"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineImageResource(SubResource):
    """Virtual machine image resource information.


    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar location: The supported Azure location of the resource. Required.
    :vartype location: str
    :ivar tags: Specifies the tags that are assigned to the virtual machine. For more information
     about using tags, see `Using tags to organize your Azure resources
     <https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md>`_.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the Virtual Machine.
    :vartype extended_location: ~azure.mgmt.compute.models.ExtendedLocation
    """

    name: str = rest_field()
    """The name of the resource. Required."""
    location: str = rest_field()
    """The supported Azure location of the resource. Required."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Specifies the tags that are assigned to the virtual machine. For more information about using
     tags, see `Using tags to organize your Azure resources
     <https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md>`_."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(name="extendedLocation")
    """The extended location of the Virtual Machine."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        location: str,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        tags: Optional[Dict[str, str]] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineImage(VirtualMachineImageResource):
    """Describes a Virtual Machine Image.


    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: The name of the resource. Required.
    :vartype name: str
    :ivar location: The supported Azure location of the resource. Required.
    :vartype location: str
    :ivar tags: Specifies the tags that are assigned to the virtual machine. For more information
     about using tags, see `Using tags to organize your Azure resources
     <https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md>`_.
    :vartype tags: dict[str, str]
    :ivar extended_location: The extended location of the Virtual Machine.
    :vartype extended_location: ~azure.mgmt.compute.models.ExtendedLocation
    :ivar properties: Describes the properties of a Virtual Machine Image.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineImageProperties
    """

    properties: Optional["_models.VirtualMachineImageProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Image."""

    __flattened_items = [
        "plan",
        "os_disk_image",
        "data_disk_images",
        "automatic_os_upgrade_properties",
        "hyper_v_generation",
        "disallowed",
        "features",
        "architecture",
        "image_deprecation_status",
    ]

    @overload
    def __init__(
        self,
        *,
        name: str,
        location: str,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        tags: Optional[Dict[str, str]] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
        properties: Optional["_models.VirtualMachineImageProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineImageFeature(_model_base.Model):
    """Specifies additional capabilities supported by the image.

    :ivar name: The name of the feature.
    :vartype name: str
    :ivar value: The corresponding value for the feature.
    :vartype value: str
    """

    name: Optional[str] = rest_field()
    """The name of the feature."""
    value: Optional[str] = rest_field()
    """The corresponding value for the feature."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineImageProperties(_model_base.Model):
    """Describes the properties of a Virtual Machine Image.

    :ivar plan: Used for establishing the purchase context of any 3rd Party artifact through
     MarketPlace.
    :vartype plan: ~azure.mgmt.compute.models.PurchasePlan
    :ivar os_disk_image: Contains the os disk image information.
    :vartype os_disk_image: ~azure.mgmt.compute.models.OSDiskImage
    :ivar data_disk_images: The list of data disk images information.
    :vartype data_disk_images: list[~azure.mgmt.compute.models.DataDiskImage]
    :ivar automatic_os_upgrade_properties: Describes automatic OS upgrade properties on the image.
    :vartype automatic_os_upgrade_properties:
     ~azure.mgmt.compute.models.AutomaticOSUpgradeProperties
    :ivar hyper_v_generation: Specifies the HyperVGeneration Type. Known values are: "V1" and "V2".
    :vartype hyper_v_generation: str or ~azure.mgmt.compute.models.HyperVGenerationTypes
    :ivar disallowed: Specifies disallowed configuration for the VirtualMachine created from the
     image.
    :vartype disallowed: ~azure.mgmt.compute.models.DisallowedConfiguration
    :ivar features:
    :vartype features: list[~azure.mgmt.compute.models.VirtualMachineImageFeature]
    :ivar architecture: Specifies the Architecture Type. Known values are: "x64" and "Arm64".
    :vartype architecture: str or ~azure.mgmt.compute.models.ArchitectureTypes
    :ivar image_deprecation_status: Describes image deprecation status properties on the image.
    :vartype image_deprecation_status: ~azure.mgmt.compute.models.ImageDeprecationStatus
    """

    plan: Optional["_models.PurchasePlan"] = rest_field()
    """Used for establishing the purchase context of any 3rd Party artifact through MarketPlace."""
    os_disk_image: Optional["_models.OSDiskImage"] = rest_field(name="osDiskImage")
    """Contains the os disk image information."""
    data_disk_images: Optional[List["_models.DataDiskImage"]] = rest_field(name="dataDiskImages")
    """The list of data disk images information."""
    automatic_os_upgrade_properties: Optional["_models.AutomaticOSUpgradeProperties"] = rest_field(
        name="automaticOSUpgradeProperties"
    )
    """Describes automatic OS upgrade properties on the image."""
    hyper_v_generation: Optional[Union[str, "_models.HyperVGenerationTypes"]] = rest_field(name="hyperVGeneration")
    """Specifies the HyperVGeneration Type. Known values are: \"V1\" and \"V2\"."""
    disallowed: Optional["_models.DisallowedConfiguration"] = rest_field()
    """Specifies disallowed configuration for the VirtualMachine created from the image."""
    features: Optional[List["_models.VirtualMachineImageFeature"]] = rest_field()
    architecture: Optional[Union[str, "_models.ArchitectureTypes"]] = rest_field()
    """Specifies the Architecture Type. Known values are: \"x64\" and \"Arm64\"."""
    image_deprecation_status: Optional["_models.ImageDeprecationStatus"] = rest_field(name="imageDeprecationStatus")
    """Describes image deprecation status properties on the image."""

    @overload
    def __init__(
        self,
        *,
        plan: Optional["_models.PurchasePlan"] = None,
        os_disk_image: Optional["_models.OSDiskImage"] = None,
        data_disk_images: Optional[List["_models.DataDiskImage"]] = None,
        automatic_os_upgrade_properties: Optional["_models.AutomaticOSUpgradeProperties"] = None,
        hyper_v_generation: Optional[Union[str, "_models.HyperVGenerationTypes"]] = None,
        disallowed: Optional["_models.DisallowedConfiguration"] = None,
        features: Optional[List["_models.VirtualMachineImageFeature"]] = None,
        architecture: Optional[Union[str, "_models.ArchitectureTypes"]] = None,
        image_deprecation_status: Optional["_models.ImageDeprecationStatus"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineInstallPatchesParameters(_model_base.Model):
    """Input for InstallPatches as directly received by the API.

    All required parameters must be populated in order to send to server.

    :ivar maximum_duration: Specifies the maximum amount of time that the operation will run. It
     must be an ISO 8601-compliant duration string such as PT4H (4 hours).
    :vartype maximum_duration: ~datetime.timedelta
    :ivar reboot_setting: Defines when it is acceptable to reboot a VM during a software update
     operation. Required. Known values are: "IfRequired", "Never", and "Always".
    :vartype reboot_setting: str or ~azure.mgmt.compute.models.VMGuestPatchRebootSetting
    :ivar windows_parameters: Input for InstallPatches on a Windows VM, as directly received by the
     API.
    :vartype windows_parameters: ~azure.mgmt.compute.models.WindowsParameters
    :ivar linux_parameters: Input for InstallPatches on a Linux VM, as directly received by the
     API.
    :vartype linux_parameters: ~azure.mgmt.compute.models.LinuxParameters
    """

    maximum_duration: Optional[datetime.timedelta] = rest_field(name="maximumDuration")
    """Specifies the maximum amount of time that the operation will run. It must be an ISO
     8601-compliant duration string such as PT4H (4 hours)."""
    reboot_setting: Union[str, "_models.VMGuestPatchRebootSetting"] = rest_field(name="rebootSetting")
    """Defines when it is acceptable to reboot a VM during a software update operation. Required.
     Known values are: \"IfRequired\", \"Never\", and \"Always\"."""
    windows_parameters: Optional["_models.WindowsParameters"] = rest_field(name="windowsParameters")
    """Input for InstallPatches on a Windows VM, as directly received by the API."""
    linux_parameters: Optional["_models.LinuxParameters"] = rest_field(name="linuxParameters")
    """Input for InstallPatches on a Linux VM, as directly received by the API."""

    @overload
    def __init__(
        self,
        *,
        reboot_setting: Union[str, "_models.VMGuestPatchRebootSetting"],
        maximum_duration: Optional[datetime.timedelta] = None,
        windows_parameters: Optional["_models.WindowsParameters"] = None,
        linux_parameters: Optional["_models.LinuxParameters"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineInstallPatchesResult(_model_base.Model):
    """The result summary of an installation operation.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The overall success or failure status of the operation. It remains "InProgress"
     until the operation completes. At that point it will become "Failed", "Succeeded", "Unknown" or
     "CompletedWithWarnings.". Known values are: "Unknown", "InProgress", "Failed", "Succeeded", and
     "CompletedWithWarnings".
    :vartype status: str or ~azure.mgmt.compute.models.PatchOperationStatus
    :ivar installation_activity_id: The activity ID of the operation that produced this result. It
     is used to correlate across CRP and extension logs.
    :vartype installation_activity_id: str
    :ivar reboot_status: The reboot state of the VM following completion of the operation. Known
     values are: "Unknown", "NotNeeded", "Required", "Started", "Failed", and "Completed".
    :vartype reboot_status: str or ~azure.mgmt.compute.models.VMGuestPatchRebootStatus
    :ivar maintenance_window_exceeded: Whether the operation ran out of time before it completed
     all its intended actions.
    :vartype maintenance_window_exceeded: bool
    :ivar excluded_patch_count: The number of patches that were not installed due to the user
     blocking their installation.
    :vartype excluded_patch_count: int
    :ivar not_selected_patch_count: The number of patches that were detected as available for
     install, but did not meet the operation's criteria.
    :vartype not_selected_patch_count: int
    :ivar pending_patch_count: The number of patches that were identified as meeting the
     installation criteria, but were not able to be installed. Typically this happens when
     maintenanceWindowExceeded == true.
    :vartype pending_patch_count: int
    :ivar installed_patch_count: The number of patches successfully installed.
    :vartype installed_patch_count: int
    :ivar failed_patch_count: The number of patches that could not be installed due to some issue.
     See errors for details.
    :vartype failed_patch_count: int
    :ivar patches: The patches that were installed during the operation.
    :vartype patches: list[~azure.mgmt.compute.models.PatchInstallationDetail]
    :ivar start_date_time: The UTC timestamp when the operation began.
    :vartype start_date_time: ~datetime.datetime
    :ivar error: The errors that were encountered during execution of the operation. The details
     array contains the list of them.
    :vartype error: ~azure.mgmt.compute.models.ApiError
    """

    status: Optional[Union[str, "_models.PatchOperationStatus"]] = rest_field(visibility=["read"])
    """The overall success or failure status of the operation. It remains \"InProgress\" until the
     operation completes. At that point it will become \"Failed\", \"Succeeded\", \"Unknown\" or
     \"CompletedWithWarnings.\". Known values are: \"Unknown\", \"InProgress\", \"Failed\",
     \"Succeeded\", and \"CompletedWithWarnings\"."""
    installation_activity_id: Optional[str] = rest_field(name="installationActivityId", visibility=["read"])
    """The activity ID of the operation that produced this result. It is used to correlate across CRP
     and extension logs."""
    reboot_status: Optional[Union[str, "_models.VMGuestPatchRebootStatus"]] = rest_field(
        name="rebootStatus", visibility=["read"]
    )
    """The reboot state of the VM following completion of the operation. Known values are:
     \"Unknown\", \"NotNeeded\", \"Required\", \"Started\", \"Failed\", and \"Completed\"."""
    maintenance_window_exceeded: Optional[bool] = rest_field(name="maintenanceWindowExceeded", visibility=["read"])
    """Whether the operation ran out of time before it completed all its intended actions."""
    excluded_patch_count: Optional[int] = rest_field(name="excludedPatchCount", visibility=["read"])
    """The number of patches that were not installed due to the user blocking their installation."""
    not_selected_patch_count: Optional[int] = rest_field(name="notSelectedPatchCount", visibility=["read"])
    """The number of patches that were detected as available for install, but did not meet the
     operation's criteria."""
    pending_patch_count: Optional[int] = rest_field(name="pendingPatchCount", visibility=["read"])
    """The number of patches that were identified as meeting the installation criteria, but were not
     able to be installed. Typically this happens when maintenanceWindowExceeded == true."""
    installed_patch_count: Optional[int] = rest_field(name="installedPatchCount", visibility=["read"])
    """The number of patches successfully installed."""
    failed_patch_count: Optional[int] = rest_field(name="failedPatchCount", visibility=["read"])
    """The number of patches that could not be installed due to some issue. See errors for details."""
    patches: Optional[List["_models.PatchInstallationDetail"]] = rest_field(visibility=["read"])
    """The patches that were installed during the operation."""
    start_date_time: Optional[datetime.datetime] = rest_field(
        name="startDateTime", visibility=["read"], format="rfc3339"
    )
    """The UTC timestamp when the operation began."""
    error: Optional["_models.ApiError"] = rest_field(visibility=["read"])
    """The errors that were encountered during execution of the operation. The details array contains
     the list of them."""


class VirtualMachineInstanceView(_model_base.Model):
    """The instance view of a virtual machine.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar platform_update_domain: Specifies the update domain of the virtual machine.
    :vartype platform_update_domain: int
    :ivar platform_fault_domain: Specifies the fault domain of the virtual machine.
    :vartype platform_fault_domain: int
    :ivar computer_name: The computer name assigned to the virtual machine.
    :vartype computer_name: str
    :ivar os_name: The Operating System running on the virtual machine.
    :vartype os_name: str
    :ivar os_version: The version of Operating System running on the virtual machine.
    :vartype os_version: str
    :ivar hyper_v_generation: Specifies the HyperVGeneration Type associated with a resource. Known
     values are: "V1" and "V2".
    :vartype hyper_v_generation: str or ~azure.mgmt.compute.models.HyperVGenerationType
    :ivar rdp_thumb_print: The Remote desktop certificate thumbprint.
    :vartype rdp_thumb_print: str
    :ivar vm_agent: The VM Agent running on the virtual machine.
    :vartype vm_agent: ~azure.mgmt.compute.models.VirtualMachineAgentInstanceView
    :ivar maintenance_redeploy_status: The Maintenance Operation status on the virtual machine.
    :vartype maintenance_redeploy_status: ~azure.mgmt.compute.models.MaintenanceRedeployStatus
    :ivar disks: The virtual machine disk information.
    :vartype disks: list[~azure.mgmt.compute.models.DiskInstanceView]
    :ivar extensions: The extensions information.
    :vartype extensions: list[~azure.mgmt.compute.models.VirtualMachineExtensionInstanceView]
    :ivar vm_health: The health status for the VM.
    :vartype vm_health: ~azure.mgmt.compute.models.VirtualMachineHealthStatus
    :ivar boot_diagnostics: Boot Diagnostics is a debugging feature which allows you to view
     Console Output and Screenshot to diagnose VM status. You can easily view the output of your
     console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
    :vartype boot_diagnostics: ~azure.mgmt.compute.models.BootDiagnosticsInstanceView
    :ivar assigned_host: Resource id of the dedicated host, on which the virtual machine is
     allocated through automatic placement, when the virtual machine is associated with a dedicated
     host group that has automatic placement enabled. Minimum api-version: 2020-06-01.
    :vartype assigned_host: str
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    :ivar patch_status: [Preview Feature] The status of virtual machine patch operations.
    :vartype patch_status: ~azure.mgmt.compute.models.VirtualMachinePatchStatus
    :ivar is_vm_in_standby_pool: [Preview Feature] Specifies whether the VM is currently in or out
     of the Standby Pool.
    :vartype is_vm_in_standby_pool: bool
    """

    platform_update_domain: Optional[int] = rest_field(name="platformUpdateDomain")
    """Specifies the update domain of the virtual machine."""
    platform_fault_domain: Optional[int] = rest_field(name="platformFaultDomain")
    """Specifies the fault domain of the virtual machine."""
    computer_name: Optional[str] = rest_field(name="computerName")
    """The computer name assigned to the virtual machine."""
    os_name: Optional[str] = rest_field(name="osName")
    """The Operating System running on the virtual machine."""
    os_version: Optional[str] = rest_field(name="osVersion")
    """The version of Operating System running on the virtual machine."""
    hyper_v_generation: Optional[Union[str, "_models.HyperVGenerationType"]] = rest_field(name="hyperVGeneration")
    """Specifies the HyperVGeneration Type associated with a resource. Known values are: \"V1\" and
     \"V2\"."""
    rdp_thumb_print: Optional[str] = rest_field(name="rdpThumbPrint")
    """The Remote desktop certificate thumbprint."""
    vm_agent: Optional["_models.VirtualMachineAgentInstanceView"] = rest_field(name="vmAgent")
    """The VM Agent running on the virtual machine."""
    maintenance_redeploy_status: Optional["_models.MaintenanceRedeployStatus"] = rest_field(
        name="maintenanceRedeployStatus"
    )
    """The Maintenance Operation status on the virtual machine."""
    disks: Optional[List["_models.DiskInstanceView"]] = rest_field()
    """The virtual machine disk information."""
    extensions: Optional[List["_models.VirtualMachineExtensionInstanceView"]] = rest_field()
    """The extensions information."""
    vm_health: Optional["_models.VirtualMachineHealthStatus"] = rest_field(name="vmHealth", visibility=["read"])
    """The health status for the VM."""
    boot_diagnostics: Optional["_models.BootDiagnosticsInstanceView"] = rest_field(name="bootDiagnostics")
    """Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot
     to diagnose VM status. You can easily view the output of your console log. Azure also enables
     you to see a screenshot of the VM from the hypervisor."""
    assigned_host: Optional[str] = rest_field(name="assignedHost", visibility=["read"])
    """Resource id of the dedicated host, on which the virtual machine is allocated through automatic
     placement, when the virtual machine is associated with a dedicated host group that has
     automatic placement enabled. Minimum api-version: 2020-06-01."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""
    patch_status: Optional["_models.VirtualMachinePatchStatus"] = rest_field(name="patchStatus")
    """[Preview Feature] The status of virtual machine patch operations."""
    is_vm_in_standby_pool: Optional[bool] = rest_field(name="isVMInStandbyPool", visibility=["read"])
    """[Preview Feature] Specifies whether the VM is currently in or out of the Standby Pool."""

    @overload
    def __init__(
        self,
        *,
        platform_update_domain: Optional[int] = None,
        platform_fault_domain: Optional[int] = None,
        computer_name: Optional[str] = None,
        os_name: Optional[str] = None,
        os_version: Optional[str] = None,
        hyper_v_generation: Optional[Union[str, "_models.HyperVGenerationType"]] = None,
        rdp_thumb_print: Optional[str] = None,
        vm_agent: Optional["_models.VirtualMachineAgentInstanceView"] = None,
        maintenance_redeploy_status: Optional["_models.MaintenanceRedeployStatus"] = None,
        disks: Optional[List["_models.DiskInstanceView"]] = None,
        extensions: Optional[List["_models.VirtualMachineExtensionInstanceView"]] = None,
        boot_diagnostics: Optional["_models.BootDiagnosticsInstanceView"] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
        patch_status: Optional["_models.VirtualMachinePatchStatus"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineIpTag(_model_base.Model):
    """Contains the IP tag associated with the public IP address.

    :ivar ip_tag_type: IP tag type. Example: FirstPartyUsage.
    :vartype ip_tag_type: str
    :ivar tag: IP tag associated with the public IP. Example: SQL, Storage etc.
    :vartype tag: str
    """

    ip_tag_type: Optional[str] = rest_field(name="ipTagType")
    """IP tag type. Example: FirstPartyUsage."""
    tag: Optional[str] = rest_field()
    """IP tag associated with the public IP. Example: SQL, Storage etc."""

    @overload
    def __init__(
        self,
        *,
        ip_tag_type: Optional[str] = None,
        tag: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineNetworkInterfaceConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine network interface configurations.


    :ivar name: The network interface configuration name. Required.
    :vartype name: str
    :ivar properties: Describes a virtual machine network profile's IP configuration.
    :vartype properties:
     ~azure.mgmt.compute.models.VirtualMachineNetworkInterfaceConfigurationProperties
    """

    name: str = rest_field()
    """The network interface configuration name. Required."""
    properties: Optional["_models.VirtualMachineNetworkInterfaceConfigurationProperties"] = rest_field()
    """Describes a virtual machine network profile's IP configuration."""

    __flattened_items = [
        "primary",
        "delete_option",
        "enable_accelerated_networking",
        "disable_tcp_state_tracking",
        "enable_fpga",
        "enable_ip_forwarding",
        "network_security_group",
        "dns_settings",
        "ip_configurations",
        "dscp_configuration",
        "auxiliary_mode",
        "auxiliary_sku",
    ]

    @overload
    def __init__(
        self,
        *,
        name: str,
        properties: Optional["_models.VirtualMachineNetworkInterfaceConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineNetworkInterfaceConfigurationProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine network profile's IP configuration.


    :ivar primary: Specifies the primary network interface in case the virtual machine has more
     than 1 network interface.
    :vartype primary: bool
    :ivar delete_option: Specify what happens to the network interface when the VM is deleted.
     Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DeleteOptions
    :ivar enable_accelerated_networking: Specifies whether the network interface is accelerated
     networking-enabled.
    :vartype enable_accelerated_networking: bool
    :ivar disable_tcp_state_tracking: Specifies whether the network interface is disabled for tcp
     state tracking.
    :vartype disable_tcp_state_tracking: bool
    :ivar enable_fpga: Specifies whether the network interface is FPGA networking-enabled.
    :vartype enable_fpga: bool
    :ivar enable_ip_forwarding: Whether IP forwarding enabled on this NIC.
    :vartype enable_ip_forwarding: bool
    :ivar network_security_group: The network security group.
    :vartype network_security_group: ~azure.mgmt.compute.models.SubResource
    :ivar dns_settings: The dns settings to be applied on the network interfaces.
    :vartype dns_settings:
     ~azure.mgmt.compute.models.VirtualMachineNetworkInterfaceDnsSettingsConfiguration
    :ivar ip_configurations: Specifies the IP configurations of the network interface. Required.
    :vartype ip_configurations:
     list[~azure.mgmt.compute.models.VirtualMachineNetworkInterfaceIPConfiguration]
    :ivar dscp_configuration:
    :vartype dscp_configuration: ~azure.mgmt.compute.models.SubResource
    :ivar auxiliary_mode: Specifies whether the Auxiliary mode is enabled for the Network Interface
     resource. Known values are: "None", "AcceleratedConnections", and "Floating".
    :vartype auxiliary_mode: str or ~azure.mgmt.compute.models.NetworkInterfaceAuxiliaryMode
    :ivar auxiliary_sku: Specifies whether the Auxiliary sku is enabled for the Network Interface
     resource. Known values are: "None", "A1", "A2", "A4", and "A8".
    :vartype auxiliary_sku: str or ~azure.mgmt.compute.models.NetworkInterfaceAuxiliarySku
    """

    primary: Optional[bool] = rest_field()
    """Specifies the primary network interface in case the virtual machine has more than 1 network
     interface."""
    delete_option: Optional[Union[str, "_models.DeleteOptions"]] = rest_field(name="deleteOption")
    """Specify what happens to the network interface when the VM is deleted. Known values are:
     \"Delete\" and \"Detach\"."""
    enable_accelerated_networking: Optional[bool] = rest_field(name="enableAcceleratedNetworking")
    """Specifies whether the network interface is accelerated networking-enabled."""
    disable_tcp_state_tracking: Optional[bool] = rest_field(name="disableTcpStateTracking")
    """Specifies whether the network interface is disabled for tcp state tracking."""
    enable_fpga: Optional[bool] = rest_field(name="enableFpga")
    """Specifies whether the network interface is FPGA networking-enabled."""
    enable_ip_forwarding: Optional[bool] = rest_field(name="enableIPForwarding")
    """Whether IP forwarding enabled on this NIC."""
    network_security_group: Optional["_models.SubResource"] = rest_field(name="networkSecurityGroup")
    """The network security group."""
    dns_settings: Optional["_models.VirtualMachineNetworkInterfaceDnsSettingsConfiguration"] = rest_field(
        name="dnsSettings"
    )
    """The dns settings to be applied on the network interfaces."""
    ip_configurations: List["_models.VirtualMachineNetworkInterfaceIPConfiguration"] = rest_field(
        name="ipConfigurations"
    )
    """Specifies the IP configurations of the network interface. Required."""
    dscp_configuration: Optional["_models.SubResource"] = rest_field(name="dscpConfiguration")
    auxiliary_mode: Optional[Union[str, "_models.NetworkInterfaceAuxiliaryMode"]] = rest_field(name="auxiliaryMode")
    """Specifies whether the Auxiliary mode is enabled for the Network Interface resource. Known
     values are: \"None\", \"AcceleratedConnections\", and \"Floating\"."""
    auxiliary_sku: Optional[Union[str, "_models.NetworkInterfaceAuxiliarySku"]] = rest_field(name="auxiliarySku")
    """Specifies whether the Auxiliary sku is enabled for the Network Interface resource. Known values
     are: \"None\", \"A1\", \"A2\", \"A4\", and \"A8\"."""

    @overload
    def __init__(
        self,
        *,
        ip_configurations: List["_models.VirtualMachineNetworkInterfaceIPConfiguration"],
        primary: Optional[bool] = None,
        delete_option: Optional[Union[str, "_models.DeleteOptions"]] = None,
        enable_accelerated_networking: Optional[bool] = None,
        disable_tcp_state_tracking: Optional[bool] = None,
        enable_fpga: Optional[bool] = None,
        enable_ip_forwarding: Optional[bool] = None,
        network_security_group: Optional["_models.SubResource"] = None,
        dns_settings: Optional["_models.VirtualMachineNetworkInterfaceDnsSettingsConfiguration"] = None,
        dscp_configuration: Optional["_models.SubResource"] = None,
        auxiliary_mode: Optional[Union[str, "_models.NetworkInterfaceAuxiliaryMode"]] = None,
        auxiliary_sku: Optional[Union[str, "_models.NetworkInterfaceAuxiliarySku"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineNetworkInterfaceDnsSettingsConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machines network configuration's DNS settings.

    :ivar dns_servers: List of DNS servers IP addresses.
    :vartype dns_servers: list[str]
    """

    dns_servers: Optional[List[str]] = rest_field(name="dnsServers")
    """List of DNS servers IP addresses."""

    @overload
    def __init__(
        self,
        *,
        dns_servers: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineNetworkInterfaceIPConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine network profile's IP configuration.


    :ivar name: The IP configuration name. Required.
    :vartype name: str
    :ivar properties: Describes a virtual machine network interface IP configuration properties.
    :vartype properties:
     ~azure.mgmt.compute.models.VirtualMachineNetworkInterfaceIPConfigurationProperties
    """

    name: str = rest_field()
    """The IP configuration name. Required."""
    properties: Optional["_models.VirtualMachineNetworkInterfaceIPConfigurationProperties"] = rest_field()
    """Describes a virtual machine network interface IP configuration properties."""

    __flattened_items = [
        "subnet",
        "primary",
        "public_ip_address_configuration",
        "private_ip_address_version",
        "application_security_groups",
        "application_gateway_backend_address_pools",
        "load_balancer_backend_address_pools",
    ]

    @overload
    def __init__(
        self,
        *,
        name: str,
        properties: Optional["_models.VirtualMachineNetworkInterfaceIPConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineNetworkInterfaceIPConfigurationProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine network interface IP configuration properties.

    :ivar subnet: Specifies the identifier of the subnet.
    :vartype subnet: ~azure.mgmt.compute.models.SubResource
    :ivar primary: Specifies the primary network interface in case the virtual machine has more
     than 1 network interface.
    :vartype primary: bool
    :ivar public_ip_address_configuration: The publicIPAddressConfiguration.
    :vartype public_ip_address_configuration:
     ~azure.mgmt.compute.models.VirtualMachinePublicIPAddressConfiguration
    :ivar private_ip_address_version: Available from Api-Version 2017-03-30 onwards, it represents
     whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible
     values are: 'IPv4' and 'IPv6'. Known values are: "IPv4" and "IPv6".
    :vartype private_ip_address_version: str or ~azure.mgmt.compute.models.IPVersions
    :ivar application_security_groups: Specifies an array of references to application security
     group.
    :vartype application_security_groups: list[~azure.mgmt.compute.models.SubResource]
    :ivar application_gateway_backend_address_pools: Specifies an array of references to backend
     address pools of application gateways. A virtual machine can reference backend address pools of
     multiple application gateways. Multiple virtual machines cannot use the same application
     gateway.
    :vartype application_gateway_backend_address_pools:
     list[~azure.mgmt.compute.models.SubResource]
    :ivar load_balancer_backend_address_pools: Specifies an array of references to backend address
     pools of load balancers. A virtual machine can reference backend address pools of one public
     and one internal load balancer. [Multiple virtual machines cannot use the same basic sku load
     balancer].
    :vartype load_balancer_backend_address_pools: list[~azure.mgmt.compute.models.SubResource]
    """

    subnet: Optional["_models.SubResource"] = rest_field()
    """Specifies the identifier of the subnet."""
    primary: Optional[bool] = rest_field()
    """Specifies the primary network interface in case the virtual machine has more than 1 network
     interface."""
    public_ip_address_configuration: Optional["_models.VirtualMachinePublicIPAddressConfiguration"] = rest_field(
        name="publicIPAddressConfiguration"
    )
    """The publicIPAddressConfiguration."""
    private_ip_address_version: Optional[Union[str, "_models.IPVersions"]] = rest_field(name="privateIPAddressVersion")
    """Available from Api-Version 2017-03-30 onwards, it represents whether the specific
     ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and
     'IPv6'. Known values are: \"IPv4\" and \"IPv6\"."""
    application_security_groups: Optional[List["_models.SubResource"]] = rest_field(name="applicationSecurityGroups")
    """Specifies an array of references to application security group."""
    application_gateway_backend_address_pools: Optional[List["_models.SubResource"]] = rest_field(
        name="applicationGatewayBackendAddressPools"
    )
    """Specifies an array of references to backend address pools of application gateways. A virtual
     machine can reference backend address pools of multiple application gateways. Multiple virtual
     machines cannot use the same application gateway."""
    load_balancer_backend_address_pools: Optional[List["_models.SubResource"]] = rest_field(
        name="loadBalancerBackendAddressPools"
    )
    """Specifies an array of references to backend address pools of load balancers. A virtual machine
     can reference backend address pools of one public and one internal load balancer. [Multiple
     virtual machines cannot use the same basic sku load balancer]."""

    @overload
    def __init__(
        self,
        *,
        subnet: Optional["_models.SubResource"] = None,
        primary: Optional[bool] = None,
        public_ip_address_configuration: Optional["_models.VirtualMachinePublicIPAddressConfiguration"] = None,
        private_ip_address_version: Optional[Union[str, "_models.IPVersions"]] = None,
        application_security_groups: Optional[List["_models.SubResource"]] = None,
        application_gateway_backend_address_pools: Optional[List["_models.SubResource"]] = None,
        load_balancer_backend_address_pools: Optional[List["_models.SubResource"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachinePatchStatus(_model_base.Model):
    """The status of virtual machine patch operations.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar available_patch_summary: The available patch summary of the latest assessment operation
     for the virtual machine.
    :vartype available_patch_summary: ~azure.mgmt.compute.models.AvailablePatchSummary
    :ivar last_patch_installation_summary: The installation summary of the latest installation
     operation for the virtual machine.
    :vartype last_patch_installation_summary:
     ~azure.mgmt.compute.models.LastPatchInstallationSummary
    :ivar configuration_statuses: The enablement status of the specified patchMode.
    :vartype configuration_statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    """

    available_patch_summary: Optional["_models.AvailablePatchSummary"] = rest_field(name="availablePatchSummary")
    """The available patch summary of the latest assessment operation for the virtual machine."""
    last_patch_installation_summary: Optional["_models.LastPatchInstallationSummary"] = rest_field(
        name="lastPatchInstallationSummary"
    )
    """The installation summary of the latest installation operation for the virtual machine."""
    configuration_statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field(
        name="configurationStatuses", visibility=["read"]
    )
    """The enablement status of the specified patchMode."""

    @overload
    def __init__(
        self,
        *,
        available_patch_summary: Optional["_models.AvailablePatchSummary"] = None,
        last_patch_installation_summary: Optional["_models.LastPatchInstallationSummary"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineProperties(_model_base.Model):
    """Describes the properties of a Virtual Machine.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar hardware_profile: Specifies the hardware settings for the virtual machine.
    :vartype hardware_profile: ~azure.mgmt.compute.models.HardwareProfile
    :ivar scheduled_events_policy: Specifies Redeploy, Reboot and
     ScheduledEventsAdditionalPublishingTargets Scheduled Event related configurations for the
     virtual machine.
    :vartype scheduled_events_policy: ~azure.mgmt.compute.models.ScheduledEventsPolicy
    :ivar storage_profile: Specifies the storage settings for the virtual machine disks.
    :vartype storage_profile: ~azure.mgmt.compute.models.StorageProfile
    :ivar additional_capabilities: Specifies additional capabilities enabled or disabled on the
     virtual machine.
    :vartype additional_capabilities: ~azure.mgmt.compute.models.AdditionalCapabilities
    :ivar os_profile: Specifies the operating system settings used while creating the virtual
     machine. Some of the settings cannot be changed once VM is provisioned.
    :vartype os_profile: ~azure.mgmt.compute.models.OSProfile
    :ivar network_profile: Specifies the network interfaces of the virtual machine.
    :vartype network_profile: ~azure.mgmt.compute.models.NetworkProfile
    :ivar security_profile: Specifies the Security related profile settings for the virtual
     machine.
    :vartype security_profile: ~azure.mgmt.compute.models.SecurityProfile
    :ivar diagnostics_profile: Specifies the boot diagnostic settings state. Minimum api-version:
     2015-06-15.
    :vartype diagnostics_profile: ~azure.mgmt.compute.models.DiagnosticsProfile
    :ivar availability_set: Specifies information about the availability set that the virtual
     machine should be assigned to. Virtual machines specified in the same availability set are
     allocated to different nodes to maximize availability. For more information about availability
     sets, see `Availability sets overview
     <https://docs.microsoft.com/azure/virtual-machines/availability-set-overview>`_. For more
     information on Azure planned maintenance, see `Maintenance and updates for Virtual Machines in
     Azure <https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates>`_. Currently,
     a VM can only be added to availability set at creation time. The availability set to which the
     VM is being added should be under the same resource group as the availability set resource. An
     existing VM cannot be added to an availability set. This property cannot exist along with a
     non-null properties.virtualMachineScaleSet reference.
    :vartype availability_set: ~azure.mgmt.compute.models.SubResource
    :ivar virtual_machine_scale_set: Specifies information about the virtual machine scale set that
     the virtual machine should be assigned to. Virtual machines specified in the same virtual
     machine scale set are allocated to different nodes to maximize availability. Currently, a VM
     can only be added to virtual machine scale set at creation time. An existing VM cannot be added
     to a virtual machine scale set. This property cannot exist along with a non-null
     properties.availabilitySet reference. Minimum api‐version: 2019‐03‐01.
    :vartype virtual_machine_scale_set: ~azure.mgmt.compute.models.SubResource
    :ivar proximity_placement_group: Specifies information about the proximity placement group that
     the virtual machine should be assigned to. Minimum api-version: 2018-04-01.
    :vartype proximity_placement_group: ~azure.mgmt.compute.models.SubResource
    :ivar priority: Specifies the priority for the virtual machine. Minimum api-version:
     2019-03-01. Known values are: "Regular", "Low", and "Spot".
    :vartype priority: str or ~azure.mgmt.compute.models.VirtualMachinePriorityTypes
    :ivar eviction_policy: Specifies the eviction policy for the Azure Spot virtual machine and
     Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are
     supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both
     'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
     Known values are: "Deallocate" and "Delete".
    :vartype eviction_policy: str or ~azure.mgmt.compute.models.VirtualMachineEvictionPolicyTypes
    :ivar billing_profile: Specifies the billing related details of a Azure Spot virtual machine.
     Minimum api-version: 2019-03-01.
    :vartype billing_profile: ~azure.mgmt.compute.models.BillingProfile
    :ivar host: Specifies information about the dedicated host that the virtual machine resides in.
     Minimum api-version: 2018-10-01.
    :vartype host: ~azure.mgmt.compute.models.SubResource
    :ivar host_group: Specifies information about the dedicated host group that the virtual machine
     resides in. **Note:** User cannot specify both host and hostGroup properties. Minimum
     api-version: 2020-06-01.
    :vartype host_group: ~azure.mgmt.compute.models.SubResource
    :ivar provisioning_state: The provisioning state, which only appears in the response.
    :vartype provisioning_state: str
    :ivar instance_view: The virtual machine instance view.
    :vartype instance_view: ~azure.mgmt.compute.models.VirtualMachineInstanceView
    :ivar license_type: Specifies that the image or disk that is being used was licensed
     on-premises. :code:`<br>`:code:`<br>` Possible values for Windows Server operating system are:
     :code:`<br>`:code:`<br>` Windows_Client :code:`<br>`:code:`<br>` Windows_Server
     :code:`<br>`:code:`<br>` Possible values for Linux Server operating system are:
     :code:`<br>`:code:`<br>` RHEL_BYOS (for RHEL) :code:`<br>`:code:`<br>` SLES_BYOS (for SUSE)
     :code:`<br>`:code:`<br>` For more information, see `Azure Hybrid Use Benefit for Windows Server
     <https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing>`_
     :code:`<br>`:code:`<br>` `Azure Hybrid Use Benefit for Linux Server
     <https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux>`_
     :code:`<br>`:code:`<br>` Minimum api-version: 2015-06-15.
    :vartype license_type: str
    :ivar vm_id: Specifies the VM unique ID which is a 128-bits identifier that is encoded and
     stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
    :vartype vm_id: str
    :ivar extensions_time_budget: Specifies the time alloted for all extensions to start. The time
     duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in
     ISO 8601 format. The default value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01.
    :vartype extensions_time_budget: str
    :ivar platform_fault_domain: Specifies the scale set logical fault domain into which the
     Virtual Machine will be created. By default, the Virtual Machine will by automatically assigned
     to a fault domain that best maintains balance across available fault domains. This is
     applicable only if the 'virtualMachineScaleSet' property of this Virtual Machine is set. The
     Virtual Machine Scale Set that is referenced, must have 'platformFaultDomainCount' greater than
     1. This property cannot be updated once the Virtual Machine is created. Fault domain assignment
     can be viewed in the Virtual Machine Instance View. Minimum api‐version: 2020‐12‐01.
    :vartype platform_fault_domain: int
    :ivar scheduled_events_profile: Specifies Scheduled Event related configurations.
    :vartype scheduled_events_profile: ~azure.mgmt.compute.models.ScheduledEventsProfile
    :ivar user_data: UserData for the VM, which must be base-64 encoded. Customer should not pass
     any secrets in here. Minimum api-version: 2021-03-01.
    :vartype user_data: str
    :ivar capacity_reservation: Specifies information about the capacity reservation that is used
     to allocate virtual machine. Minimum api-version: 2021-04-01.
    :vartype capacity_reservation: ~azure.mgmt.compute.models.CapacityReservationProfile
    :ivar application_profile: Specifies the gallery applications that should be made available to
     the VM/VMSS.
    :vartype application_profile: ~azure.mgmt.compute.models.ApplicationProfile
    :ivar time_created: Specifies the time at which the Virtual Machine resource was created.
     Minimum api-version: 2021-11-01.
    :vartype time_created: ~datetime.datetime
    """

    hardware_profile: Optional["_models.HardwareProfile"] = rest_field(name="hardwareProfile")
    """Specifies the hardware settings for the virtual machine."""
    scheduled_events_policy: Optional["_models.ScheduledEventsPolicy"] = rest_field(name="scheduledEventsPolicy")
    """Specifies Redeploy, Reboot and ScheduledEventsAdditionalPublishingTargets Scheduled Event
     related configurations for the virtual machine."""
    storage_profile: Optional["_models.StorageProfile"] = rest_field(name="storageProfile")
    """Specifies the storage settings for the virtual machine disks."""
    additional_capabilities: Optional["_models.AdditionalCapabilities"] = rest_field(name="additionalCapabilities")
    """Specifies additional capabilities enabled or disabled on the virtual machine."""
    os_profile: Optional["_models.OSProfile"] = rest_field(name="osProfile")
    """Specifies the operating system settings used while creating the virtual machine. Some of the
     settings cannot be changed once VM is provisioned."""
    network_profile: Optional["_models.NetworkProfile"] = rest_field(name="networkProfile")
    """Specifies the network interfaces of the virtual machine."""
    security_profile: Optional["_models.SecurityProfile"] = rest_field(name="securityProfile")
    """Specifies the Security related profile settings for the virtual machine."""
    diagnostics_profile: Optional["_models.DiagnosticsProfile"] = rest_field(name="diagnosticsProfile")
    """Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15."""
    availability_set: Optional["_models.SubResource"] = rest_field(name="availabilitySet")
    """Specifies information about the availability set that the virtual machine should be assigned
     to. Virtual machines specified in the same availability set are allocated to different nodes to
     maximize availability. For more information about availability sets, see `Availability sets
     overview <https://docs.microsoft.com/azure/virtual-machines/availability-set-overview>`_. For
     more information on Azure planned maintenance, see `Maintenance and updates for Virtual
     Machines in Azure
     <https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates>`_. Currently, a VM
     can only be added to availability set at creation time. The availability set to which the VM is
     being added should be under the same resource group as the availability set resource. An
     existing VM cannot be added to an availability set. This property cannot exist along with a
     non-null properties.virtualMachineScaleSet reference."""
    virtual_machine_scale_set: Optional["_models.SubResource"] = rest_field(name="virtualMachineScaleSet")
    """Specifies information about the virtual machine scale set that the virtual machine should be
     assigned to. Virtual machines specified in the same virtual machine scale set are allocated to
     different nodes to maximize availability. Currently, a VM can only be added to virtual machine
     scale set at creation time. An existing VM cannot be added to a virtual machine scale set. This
     property cannot exist along with a non-null properties.availabilitySet reference. Minimum
     api‐version: 2019‐03‐01."""
    proximity_placement_group: Optional["_models.SubResource"] = rest_field(name="proximityPlacementGroup")
    """Specifies information about the proximity placement group that the virtual machine should be
     assigned to. Minimum api-version: 2018-04-01."""
    priority: Optional[Union[str, "_models.VirtualMachinePriorityTypes"]] = rest_field()
    """Specifies the priority for the virtual machine. Minimum api-version: 2019-03-01. Known values
     are: \"Regular\", \"Low\", and \"Spot\"."""
    eviction_policy: Optional[Union[str, "_models.VirtualMachineEvictionPolicyTypes"]] = rest_field(
        name="evictionPolicy"
    )
    """Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For
     Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum
     api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are
     supported and the minimum api-version is 2017-10-30-preview. Known values are: \"Deallocate\"
     and \"Delete\"."""
    billing_profile: Optional["_models.BillingProfile"] = rest_field(name="billingProfile")
    """Specifies the billing related details of a Azure Spot virtual machine. Minimum api-version:
     2019-03-01."""
    host: Optional["_models.SubResource"] = rest_field()
    """Specifies information about the dedicated host that the virtual machine resides in. Minimum
     api-version: 2018-10-01."""
    host_group: Optional["_models.SubResource"] = rest_field(name="hostGroup")
    """Specifies information about the dedicated host group that the virtual machine resides in.
     **Note:** User cannot specify both host and hostGroup properties. Minimum api-version:
     2020-06-01."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state, which only appears in the response."""
    instance_view: Optional["_models.VirtualMachineInstanceView"] = rest_field(name="instanceView", visibility=["read"])
    """The virtual machine instance view."""
    license_type: Optional[str] = rest_field(name="licenseType")
    """Specifies that the image or disk that is being used was licensed on-premises.
     :code:`<br>`:code:`<br>` Possible values for Windows Server operating system are:
     :code:`<br>`:code:`<br>` Windows_Client :code:`<br>`:code:`<br>` Windows_Server
     :code:`<br>`:code:`<br>` Possible values for Linux Server operating system are:
     :code:`<br>`:code:`<br>` RHEL_BYOS (for RHEL) :code:`<br>`:code:`<br>` SLES_BYOS (for SUSE)
     :code:`<br>`:code:`<br>` For more information, see `Azure Hybrid Use Benefit for Windows Server
     <https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing>`_
     :code:`<br>`:code:`<br>` `Azure Hybrid Use Benefit for Linux Server
     <https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux>`_
     :code:`<br>`:code:`<br>` Minimum api-version: 2015-06-15."""
    vm_id: Optional[str] = rest_field(name="vmId", visibility=["read"])
    """Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all
     Azure IaaS VMs SMBIOS and can be read using platform BIOS commands."""
    extensions_time_budget: Optional[str] = rest_field(name="extensionsTimeBudget")
    """Specifies the time alloted for all extensions to start. The time duration should be between 15
     minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default
     value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01."""
    platform_fault_domain: Optional[int] = rest_field(name="platformFaultDomain")
    """Specifies the scale set logical fault domain into which the Virtual Machine will be created. By
     default, the Virtual Machine will by automatically assigned to a fault domain that best
     maintains balance across available fault domains. This is applicable only if the
     'virtualMachineScaleSet' property of this Virtual Machine is set. The Virtual Machine Scale Set
     that is referenced, must have 'platformFaultDomainCount' greater than 1. This property cannot
     be updated once the Virtual Machine is created. Fault domain assignment can be viewed in the
     Virtual Machine Instance View. Minimum api‐version: 2020‐12‐01."""
    scheduled_events_profile: Optional["_models.ScheduledEventsProfile"] = rest_field(name="scheduledEventsProfile")
    """Specifies Scheduled Event related configurations."""
    user_data: Optional[str] = rest_field(name="userData")
    """UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in
     here. Minimum api-version: 2021-03-01."""
    capacity_reservation: Optional["_models.CapacityReservationProfile"] = rest_field(name="capacityReservation")
    """Specifies information about the capacity reservation that is used to allocate virtual machine.
     Minimum api-version: 2021-04-01."""
    application_profile: Optional["_models.ApplicationProfile"] = rest_field(name="applicationProfile")
    """Specifies the gallery applications that should be made available to the VM/VMSS."""
    time_created: Optional[datetime.datetime] = rest_field(name="timeCreated", visibility=["read"], format="rfc3339")
    """Specifies the time at which the Virtual Machine resource was created. Minimum api-version:
     2021-11-01."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        hardware_profile: Optional["_models.HardwareProfile"] = None,
        scheduled_events_policy: Optional["_models.ScheduledEventsPolicy"] = None,
        storage_profile: Optional["_models.StorageProfile"] = None,
        additional_capabilities: Optional["_models.AdditionalCapabilities"] = None,
        os_profile: Optional["_models.OSProfile"] = None,
        network_profile: Optional["_models.NetworkProfile"] = None,
        security_profile: Optional["_models.SecurityProfile"] = None,
        diagnostics_profile: Optional["_models.DiagnosticsProfile"] = None,
        availability_set: Optional["_models.SubResource"] = None,
        virtual_machine_scale_set: Optional["_models.SubResource"] = None,
        proximity_placement_group: Optional["_models.SubResource"] = None,
        priority: Optional[Union[str, "_models.VirtualMachinePriorityTypes"]] = None,
        eviction_policy: Optional[Union[str, "_models.VirtualMachineEvictionPolicyTypes"]] = None,
        billing_profile: Optional["_models.BillingProfile"] = None,
        host: Optional["_models.SubResource"] = None,
        host_group: Optional["_models.SubResource"] = None,
        license_type: Optional[str] = None,
        extensions_time_budget: Optional[str] = None,
        platform_fault_domain: Optional[int] = None,
        scheduled_events_profile: Optional["_models.ScheduledEventsProfile"] = None,
        user_data: Optional[str] = None,
        capacity_reservation: Optional["_models.CapacityReservationProfile"] = None,
        application_profile: Optional["_models.ApplicationProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachinePublicIPAddressConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machines IP Configuration's PublicIPAddress configuration.


    :ivar name: The publicIP address configuration name. Required.
    :vartype name: str
    :ivar properties: Describes a virtual machines IP Configuration's PublicIPAddress
     configuration.
    :vartype properties:
     ~azure.mgmt.compute.models.VirtualMachinePublicIPAddressConfigurationProperties
    :ivar sku: Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
    :vartype sku: ~azure.mgmt.compute.models.PublicIPAddressSku
    """

    name: str = rest_field()
    """The publicIP address configuration name. Required."""
    properties: Optional["_models.VirtualMachinePublicIPAddressConfigurationProperties"] = rest_field()
    """Describes a virtual machines IP Configuration's PublicIPAddress configuration."""
    sku: Optional["_models.PublicIPAddressSku"] = rest_field()
    """Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible."""

    __flattened_items = [
        "idle_timeout_in_minutes",
        "delete_option",
        "dns_settings",
        "ip_tags",
        "public_ip_prefix",
        "public_ip_address_version",
        "public_ip_allocation_method",
    ]

    @overload
    def __init__(
        self,
        *,
        name: str,
        properties: Optional["_models.VirtualMachinePublicIPAddressConfigurationProperties"] = None,
        sku: Optional["_models.PublicIPAddressSku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachinePublicIPAddressConfigurationProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machines IP Configuration's PublicIPAddress configuration.

    :ivar idle_timeout_in_minutes: The idle timeout of the public IP address.
    :vartype idle_timeout_in_minutes: int
    :ivar delete_option: Specify what happens to the public IP address when the VM is deleted.
     Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DeleteOptions
    :ivar dns_settings: The dns settings to be applied on the publicIP addresses .
    :vartype dns_settings:
     ~azure.mgmt.compute.models.VirtualMachinePublicIPAddressDnsSettingsConfiguration
    :ivar ip_tags: The list of IP tags associated with the public IP address.
    :vartype ip_tags: list[~azure.mgmt.compute.models.VirtualMachineIpTag]
    :ivar public_ip_prefix: The PublicIPPrefix from which to allocate publicIP addresses.
    :vartype public_ip_prefix: ~azure.mgmt.compute.models.SubResource
    :ivar public_ip_address_version: Available from Api-Version 2019-07-01 onwards, it represents
     whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values
     are: 'IPv4' and 'IPv6'. Known values are: "IPv4" and "IPv6".
    :vartype public_ip_address_version: str or ~azure.mgmt.compute.models.IPVersions
    :ivar public_ip_allocation_method: Specify the public IP allocation type. Known values are:
     "Dynamic" and "Static".
    :vartype public_ip_allocation_method: str or
     ~azure.mgmt.compute.models.PublicIPAllocationMethod
    """

    idle_timeout_in_minutes: Optional[int] = rest_field(name="idleTimeoutInMinutes")
    """The idle timeout of the public IP address."""
    delete_option: Optional[Union[str, "_models.DeleteOptions"]] = rest_field(name="deleteOption")
    """Specify what happens to the public IP address when the VM is deleted. Known values are:
     \"Delete\" and \"Detach\"."""
    dns_settings: Optional["_models.VirtualMachinePublicIPAddressDnsSettingsConfiguration"] = rest_field(
        name="dnsSettings"
    )
    """The dns settings to be applied on the publicIP addresses ."""
    ip_tags: Optional[List["_models.VirtualMachineIpTag"]] = rest_field(name="ipTags")
    """The list of IP tags associated with the public IP address."""
    public_ip_prefix: Optional["_models.SubResource"] = rest_field(name="publicIPPrefix")
    """The PublicIPPrefix from which to allocate publicIP addresses."""
    public_ip_address_version: Optional[Union[str, "_models.IPVersions"]] = rest_field(name="publicIPAddressVersion")
    """Available from Api-Version 2019-07-01 onwards, it represents whether the specific
     ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and
     'IPv6'. Known values are: \"IPv4\" and \"IPv6\"."""
    public_ip_allocation_method: Optional[Union[str, "_models.PublicIPAllocationMethod"]] = rest_field(
        name="publicIPAllocationMethod"
    )
    """Specify the public IP allocation type. Known values are: \"Dynamic\" and \"Static\"."""

    @overload
    def __init__(
        self,
        *,
        idle_timeout_in_minutes: Optional[int] = None,
        delete_option: Optional[Union[str, "_models.DeleteOptions"]] = None,
        dns_settings: Optional["_models.VirtualMachinePublicIPAddressDnsSettingsConfiguration"] = None,
        ip_tags: Optional[List["_models.VirtualMachineIpTag"]] = None,
        public_ip_prefix: Optional["_models.SubResource"] = None,
        public_ip_address_version: Optional[Union[str, "_models.IPVersions"]] = None,
        public_ip_allocation_method: Optional[Union[str, "_models.PublicIPAllocationMethod"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachinePublicIPAddressDnsSettingsConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machines network configuration's DNS settings.


    :ivar domain_name_label: The Domain name label prefix of the PublicIPAddress resources that
     will be created. The generated name label is the concatenation of the domain name label and vm
     network profile unique ID. Required.
    :vartype domain_name_label: str
    :ivar domain_name_label_scope: The Domain name label scope of the PublicIPAddress resources
     that will be created. The generated name label is the concatenation of the hashed domain name
     label with policy according to the domain name label scope and vm network profile unique ID.
     Known values are: "TenantReuse", "SubscriptionReuse", "ResourceGroupReuse", and "NoReuse".
    :vartype domain_name_label_scope: str or ~azure.mgmt.compute.models.DomainNameLabelScopeTypes
    """

    domain_name_label: str = rest_field(name="domainNameLabel")
    """The Domain name label prefix of the PublicIPAddress resources that will be created. The
     generated name label is the concatenation of the domain name label and vm network profile
     unique ID. Required."""
    domain_name_label_scope: Optional[Union[str, "_models.DomainNameLabelScopeTypes"]] = rest_field(
        name="domainNameLabelScope"
    )
    """The Domain name label scope of the PublicIPAddress resources that will be created. The
     generated name label is the concatenation of the hashed domain name label with policy according
     to the domain name label scope and vm network profile unique ID. Known values are:
     \"TenantReuse\", \"SubscriptionReuse\", \"ResourceGroupReuse\", and \"NoReuse\"."""

    @overload
    def __init__(
        self,
        *,
        domain_name_label: str,
        domain_name_label_scope: Optional[Union[str, "_models.DomainNameLabelScopeTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineReimageParameters(_model_base.Model):
    """Parameters for Reimaging Virtual Machine. NOTE: Virtual Machine OS disk will always be
    reimaged.

    :ivar temp_disk: Specifies whether to reimage temp disk. Default value: false. Note: This temp
     disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
    :vartype temp_disk: bool
    :ivar exact_version: Specifies in decimal number, the version the OS disk should be reimaged
     to. If exact version is not provided, the OS disk is reimaged to the existing version of OS
     Disk.
    :vartype exact_version: str
    :ivar os_profile: Specifies information required for reimaging the non-ephemeral OS disk.
    :vartype os_profile: ~azure.mgmt.compute.models.OSProfileProvisioningData
    """

    temp_disk: Optional[bool] = rest_field(name="tempDisk")
    """Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage
     parameter is only supported for VM/VMSS with Ephemeral OS disk."""
    exact_version: Optional[str] = rest_field(name="exactVersion")
    """Specifies in decimal number, the version the OS disk should be reimaged to. If exact version is
     not provided, the OS disk is reimaged to the existing version of OS Disk."""
    os_profile: Optional["_models.OSProfileProvisioningData"] = rest_field(name="osProfile")
    """Specifies information required for reimaging the non-ephemeral OS disk."""

    @overload
    def __init__(
        self,
        *,
        temp_disk: Optional[bool] = None,
        exact_version: Optional[str] = None,
        os_profile: Optional["_models.OSProfileProvisioningData"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineRunCommand(TrackedResource):
    """Describes a Virtual Machine run command.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a Virtual Machine run command.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineRunCommandProperties
    """

    properties: Optional["_models.VirtualMachineRunCommandProperties"] = rest_field()
    """Describes the properties of a Virtual Machine run command."""

    __flattened_items = [
        "source",
        "parameters",
        "protected_parameters",
        "async_execution",
        "run_as_user",
        "run_as_password",
        "timeout_in_seconds",
        "output_blob_uri",
        "error_blob_uri",
        "output_blob_managed_identity",
        "error_blob_managed_identity",
        "provisioning_state",
        "instance_view",
        "treat_failure_as_deployment_failure",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualMachineRunCommandProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineRunCommandInstanceView(_model_base.Model):
    """The instance view of a virtual machine run command.

    :ivar execution_state: Script execution status. Known values are: "Unknown", "Pending",
     "Running", "Failed", "Succeeded", "TimedOut", and "Canceled".
    :vartype execution_state: str or ~azure.mgmt.compute.models.ExecutionState
    :ivar execution_message: Communicate script configuration errors or execution messages.
    :vartype execution_message: str
    :ivar exit_code: Exit code returned from script execution.
    :vartype exit_code: int
    :ivar output: Script output stream.
    :vartype output: str
    :ivar error: Script error stream.
    :vartype error: str
    :ivar start_time: Script start time.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Script end time.
    :vartype end_time: ~datetime.datetime
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    """

    execution_state: Optional[Union[str, "_models.ExecutionState"]] = rest_field(name="executionState")
    """Script execution status. Known values are: \"Unknown\", \"Pending\", \"Running\", \"Failed\",
     \"Succeeded\", \"TimedOut\", and \"Canceled\"."""
    execution_message: Optional[str] = rest_field(name="executionMessage")
    """Communicate script configuration errors or execution messages."""
    exit_code: Optional[int] = rest_field(name="exitCode")
    """Exit code returned from script execution."""
    output: Optional[str] = rest_field()
    """Script output stream."""
    error: Optional[str] = rest_field()
    """Script error stream."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", format="rfc3339")
    """Script start time."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", format="rfc3339")
    """Script end time."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""

    @overload
    def __init__(
        self,
        *,
        execution_state: Optional[Union[str, "_models.ExecutionState"]] = None,
        execution_message: Optional[str] = None,
        exit_code: Optional[int] = None,
        output: Optional[str] = None,
        error: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineRunCommandProperties(_model_base.Model):
    """Describes the properties of a Virtual Machine run command.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar source: The source of the run command script.
    :vartype source: ~azure.mgmt.compute.models.VirtualMachineRunCommandScriptSource
    :ivar parameters: The parameters used by the script.
    :vartype parameters: list[~azure.mgmt.compute.models.RunCommandInputParameter]
    :ivar protected_parameters: The parameters used by the script.
    :vartype protected_parameters: list[~azure.mgmt.compute.models.RunCommandInputParameter]
    :ivar async_execution: Optional. If set to true, provisioning will complete as soon as the
     script starts and will not wait for script to complete.
    :vartype async_execution: bool
    :ivar run_as_user: Specifies the user account on the VM when executing the run command.
    :vartype run_as_user: str
    :ivar run_as_password: Specifies the user account password on the VM when executing the run
     command.
    :vartype run_as_password: str
    :ivar timeout_in_seconds: The timeout in seconds to execute the run command.
    :vartype timeout_in_seconds: int
    :ivar output_blob_uri: Specifies the Azure storage blob where script output stream will be
     uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to
     provide the VM access to the blob. Refer outputBlobManagedIdentity parameter.
    :vartype output_blob_uri: str
    :ivar error_blob_uri: Specifies the Azure storage blob where script error stream will be
     uploaded. Use a SAS URI with read, append, create, write access OR use managed identity to
     provide the VM access to the blob. Refer errorBlobManagedIdentity parameter.
    :vartype error_blob_uri: str
    :ivar output_blob_managed_identity: User-assigned managed identity that has access to
     outputBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure
     managed identity has been given access to blob's container with 'Storage Blob Data Contributor'
     role assignment. In case of user-assigned identity, make sure you add it under VM's identity.
     For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and
     https://aka.ms/RunCommandManaged.
    :vartype output_blob_managed_identity: ~azure.mgmt.compute.models.RunCommandManagedIdentity
    :ivar error_blob_managed_identity: User-assigned managed identity that has access to
     errorBlobUri storage blob. Use an empty object in case of system-assigned identity. Make sure
     managed identity has been given access to blob's container with 'Storage Blob Data Contributor'
     role assignment. In case of user-assigned identity, make sure you add it under VM's identity.
     For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and
     https://aka.ms/RunCommandManaged.
    :vartype error_blob_managed_identity: ~azure.mgmt.compute.models.RunCommandManagedIdentity
    :ivar provisioning_state: The provisioning state, which only appears in the response. If
     treatFailureAsDeploymentFailure set to true, any failure in the script will fail the deployment
     and ProvisioningState will be marked as Failed. If treatFailureAsDeploymentFailure set to
     false, ProvisioningState would only reflect whether the run command was run or not by the
     extensions platform, it would not indicate whether script failed in case of script failures.
     See instance view of run command in case of script failures to see executionMessage, output,
     error: https://aka.ms/runcommandmanaged#get-execution-status-and-results.
    :vartype provisioning_state: str
    :ivar instance_view: The virtual machine run command instance view.
    :vartype instance_view: ~azure.mgmt.compute.models.VirtualMachineRunCommandInstanceView
    :ivar treat_failure_as_deployment_failure: Optional. If set to true, any failure in the script
     will fail the deployment and ProvisioningState will be marked as Failed. If set to false,
     ProvisioningState would only reflect whether the run command was run or not by the extensions
     platform, it would not indicate whether script failed in case of script failures. See instance
     view of run command in case of script failures to see executionMessage, output, error:
     https://aka.ms/runcommandmanaged#get-execution-status-and-results.
    :vartype treat_failure_as_deployment_failure: bool
    """

    source: Optional["_models.VirtualMachineRunCommandScriptSource"] = rest_field()
    """The source of the run command script."""
    parameters: Optional[List["_models.RunCommandInputParameter"]] = rest_field()
    """The parameters used by the script."""
    protected_parameters: Optional[List["_models.RunCommandInputParameter"]] = rest_field(name="protectedParameters")
    """The parameters used by the script."""
    async_execution: Optional[bool] = rest_field(name="asyncExecution")
    """Optional. If set to true, provisioning will complete as soon as the script starts and will not
     wait for script to complete."""
    run_as_user: Optional[str] = rest_field(name="runAsUser")
    """Specifies the user account on the VM when executing the run command."""
    run_as_password: Optional[str] = rest_field(name="runAsPassword")
    """Specifies the user account password on the VM when executing the run command."""
    timeout_in_seconds: Optional[int] = rest_field(name="timeoutInSeconds")
    """The timeout in seconds to execute the run command."""
    output_blob_uri: Optional[str] = rest_field(name="outputBlobUri")
    """Specifies the Azure storage blob where script output stream will be uploaded. Use a SAS URI
     with read, append, create, write access OR use managed identity to provide the VM access to the
     blob. Refer outputBlobManagedIdentity parameter."""
    error_blob_uri: Optional[str] = rest_field(name="errorBlobUri")
    """Specifies the Azure storage blob where script error stream will be uploaded. Use a SAS URI with
     read, append, create, write access OR use managed identity to provide the VM access to the
     blob. Refer errorBlobManagedIdentity parameter."""
    output_blob_managed_identity: Optional["_models.RunCommandManagedIdentity"] = rest_field(
        name="outputBlobManagedIdentity"
    )
    """User-assigned managed identity that has access to outputBlobUri storage blob. Use an empty
     object in case of system-assigned identity. Make sure managed identity has been given access to
     blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned
     identity, make sure you add it under VM's identity. For more info on managed identity and Run
     Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged."""
    error_blob_managed_identity: Optional["_models.RunCommandManagedIdentity"] = rest_field(
        name="errorBlobManagedIdentity"
    )
    """User-assigned managed identity that has access to errorBlobUri storage blob. Use an empty
     object in case of system-assigned identity. Make sure managed identity has been given access to
     blob's container with 'Storage Blob Data Contributor' role assignment. In case of user-assigned
     identity, make sure you add it under VM's identity. For more info on managed identity and Run
     Command, refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state, which only appears in the response. If treatFailureAsDeploymentFailure
     set to true, any failure in the script will fail the deployment and ProvisioningState will be
     marked as Failed. If treatFailureAsDeploymentFailure set to false, ProvisioningState would only
     reflect whether the run command was run or not by the extensions platform, it would not
     indicate whether script failed in case of script failures. See instance view of run command in
     case of script failures to see executionMessage, output, error:
     https://aka.ms/runcommandmanaged#get-execution-status-and-results."""
    instance_view: Optional["_models.VirtualMachineRunCommandInstanceView"] = rest_field(
        name="instanceView", visibility=["read"]
    )
    """The virtual machine run command instance view."""
    treat_failure_as_deployment_failure: Optional[bool] = rest_field(name="treatFailureAsDeploymentFailure")
    """Optional. If set to true, any failure in the script will fail the deployment and
     ProvisioningState will be marked as Failed. If set to false, ProvisioningState would only
     reflect whether the run command was run or not by the extensions platform, it would not
     indicate whether script failed in case of script failures. See instance view of run command in
     case of script failures to see executionMessage, output, error:
     https://aka.ms/runcommandmanaged#get-execution-status-and-results."""

    @overload
    def __init__(
        self,
        *,
        source: Optional["_models.VirtualMachineRunCommandScriptSource"] = None,
        parameters: Optional[List["_models.RunCommandInputParameter"]] = None,
        protected_parameters: Optional[List["_models.RunCommandInputParameter"]] = None,
        async_execution: Optional[bool] = None,
        run_as_user: Optional[str] = None,
        run_as_password: Optional[str] = None,
        timeout_in_seconds: Optional[int] = None,
        output_blob_uri: Optional[str] = None,
        error_blob_uri: Optional[str] = None,
        output_blob_managed_identity: Optional["_models.RunCommandManagedIdentity"] = None,
        error_blob_managed_identity: Optional["_models.RunCommandManagedIdentity"] = None,
        treat_failure_as_deployment_failure: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineRunCommandScriptSource(_model_base.Model):
    """Describes the script sources for run command. Use only one of script, scriptUri, commandId.

    :ivar script: Specifies the script content to be executed on the VM.
    :vartype script: str
    :ivar script_uri: Specifies the script download location. It can be either SAS URI of an Azure
     storage blob with read access or public URI.
    :vartype script_uri: str
    :ivar command_id: Specifies a commandId of predefined built-in script.
    :vartype command_id: str
    :ivar script_uri_managed_identity: User-assigned managed identity that has access to scriptUri
     in case of Azure storage blob. Use an empty object in case of system-assigned identity. Make
     sure the Azure storage blob exists, and managed identity has been given access to blob's
     container with 'Storage Blob Data Reader' role assignment. In case of user-assigned identity,
     make sure you add it under VM's identity. For more info on managed identity and Run Command,
     refer https://aka.ms/ManagedIdentity and https://aka.ms/RunCommandManaged.
    :vartype script_uri_managed_identity: ~azure.mgmt.compute.models.RunCommandManagedIdentity
    """

    script: Optional[str] = rest_field()
    """Specifies the script content to be executed on the VM."""
    script_uri: Optional[str] = rest_field(name="scriptUri")
    """Specifies the script download location. It can be either SAS URI of an Azure storage blob with
     read access or public URI."""
    command_id: Optional[str] = rest_field(name="commandId")
    """Specifies a commandId of predefined built-in script."""
    script_uri_managed_identity: Optional["_models.RunCommandManagedIdentity"] = rest_field(
        name="scriptUriManagedIdentity"
    )
    """User-assigned managed identity that has access to scriptUri in case of Azure storage blob. Use
     an empty object in case of system-assigned identity. Make sure the Azure storage blob exists,
     and managed identity has been given access to blob's container with 'Storage Blob Data Reader'
     role assignment. In case of user-assigned identity, make sure you add it under VM's identity.
     For more info on managed identity and Run Command, refer https://aka.ms/ManagedIdentity and
     https://aka.ms/RunCommandManaged."""

    @overload
    def __init__(
        self,
        *,
        script: Optional[str] = None,
        script_uri: Optional[str] = None,
        command_id: Optional[str] = None,
        script_uri_managed_identity: Optional["_models.RunCommandManagedIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineRunCommandUpdate(UpdateResource):
    """Describes a Virtual Machine run command.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: Describes the properties of a Virtual Machine run command.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineRunCommandProperties
    """

    properties: Optional["_models.VirtualMachineRunCommandProperties"] = rest_field()
    """Describes the properties of a Virtual Machine run command."""

    __flattened_items = [
        "source",
        "parameters",
        "protected_parameters",
        "async_execution",
        "run_as_user",
        "run_as_password",
        "timeout_in_seconds",
        "output_blob_uri",
        "error_blob_uri",
        "output_blob_managed_identity",
        "error_blob_managed_identity",
        "provisioning_state",
        "instance_view",
        "treat_failure_as_deployment_failure",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualMachineRunCommandProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSet(TrackedResource):
    """Describes a Virtual Machine Scale Set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a Virtual Machine Scale Set.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineScaleSetProperties
    :ivar sku: The virtual machine scale set sku.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    :ivar plan: Specifies information about the marketplace image used to create the virtual
     machine. This element is only used for marketplace images. Before you can use a marketplace
     image from an API, you must enable the image for programmatic use.  In the Azure portal, find
     the marketplace image that you want to use and then click **Want to deploy programmatically,
     Get Started ->**. Enter any required information and then click **Save**.
    :vartype plan: ~azure.mgmt.compute.models.Plan
    :ivar identity: The identity of the virtual machine scale set, if configured.
    :vartype identity: ~azure.mgmt.compute.models.VirtualMachineScaleSetIdentity
    :ivar zones: The virtual machine scale set zones.
    :vartype zones: list[str]
    :ivar extended_location: The extended location of the Virtual Machine Scale Set.
    :vartype extended_location: ~azure.mgmt.compute.models.ExtendedLocation
    :ivar etag: Etag is property returned in Create/Update/Get response of the VMSS, so that
     customer can supply it in the header to ensure optimistic updates.
    :vartype etag: str
    """

    properties: Optional["_models.VirtualMachineScaleSetProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Scale Set."""
    sku: Optional["_models.Sku"] = rest_field()
    """The virtual machine scale set sku."""
    plan: Optional["_models.Plan"] = rest_field()
    """Specifies information about the marketplace image used to create the virtual machine. This
     element is only used for marketplace images. Before you can use a marketplace image from an
     API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace
     image that you want to use and then click **Want to deploy programmatically, Get Started ->**.
     Enter any required information and then click **Save**."""
    identity: Optional["_models.VirtualMachineScaleSetIdentity"] = rest_field()
    """The identity of the virtual machine scale set, if configured."""
    zones: Optional[List[str]] = rest_field()
    """The virtual machine scale set zones."""
    extended_location: Optional["_models.ExtendedLocation"] = rest_field(name="extendedLocation")
    """The extended location of the Virtual Machine Scale Set."""
    etag: Optional[str] = rest_field(visibility=["read"])
    """Etag is property returned in Create/Update/Get response of the VMSS, so that customer can
     supply it in the header to ensure optimistic updates."""

    __flattened_items = [
        "upgrade_policy",
        "scheduled_events_policy",
        "automatic_repairs_policy",
        "virtual_machine_profile",
        "provisioning_state",
        "overprovision",
        "do_not_run_extensions_on_overprovisioned_v_ms",
        "unique_id",
        "single_placement_group",
        "zone_balance",
        "platform_fault_domain_count",
        "proximity_placement_group",
        "host_group",
        "additional_capabilities",
        "scale_in_policy",
        "orchestration_mode",
        "spot_restore_policy",
        "priority_mix_policy",
        "time_created",
        "constrained_maximum_capacity",
        "resiliency_policy",
        "zonal_platform_fault_domain_align_mode",
        "sku_profile",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualMachineScaleSetProperties"] = None,
        sku: Optional["_models.Sku"] = None,
        plan: Optional["_models.Plan"] = None,
        identity: Optional["_models.VirtualMachineScaleSetIdentity"] = None,
        zones: Optional[List[str]] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetDataDisk(_model_base.Model):
    """Describes a virtual machine scale set data disk.


    :ivar name: The disk name.
    :vartype name: str
    :ivar lun: Specifies the logical unit number of the data disk. This value is used to identify
     data disks within the VM and therefore must be unique for each data disk attached to a VM.
     Required.
    :vartype lun: int
    :ivar caching: Specifies the caching requirements. Possible values are: **None,** **ReadOnly,**
     **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium
     storage.**. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar write_accelerator_enabled: Specifies whether writeAccelerator should be enabled or
     disabled on the disk.
    :vartype write_accelerator_enabled: bool
    :ivar create_option: The create option. Required. Known values are: "FromImage", "Empty",
     "Attach", "Copy", and "Restore".
    :vartype create_option: str or ~azure.mgmt.compute.models.DiskCreateOptionTypes
    :ivar disk_size_gb: Specifies the size of an empty data disk in gigabytes. This element can be
     used to overwrite the size of the disk in a virtual machine image. The property diskSizeGB is
     the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
    :vartype disk_size_gb: int
    :ivar managed_disk: The managed disk parameters.
    :vartype managed_disk: ~azure.mgmt.compute.models.VirtualMachineScaleSetManagedDiskParameters
    :ivar disk_iops_read_write: Specifies the Read-Write IOPS for the managed disk. Should be used
     only when StorageAccountType is UltraSSD_LRS. If not specified, a default value would be
     assigned based on diskSizeGB.
    :vartype disk_iops_read_write: int
    :ivar disk_m_bps_read_write: Specifies the bandwidth in MB per second for the managed disk.
     Should be used only when StorageAccountType is UltraSSD_LRS. If not specified, a default value
     would be assigned based on diskSizeGB.
    :vartype disk_m_bps_read_write: int
    :ivar delete_option: Specifies whether data disk should be deleted or detached upon VMSS Flex
     deletion (This feature is available for VMSS with Flexible OrchestrationMode
     only).:code:`<br>`:code:`<br>` Possible values: :code:`<br>`:code:`<br>` **Delete** If this
     value is used, the data disk is deleted when the VMSS Flex VM is
     deleted.:code:`<br>`:code:`<br>` **Detach** If this value is used, the data disk is retained
     after VMSS Flex VM is deleted.:code:`<br>`:code:`<br>` The default value is set to **Delete**.
     Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DiskDeleteOptionTypes
    """

    name: Optional[str] = rest_field()
    """The disk name."""
    lun: int = rest_field()
    """Specifies the logical unit number of the data disk. This value is used to identify data disks
     within the VM and therefore must be unique for each data disk attached to a VM. Required."""
    caching: Optional[Union[str, "_models.CachingTypes"]] = rest_field()
    """Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.**
     The default values are: **None for Standard storage. ReadOnly for Premium storage.**. Known
     values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    write_accelerator_enabled: Optional[bool] = rest_field(name="writeAcceleratorEnabled")
    """Specifies whether writeAccelerator should be enabled or disabled on the disk."""
    create_option: Union[str, "_models.DiskCreateOptionTypes"] = rest_field(name="createOption")
    """The create option. Required. Known values are: \"FromImage\", \"Empty\", \"Attach\", \"Copy\",
     and \"Restore\"."""
    disk_size_gb: Optional[int] = rest_field(name="diskSizeGB")
    """Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite
     the size of the disk in a virtual machine image. The property diskSizeGB is the number of bytes
     x 1024^3 for the disk and the value cannot be larger than 1023."""
    managed_disk: Optional["_models.VirtualMachineScaleSetManagedDiskParameters"] = rest_field(name="managedDisk")
    """The managed disk parameters."""
    disk_iops_read_write: Optional[int] = rest_field(name="diskIOPSReadWrite")
    """Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType
     is UltraSSD_LRS. If not specified, a default value would be assigned based on diskSizeGB."""
    disk_m_bps_read_write: Optional[int] = rest_field(name="diskMBpsReadWrite")
    """Specifies the bandwidth in MB per second for the managed disk. Should be used only when
     StorageAccountType is UltraSSD_LRS. If not specified, a default value would be assigned based
     on diskSizeGB."""
    delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = rest_field(name="deleteOption")
    """Specifies whether data disk should be deleted or detached upon VMSS Flex deletion (This feature
     is available for VMSS with Flexible OrchestrationMode only).:code:`<br>`:code:`<br>` Possible
     values: :code:`<br>`:code:`<br>` **Delete** If this value is used, the data disk is deleted
     when the VMSS Flex VM is deleted.:code:`<br>`:code:`<br>` **Detach** If this value is used, the
     data disk is retained after VMSS Flex VM is deleted.:code:`<br>`:code:`<br>` The default value
     is set to **Delete**. Known values are: \"Delete\" and \"Detach\"."""

    @overload
    def __init__(
        self,
        *,
        lun: int,
        create_option: Union[str, "_models.DiskCreateOptionTypes"],
        name: Optional[str] = None,
        caching: Optional[Union[str, "_models.CachingTypes"]] = None,
        write_accelerator_enabled: Optional[bool] = None,
        disk_size_gb: Optional[int] = None,
        managed_disk: Optional["_models.VirtualMachineScaleSetManagedDiskParameters"] = None,
        disk_iops_read_write: Optional[int] = None,
        disk_m_bps_read_write: Optional[int] = None,
        delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetExtension(ProxyResource):
    """Describes a Virtual Machine Scale Set Extension.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar properties: Describes the properties of a Virtual Machine Scale Set Extension.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineScaleSetExtensionProperties
    :ivar type: Resource type.
    :vartype type: str
    """

    properties: Optional["_models.VirtualMachineScaleSetExtensionProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Scale Set Extension."""

    __flattened_items = [
        "force_update_tag",
        "publisher",
        "type",
        "type_handler_version",
        "auto_upgrade_minor_version",
        "enable_automatic_upgrade",
        "settings",
        "protected_settings",
        "provisioning_state",
        "provision_after_extensions",
        "suppress_failures",
        "protected_settings_from_key_vault",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.VirtualMachineScaleSetExtensionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetExtensionProfile(_model_base.Model):
    """Describes a virtual machine scale set extension profile.

    :ivar extensions: The virtual machine scale set child extension resources.
    :vartype extensions: list[~azure.mgmt.compute.models.VirtualMachineScaleSetExtension]
    :ivar extensions_time_budget: Specifies the time alloted for all extensions to start. The time
     duration should be between 15 minutes and 120 minutes (inclusive) and should be specified in
     ISO 8601 format. The default value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01.
    :vartype extensions_time_budget: str
    """

    extensions: Optional[List["_models.VirtualMachineScaleSetExtension"]] = rest_field()
    """The virtual machine scale set child extension resources."""
    extensions_time_budget: Optional[str] = rest_field(name="extensionsTimeBudget")
    """Specifies the time alloted for all extensions to start. The time duration should be between 15
     minutes and 120 minutes (inclusive) and should be specified in ISO 8601 format. The default
     value is 90 minutes (PT1H30M). Minimum api-version: 2020-06-01."""

    @overload
    def __init__(
        self,
        *,
        extensions: Optional[List["_models.VirtualMachineScaleSetExtension"]] = None,
        extensions_time_budget: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetExtensionProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes the properties of a Virtual Machine Scale Set Extension.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar force_update_tag: If a value is provided and is different from the previous value, the
     extension handler will be forced to update even if the extension configuration has not changed.
    :vartype force_update_tag: str
    :ivar publisher: The name of the extension handler publisher.
    :vartype publisher: str
    :ivar type: Specifies the type of the extension; an example is "CustomScriptExtension".
    :vartype type: str
    :ivar type_handler_version: Specifies the version of the script handler.
    :vartype type_handler_version: str
    :ivar auto_upgrade_minor_version: Indicates whether the extension should use a newer minor
     version if one is available at deployment time. Once deployed, however, the extension will not
     upgrade minor versions unless redeployed, even with this property set to true.
    :vartype auto_upgrade_minor_version: bool
    :ivar enable_automatic_upgrade: Indicates whether the extension should be automatically
     upgraded by the platform if there is a newer version of the extension available.
    :vartype enable_automatic_upgrade: bool
    :ivar settings: Json formatted public settings for the extension.
    :vartype settings: any
    :ivar protected_settings: The extension can contain either protectedSettings or
     protectedSettingsFromKeyVault or no protected settings at all.
    :vartype protected_settings: any
    :ivar provisioning_state: The provisioning state, which only appears in the response.
    :vartype provisioning_state: str
    :ivar provision_after_extensions: Collection of extension names after which this extension
     needs to be provisioned.
    :vartype provision_after_extensions: list[str]
    :ivar suppress_failures: Indicates whether failures stemming from the extension will be
     suppressed (Operational failures such as not connecting to the VM will not be suppressed
     regardless of this value). The default is false.
    :vartype suppress_failures: bool
    :ivar protected_settings_from_key_vault: The extensions protected settings that are passed by
     reference, and consumed from key vault.
    :vartype protected_settings_from_key_vault: ~azure.mgmt.compute.models.KeyVaultSecretReference
    """

    force_update_tag: Optional[str] = rest_field(name="forceUpdateTag")
    """If a value is provided and is different from the previous value, the extension handler will be
     forced to update even if the extension configuration has not changed."""
    publisher: Optional[str] = rest_field()
    """The name of the extension handler publisher."""
    type: Optional[str] = rest_field()
    """Specifies the type of the extension; an example is \"CustomScriptExtension\"."""
    type_handler_version: Optional[str] = rest_field(name="typeHandlerVersion")
    """Specifies the version of the script handler."""
    auto_upgrade_minor_version: Optional[bool] = rest_field(name="autoUpgradeMinorVersion")
    """Indicates whether the extension should use a newer minor version if one is available at
     deployment time. Once deployed, however, the extension will not upgrade minor versions unless
     redeployed, even with this property set to true."""
    enable_automatic_upgrade: Optional[bool] = rest_field(name="enableAutomaticUpgrade")
    """Indicates whether the extension should be automatically upgraded by the platform if there is a
     newer version of the extension available."""
    settings: Optional[Any] = rest_field()
    """Json formatted public settings for the extension."""
    protected_settings: Optional[Any] = rest_field(name="protectedSettings")
    """The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no
     protected settings at all."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state, which only appears in the response."""
    provision_after_extensions: Optional[List[str]] = rest_field(name="provisionAfterExtensions")
    """Collection of extension names after which this extension needs to be provisioned."""
    suppress_failures: Optional[bool] = rest_field(name="suppressFailures")
    """Indicates whether failures stemming from the extension will be suppressed (Operational failures
     such as not connecting to the VM will not be suppressed regardless of this value). The default
     is false."""
    protected_settings_from_key_vault: Optional["_models.KeyVaultSecretReference"] = rest_field(
        name="protectedSettingsFromKeyVault"
    )
    """The extensions protected settings that are passed by reference, and consumed from key vault."""

    @overload
    def __init__(
        self,
        *,
        force_update_tag: Optional[str] = None,
        publisher: Optional[str] = None,
        type: Optional[str] = None,
        type_handler_version: Optional[str] = None,
        auto_upgrade_minor_version: Optional[bool] = None,
        enable_automatic_upgrade: Optional[bool] = None,
        settings: Optional[Any] = None,
        protected_settings: Optional[Any] = None,
        provision_after_extensions: Optional[List[str]] = None,
        suppress_failures: Optional[bool] = None,
        protected_settings_from_key_vault: Optional["_models.KeyVaultSecretReference"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetExtensionUpdate(SubResourceReadOnly):
    """Describes a Virtual Machine Scale Set Extension.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: The name of the extension.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar properties: Describes the properties of a Virtual Machine Scale Set Extension.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineScaleSetExtensionProperties
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the extension."""
    type: Optional[str] = rest_field(visibility=["read"])
    """Resource type."""
    properties: Optional["_models.VirtualMachineScaleSetExtensionProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Scale Set Extension."""

    __flattened_items = [
        "force_update_tag",
        "publisher",
        "type",
        "type_handler_version",
        "auto_upgrade_minor_version",
        "enable_automatic_upgrade",
        "settings",
        "protected_settings",
        "provisioning_state",
        "provision_after_extensions",
        "suppress_failures",
        "protected_settings_from_key_vault",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.VirtualMachineScaleSetExtensionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetHardwareProfile(_model_base.Model):
    """Specifies the hardware settings for the virtual machine scale set.

    :ivar vm_size_properties: Specifies the properties for customizing the size of the virtual
     machine. Minimum api-version: 2021-11-01. Please follow the instructions in `VM Customization
     <https://aka.ms/vmcustomization>`_ for more details.
    :vartype vm_size_properties: ~azure.mgmt.compute.models.VMSizeProperties
    """

    vm_size_properties: Optional["_models.VMSizeProperties"] = rest_field(name="vmSizeProperties")
    """Specifies the properties for customizing the size of the virtual machine. Minimum api-version:
     2021-11-01. Please follow the instructions in `VM Customization
     <https://aka.ms/vmcustomization>`_ for more details."""

    @overload
    def __init__(
        self,
        *,
        vm_size_properties: Optional["_models.VMSizeProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetIdentity(_model_base.Model):
    """Identity for the virtual machine scale set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of virtual machine scale set identity. This property will
     only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant id associated with the virtual machine scale set. This property
     will only be provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of identity used for the virtual machine scale set. The type
     'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user
     assigned identities. The type 'None' will remove any identities from the virtual machine scale
     set. Known values are: "SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", and
     "None".
    :vartype type: str or ~azure.mgmt.compute.models.ResourceIdentityType
    :ivar user_assigned_identities: The list of user identities associated with the virtual machine
     scale set. The user identity dictionary key references will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.  # pylint: disable=line-too-long
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.compute.models.UserAssignedIdentitiesValue]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal id of virtual machine scale set identity. This property will only be provided for
     a system assigned identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant id associated with the virtual machine scale set. This property will only be
     provided for a system assigned identity."""
    type: Optional[Union[str, "_models.ResourceIdentityType"]] = rest_field()
    """The type of identity used for the virtual machine scale set. The type 'SystemAssigned,
     UserAssigned' includes both an implicitly created identity and a set of user assigned
     identities. The type 'None' will remove any identities from the virtual machine scale set.
     Known values are: \"SystemAssigned\", \"UserAssigned\", \"SystemAssigned, UserAssigned\", and
     \"None\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentitiesValue"]] = rest_field(
        name="userAssignedIdentities"
    )
    """The list of user identities associated with the virtual machine scale set. The user identity
     dictionary key references will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.  # pylint: disable=line-too-long"""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ResourceIdentityType"]] = None,
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentitiesValue"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetInstanceView(_model_base.Model):
    """The instance view of a virtual machine scale set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar virtual_machine: The instance view status summary for the virtual machine scale set.
    :vartype virtual_machine:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetInstanceViewStatusesSummary
    :ivar extensions: The extensions information.
    :vartype extensions: list[~azure.mgmt.compute.models.VirtualMachineScaleSetVMExtensionsSummary]
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    :ivar orchestration_services: The orchestration services information.
    :vartype orchestration_services: list[~azure.mgmt.compute.models.OrchestrationServiceSummary]
    """

    virtual_machine: Optional["_models.VirtualMachineScaleSetInstanceViewStatusesSummary"] = rest_field(
        name="virtualMachine", visibility=["read"]
    )
    """The instance view status summary for the virtual machine scale set."""
    extensions: Optional[List["_models.VirtualMachineScaleSetVMExtensionsSummary"]] = rest_field(visibility=["read"])
    """The extensions information."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""
    orchestration_services: Optional[List["_models.OrchestrationServiceSummary"]] = rest_field(
        name="orchestrationServices", visibility=["read"]
    )
    """The orchestration services information."""

    @overload
    def __init__(
        self,
        *,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetInstanceViewStatusesSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Instance view statuses summary for virtual machines of a virtual machine scale set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar statuses_summary: The extensions information.
    :vartype statuses_summary: list[~azure.mgmt.compute.models.VirtualMachineStatusCodeCount]
    """

    statuses_summary: Optional[List["_models.VirtualMachineStatusCodeCount"]] = rest_field(
        name="statusesSummary", visibility=["read"]
    )
    """The extensions information."""


class VirtualMachineScaleSetIPConfiguration(_model_base.Model):
    """Describes a virtual machine scale set network profile's IP configuration.


    :ivar name: The IP configuration name. Required.
    :vartype name: str
    :ivar properties: Describes a virtual machine scale set network profile's IP configuration
     properties.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineScaleSetIPConfigurationProperties
    """

    name: str = rest_field()
    """The IP configuration name. Required."""
    properties: Optional["_models.VirtualMachineScaleSetIPConfigurationProperties"] = rest_field()
    """Describes a virtual machine scale set network profile's IP configuration properties."""

    __flattened_items = [
        "subnet",
        "primary",
        "public_ip_address_configuration",
        "private_ip_address_version",
        "application_gateway_backend_address_pools",
        "application_security_groups",
        "load_balancer_backend_address_pools",
        "load_balancer_inbound_nat_pools",
    ]

    @overload
    def __init__(
        self,
        *,
        name: str,
        properties: Optional["_models.VirtualMachineScaleSetIPConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetIPConfigurationProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set network profile's IP configuration properties.

    :ivar subnet: Specifies the identifier of the subnet.
    :vartype subnet: ~azure.mgmt.compute.models.ApiEntityReference
    :ivar primary: Specifies the primary network interface in case the virtual machine has more
     than 1 network interface.
    :vartype primary: bool
    :ivar public_ip_address_configuration: The publicIPAddressConfiguration.
    :vartype public_ip_address_configuration:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetPublicIPAddressConfiguration
    :ivar private_ip_address_version: Available from Api-Version 2017-03-30 onwards, it represents
     whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible
     values are: 'IPv4' and 'IPv6'. Known values are: "IPv4" and "IPv6".
    :vartype private_ip_address_version: str or ~azure.mgmt.compute.models.IPVersion
    :ivar application_gateway_backend_address_pools: Specifies an array of references to backend
     address pools of application gateways. A scale set can reference backend address pools of
     multiple application gateways. Multiple scale sets cannot use the same application gateway.
    :vartype application_gateway_backend_address_pools:
     list[~azure.mgmt.compute.models.SubResource]
    :ivar application_security_groups: Specifies an array of references to application security
     group.
    :vartype application_security_groups: list[~azure.mgmt.compute.models.SubResource]
    :ivar load_balancer_backend_address_pools: Specifies an array of references to backend address
     pools of load balancers. A scale set can reference backend address pools of one public and one
     internal load balancer. Multiple scale sets cannot use the same basic sku load balancer.
    :vartype load_balancer_backend_address_pools: list[~azure.mgmt.compute.models.SubResource]
    :ivar load_balancer_inbound_nat_pools: Specifies an array of references to inbound Nat pools of
     the load balancers. A scale set can reference inbound nat pools of one public and one internal
     load balancer. Multiple scale sets cannot use the same basic sku load balancer.
    :vartype load_balancer_inbound_nat_pools: list[~azure.mgmt.compute.models.SubResource]
    """

    subnet: Optional["_models.ApiEntityReference"] = rest_field()
    """Specifies the identifier of the subnet."""
    primary: Optional[bool] = rest_field()
    """Specifies the primary network interface in case the virtual machine has more than 1 network
     interface."""
    public_ip_address_configuration: Optional["_models.VirtualMachineScaleSetPublicIPAddressConfiguration"] = (
        rest_field(name="publicIPAddressConfiguration")
    )
    """The publicIPAddressConfiguration."""
    private_ip_address_version: Optional[Union[str, "_models.IPVersion"]] = rest_field(name="privateIPAddressVersion")
    """Available from Api-Version 2017-03-30 onwards, it represents whether the specific
     ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and
     'IPv6'. Known values are: \"IPv4\" and \"IPv6\"."""
    application_gateway_backend_address_pools: Optional[List["_models.SubResource"]] = rest_field(
        name="applicationGatewayBackendAddressPools"
    )
    """Specifies an array of references to backend address pools of application gateways. A scale set
     can reference backend address pools of multiple application gateways. Multiple scale sets
     cannot use the same application gateway."""
    application_security_groups: Optional[List["_models.SubResource"]] = rest_field(name="applicationSecurityGroups")
    """Specifies an array of references to application security group."""
    load_balancer_backend_address_pools: Optional[List["_models.SubResource"]] = rest_field(
        name="loadBalancerBackendAddressPools"
    )
    """Specifies an array of references to backend address pools of load balancers. A scale set can
     reference backend address pools of one public and one internal load balancer. Multiple scale
     sets cannot use the same basic sku load balancer."""
    load_balancer_inbound_nat_pools: Optional[List["_models.SubResource"]] = rest_field(
        name="loadBalancerInboundNatPools"
    )
    """Specifies an array of references to inbound Nat pools of the load balancers. A scale set can
     reference inbound nat pools of one public and one internal load balancer. Multiple scale sets
     cannot use the same basic sku load balancer."""

    @overload
    def __init__(
        self,
        *,
        subnet: Optional["_models.ApiEntityReference"] = None,
        primary: Optional[bool] = None,
        public_ip_address_configuration: Optional["_models.VirtualMachineScaleSetPublicIPAddressConfiguration"] = None,
        private_ip_address_version: Optional[Union[str, "_models.IPVersion"]] = None,
        application_gateway_backend_address_pools: Optional[List["_models.SubResource"]] = None,
        application_security_groups: Optional[List["_models.SubResource"]] = None,
        load_balancer_backend_address_pools: Optional[List["_models.SubResource"]] = None,
        load_balancer_inbound_nat_pools: Optional[List["_models.SubResource"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetIpTag(_model_base.Model):
    """Contains the IP tag associated with the public IP address.

    :ivar ip_tag_type: IP tag type. Example: FirstPartyUsage.
    :vartype ip_tag_type: str
    :ivar tag: IP tag associated with the public IP. Example: SQL, Storage etc.
    :vartype tag: str
    """

    ip_tag_type: Optional[str] = rest_field(name="ipTagType")
    """IP tag type. Example: FirstPartyUsage."""
    tag: Optional[str] = rest_field()
    """IP tag associated with the public IP. Example: SQL, Storage etc."""

    @overload
    def __init__(
        self,
        *,
        ip_tag_type: Optional[str] = None,
        tag: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetManagedDiskParameters(_model_base.Model):  # pylint: disable=name-too-long
    """Describes the parameters of a ScaleSet managed disk.

    :ivar storage_account_type: Specifies the storage account type for the managed disk. NOTE:
     UltraSSD_LRS can only be used with data disks, it cannot be used with OS Disk. Known values
     are: "Standard_LRS", "Premium_LRS", "StandardSSD_LRS", "UltraSSD_LRS", "Premium_ZRS",
     "StandardSSD_ZRS", and "PremiumV2_LRS".
    :vartype storage_account_type: str or ~azure.mgmt.compute.models.StorageAccountTypes
    :ivar disk_encryption_set: Specifies the customer managed disk encryption set resource id for
     the managed disk.
    :vartype disk_encryption_set: ~azure.mgmt.compute.models.DiskEncryptionSetParameters
    :ivar security_profile: Specifies the security profile for the managed disk.
    :vartype security_profile: ~azure.mgmt.compute.models.VMDiskSecurityProfile
    """

    storage_account_type: Optional[Union[str, "_models.StorageAccountTypes"]] = rest_field(name="storageAccountType")
    """Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used
     with data disks, it cannot be used with OS Disk. Known values are: \"Standard_LRS\",
     \"Premium_LRS\", \"StandardSSD_LRS\", \"UltraSSD_LRS\", \"Premium_ZRS\", \"StandardSSD_ZRS\",
     and \"PremiumV2_LRS\"."""
    disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = rest_field(name="diskEncryptionSet")
    """Specifies the customer managed disk encryption set resource id for the managed disk."""
    security_profile: Optional["_models.VMDiskSecurityProfile"] = rest_field(name="securityProfile")
    """Specifies the security profile for the managed disk."""

    @overload
    def __init__(
        self,
        *,
        storage_account_type: Optional[Union[str, "_models.StorageAccountTypes"]] = None,
        disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = None,
        security_profile: Optional["_models.VMDiskSecurityProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetNetworkConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set network profile's network configurations.


    :ivar name: The network configuration name. Required.
    :vartype name: str
    :ivar properties: Describes a virtual machine scale set network profile's IP configuration.
    :vartype properties:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetNetworkConfigurationProperties
    """

    name: str = rest_field()
    """The network configuration name. Required."""
    properties: Optional["_models.VirtualMachineScaleSetNetworkConfigurationProperties"] = rest_field()
    """Describes a virtual machine scale set network profile's IP configuration."""

    __flattened_items = [
        "primary",
        "enable_accelerated_networking",
        "disable_tcp_state_tracking",
        "enable_fpga",
        "network_security_group",
        "dns_settings",
        "ip_configurations",
        "enable_ip_forwarding",
        "delete_option",
        "auxiliary_mode",
        "auxiliary_sku",
    ]

    @overload
    def __init__(
        self,
        *,
        name: str,
        properties: Optional["_models.VirtualMachineScaleSetNetworkConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetNetworkConfigurationDnsSettings(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machines scale sets network configuration's DNS settings.

    :ivar dns_servers: List of DNS servers IP addresses.
    :vartype dns_servers: list[str]
    """

    dns_servers: Optional[List[str]] = rest_field(name="dnsServers")
    """List of DNS servers IP addresses."""

    @overload
    def __init__(
        self,
        *,
        dns_servers: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetNetworkConfigurationProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set network profile's IP configuration.


    :ivar primary: Specifies the primary network interface in case the virtual machine has more
     than 1 network interface.
    :vartype primary: bool
    :ivar enable_accelerated_networking: Specifies whether the network interface is accelerated
     networking-enabled.
    :vartype enable_accelerated_networking: bool
    :ivar disable_tcp_state_tracking: Specifies whether the network interface is disabled for tcp
     state tracking.
    :vartype disable_tcp_state_tracking: bool
    :ivar enable_fpga: Specifies whether the network interface is FPGA networking-enabled.
    :vartype enable_fpga: bool
    :ivar network_security_group: The network security group.
    :vartype network_security_group: ~azure.mgmt.compute.models.SubResource
    :ivar dns_settings: The dns settings to be applied on the network interfaces.
    :vartype dns_settings:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings
    :ivar ip_configurations: Specifies the IP configurations of the network interface. Required.
    :vartype ip_configurations:
     list[~azure.mgmt.compute.models.VirtualMachineScaleSetIPConfiguration]
    :ivar enable_ip_forwarding: Whether IP forwarding enabled on this NIC.
    :vartype enable_ip_forwarding: bool
    :ivar delete_option: Specify what happens to the network interface when the VM is deleted.
     Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DeleteOptions
    :ivar auxiliary_mode: Specifies whether the Auxiliary mode is enabled for the Network Interface
     resource. Known values are: "None", "AcceleratedConnections", and "Floating".
    :vartype auxiliary_mode: str or ~azure.mgmt.compute.models.NetworkInterfaceAuxiliaryMode
    :ivar auxiliary_sku: Specifies whether the Auxiliary sku is enabled for the Network Interface
     resource. Known values are: "None", "A1", "A2", "A4", and "A8".
    :vartype auxiliary_sku: str or ~azure.mgmt.compute.models.NetworkInterfaceAuxiliarySku
    """

    primary: Optional[bool] = rest_field()
    """Specifies the primary network interface in case the virtual machine has more than 1 network
     interface."""
    enable_accelerated_networking: Optional[bool] = rest_field(name="enableAcceleratedNetworking")
    """Specifies whether the network interface is accelerated networking-enabled."""
    disable_tcp_state_tracking: Optional[bool] = rest_field(name="disableTcpStateTracking")
    """Specifies whether the network interface is disabled for tcp state tracking."""
    enable_fpga: Optional[bool] = rest_field(name="enableFpga")
    """Specifies whether the network interface is FPGA networking-enabled."""
    network_security_group: Optional["_models.SubResource"] = rest_field(name="networkSecurityGroup")
    """The network security group."""
    dns_settings: Optional["_models.VirtualMachineScaleSetNetworkConfigurationDnsSettings"] = rest_field(
        name="dnsSettings"
    )
    """The dns settings to be applied on the network interfaces."""
    ip_configurations: List["_models.VirtualMachineScaleSetIPConfiguration"] = rest_field(name="ipConfigurations")
    """Specifies the IP configurations of the network interface. Required."""
    enable_ip_forwarding: Optional[bool] = rest_field(name="enableIPForwarding")
    """Whether IP forwarding enabled on this NIC."""
    delete_option: Optional[Union[str, "_models.DeleteOptions"]] = rest_field(name="deleteOption")
    """Specify what happens to the network interface when the VM is deleted. Known values are:
     \"Delete\" and \"Detach\"."""
    auxiliary_mode: Optional[Union[str, "_models.NetworkInterfaceAuxiliaryMode"]] = rest_field(name="auxiliaryMode")
    """Specifies whether the Auxiliary mode is enabled for the Network Interface resource. Known
     values are: \"None\", \"AcceleratedConnections\", and \"Floating\"."""
    auxiliary_sku: Optional[Union[str, "_models.NetworkInterfaceAuxiliarySku"]] = rest_field(name="auxiliarySku")
    """Specifies whether the Auxiliary sku is enabled for the Network Interface resource. Known values
     are: \"None\", \"A1\", \"A2\", \"A4\", and \"A8\"."""

    @overload
    def __init__(
        self,
        *,
        ip_configurations: List["_models.VirtualMachineScaleSetIPConfiguration"],
        primary: Optional[bool] = None,
        enable_accelerated_networking: Optional[bool] = None,
        disable_tcp_state_tracking: Optional[bool] = None,
        enable_fpga: Optional[bool] = None,
        network_security_group: Optional["_models.SubResource"] = None,
        dns_settings: Optional["_models.VirtualMachineScaleSetNetworkConfigurationDnsSettings"] = None,
        enable_ip_forwarding: Optional[bool] = None,
        delete_option: Optional[Union[str, "_models.DeleteOptions"]] = None,
        auxiliary_mode: Optional[Union[str, "_models.NetworkInterfaceAuxiliaryMode"]] = None,
        auxiliary_sku: Optional[Union[str, "_models.NetworkInterfaceAuxiliarySku"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetNetworkProfile(_model_base.Model):
    """Describes a virtual machine scale set network profile.

    :ivar health_probe: A reference to a load balancer probe used to determine the health of an
     instance in the virtual machine scale set. The reference will be in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.  # pylint: disable=line-too-long
    :vartype health_probe: ~azure.mgmt.compute.models.ApiEntityReference
    :ivar network_interface_configurations: The list of network configurations.
    :vartype network_interface_configurations:
     list[~azure.mgmt.compute.models.VirtualMachineScaleSetNetworkConfiguration]
    :ivar network_api_version: specifies the Microsoft.Network API version used when creating
     networking resources in the Network Interface Configurations for Virtual Machine Scale Set with
     orchestration mode 'Flexible'. "2020-11-01"
    :vartype network_api_version: str or ~azure.mgmt.compute.models.NetworkApiVersion
    """

    health_probe: Optional["_models.ApiEntityReference"] = rest_field(name="healthProbe")
    """A reference to a load balancer probe used to determine the health of an instance in the virtual
     machine scale set. The reference will be in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.  # pylint: disable=line-too-long"""
    network_interface_configurations: Optional[List["_models.VirtualMachineScaleSetNetworkConfiguration"]] = rest_field(
        name="networkInterfaceConfigurations"
    )
    """The list of network configurations."""
    network_api_version: Optional[Union[str, "_models.NetworkApiVersion"]] = rest_field(name="networkApiVersion")
    """specifies the Microsoft.Network API version used when creating networking resources in the
     Network Interface Configurations for Virtual Machine Scale Set with orchestration mode
     'Flexible'. \"2020-11-01\""""

    @overload
    def __init__(
        self,
        *,
        health_probe: Optional["_models.ApiEntityReference"] = None,
        network_interface_configurations: Optional[List["_models.VirtualMachineScaleSetNetworkConfiguration"]] = None,
        network_api_version: Optional[Union[str, "_models.NetworkApiVersion"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetOSDisk(_model_base.Model):
    """Describes a virtual machine scale set operating system disk.


    :ivar name: The disk name.
    :vartype name: str
    :ivar caching: Specifies the caching requirements. Possible values are: **None,** **ReadOnly,**
     **ReadWrite.** The default values are: **None for Standard storage. ReadOnly for Premium
     storage.**. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar write_accelerator_enabled: Specifies whether writeAccelerator should be enabled or
     disabled on the disk.
    :vartype write_accelerator_enabled: bool
    :ivar create_option: Specifies how the virtual machines in the scale set should be created. The
     only allowed value is: **FromImage.** This value is used when you are using an image to create
     the virtual machine. If you are using a platform image, you also use the imageReference element
     described above. If you are using a marketplace image, you  also use the plan element
     previously described. Required. Known values are: "FromImage", "Empty", "Attach", "Copy", and
     "Restore".
    :vartype create_option: str or ~azure.mgmt.compute.models.DiskCreateOptionTypes
    :ivar diff_disk_settings: Specifies the ephemeral disk Settings for the operating system disk
     used by the virtual machine scale set.
    :vartype diff_disk_settings: ~azure.mgmt.compute.models.DiffDiskSettings
    :ivar disk_size_gb: Specifies the size of an empty data disk in gigabytes. This element can be
     used to overwrite the size of the disk in a virtual machine image. The property 'diskSizeGB' is
     the number of bytes x 1024^3 for the disk and the value cannot be larger than 1023.
    :vartype disk_size_gb: int
    :ivar os_type: This property allows you to specify the type of the OS that is included in the
     disk if creating a VM from user-image or a specialized VHD. Possible values are: **Windows,**
     **Linux.**. Known values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.compute.models.OperatingSystemTypes
    :ivar image: Specifies information about the unmanaged user image to base the scale set on.
    :vartype image: ~azure.mgmt.compute.models.VirtualHardDisk
    :ivar vhd_containers: Specifies the container urls that are used to store operating system
     disks for the scale set.
    :vartype vhd_containers: list[str]
    :ivar managed_disk: The managed disk parameters.
    :vartype managed_disk: ~azure.mgmt.compute.models.VirtualMachineScaleSetManagedDiskParameters
    :ivar delete_option: Specifies whether OS Disk should be deleted or detached upon VMSS Flex
     deletion (This feature is available for VMSS with Flexible OrchestrationMode only).
     :code:`<br>`:code:`<br>` Possible values: :code:`<br>`:code:`<br>` **Delete** If this value is
     used, the OS disk is deleted when VMSS Flex VM is deleted.:code:`<br>`:code:`<br>` **Detach**
     If this value is used, the OS disk is retained after VMSS Flex VM is deleted.
     :code:`<br>`:code:`<br>` The default value is set to **Delete**. For an Ephemeral OS Disk, the
     default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk.
     Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DiskDeleteOptionTypes
    """

    name: Optional[str] = rest_field()
    """The disk name."""
    caching: Optional[Union[str, "_models.CachingTypes"]] = rest_field()
    """Specifies the caching requirements. Possible values are: **None,** **ReadOnly,** **ReadWrite.**
     The default values are: **None for Standard storage. ReadOnly for Premium storage.**. Known
     values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    write_accelerator_enabled: Optional[bool] = rest_field(name="writeAcceleratorEnabled")
    """Specifies whether writeAccelerator should be enabled or disabled on the disk."""
    create_option: Union[str, "_models.DiskCreateOptionTypes"] = rest_field(name="createOption")
    """Specifies how the virtual machines in the scale set should be created. The only allowed value
     is: **FromImage.** This value is used when you are using an image to create the virtual
     machine. If you are using a platform image, you also use the imageReference element described
     above. If you are using a marketplace image, you  also use the plan element previously
     described. Required. Known values are: \"FromImage\", \"Empty\", \"Attach\", \"Copy\", and
     \"Restore\"."""
    diff_disk_settings: Optional["_models.DiffDiskSettings"] = rest_field(name="diffDiskSettings")
    """Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine
     scale set."""
    disk_size_gb: Optional[int] = rest_field(name="diskSizeGB")
    """Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite
     the size of the disk in a virtual machine image. The property 'diskSizeGB' is the number of
     bytes x 1024^3 for the disk and the value cannot be larger than 1023."""
    os_type: Optional[Union[str, "_models.OperatingSystemTypes"]] = rest_field(name="osType")
    """This property allows you to specify the type of the OS that is included in the disk if creating
     a VM from user-image or a specialized VHD. Possible values are: **Windows,** **Linux.**. Known
     values are: \"Windows\" and \"Linux\"."""
    image: Optional["_models.VirtualHardDisk"] = rest_field()
    """Specifies information about the unmanaged user image to base the scale set on."""
    vhd_containers: Optional[List[str]] = rest_field(name="vhdContainers")
    """Specifies the container urls that are used to store operating system disks for the scale set."""
    managed_disk: Optional["_models.VirtualMachineScaleSetManagedDiskParameters"] = rest_field(name="managedDisk")
    """The managed disk parameters."""
    delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = rest_field(name="deleteOption")
    """Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature
     is available for VMSS with Flexible OrchestrationMode only). :code:`<br>`:code:`<br>` Possible
     values: :code:`<br>`:code:`<br>` **Delete** If this value is used, the OS disk is deleted when
     VMSS Flex VM is deleted.:code:`<br>`:code:`<br>` **Detach** If this value is used, the OS disk
     is retained after VMSS Flex VM is deleted. :code:`<br>`:code:`<br>` The default value is set to
     **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot
     change the delete option for Ephemeral OS Disk. Known values are: \"Delete\" and \"Detach\"."""

    @overload
    def __init__(
        self,
        *,
        create_option: Union[str, "_models.DiskCreateOptionTypes"],
        name: Optional[str] = None,
        caching: Optional[Union[str, "_models.CachingTypes"]] = None,
        write_accelerator_enabled: Optional[bool] = None,
        diff_disk_settings: Optional["_models.DiffDiskSettings"] = None,
        disk_size_gb: Optional[int] = None,
        os_type: Optional[Union[str, "_models.OperatingSystemTypes"]] = None,
        image: Optional["_models.VirtualHardDisk"] = None,
        vhd_containers: Optional[List[str]] = None,
        managed_disk: Optional["_models.VirtualMachineScaleSetManagedDiskParameters"] = None,
        delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetOSProfile(_model_base.Model):
    """Describes a virtual machine scale set OS profile.

    :ivar computer_name_prefix: Specifies the computer name prefix for all of the virtual machines
     in the scale set. Computer name prefixes must be 1 to 15 characters long.
    :vartype computer_name_prefix: str
    :ivar admin_username: Specifies the name of the administrator account. :code:`<br>`:code:`<br>`
     **Windows-only restriction:** Cannot end in "." :code:`<br>`:code:`<br>` **Disallowed values:**
     "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1",
     "123", "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest",
     "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2",
     "test3", "user4", "user5". :code:`<br>`:code:`<br>` **Minimum-length (Linux):** 1  character
     :code:`<br>`:code:`<br>` **Max-length (Linux):** 64 characters :code:`<br>`:code:`<br>`
     **Max-length (Windows):** 20 characters.
    :vartype admin_username: str
    :ivar admin_password: Specifies the password of the administrator account.
     :code:`<br>`:code:`<br>` **Minimum-length (Windows):** 8 characters :code:`<br>`:code:`<br>`
     **Minimum-length (Linux):** 6 characters :code:`<br>`:code:`<br>` **Max-length (Windows):** 123
     characters :code:`<br>`:code:`<br>` **Max-length (Linux):** 72 characters
     :code:`<br>`:code:`<br>` **Complexity requirements:** 3 out of 4 conditions below need to be
     fulfilled :code:`<br>` Has lower characters :code:`<br>`Has upper characters :code:`<br>` Has a
     digit :code:`<br>` Has a special character (Regex match [\\W_]) :code:`<br>`:code:`<br>`
     **Disallowed values:** "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word",
     "pass@word1", "Password!", "Password1", "Password22", "iloveyou!" :code:`<br>`:code:`<br>` For
     resetting the password, see `How to reset the Remote Desktop service or its login password in a
     Windows VM <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp>`_
     :code:`<br>`:code:`<br>` For resetting root password, see `Manage users, SSH, and check or
     repair disks on Azure Linux VMs using the VMAccess Extension
     <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection>`_.
    :vartype admin_password: str
    :ivar custom_data: Specifies a base-64 encoded string of custom data. The base-64 encoded
     string is decoded to a binary array that is saved as a file on the Virtual Machine. The maximum
     length of the binary array is 65535 bytes. For using cloud-init for your VM, see `Using
     cloud-init to customize a Linux VM during creation
     <https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init>`_.
    :vartype custom_data: str
    :ivar windows_configuration: Specifies Windows operating system settings on the virtual
     machine.
    :vartype windows_configuration: ~azure.mgmt.compute.models.WindowsConfiguration
    :ivar linux_configuration: Specifies the Linux operating system settings on the virtual
     machine. For a list of supported Linux distributions, see `Linux on Azure-Endorsed
     Distributions <https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros>`_.
    :vartype linux_configuration: ~azure.mgmt.compute.models.LinuxConfiguration
    :ivar secrets: Specifies set of certificates that should be installed onto the virtual machines
     in the scale set. To install certificates on a virtual machine it is recommended to use the
     `Azure Key Vault virtual machine extension for Linux
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux>`_ or the `Azure
     Key Vault virtual machine extension for Windows
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows>`_.
    :vartype secrets: list[~azure.mgmt.compute.models.VaultSecretGroup]
    :ivar allow_extension_operations: Specifies whether extension operations should be allowed on
     the virtual machine scale set. This may only be set to False when no extensions are present on
     the virtual machine scale set.
    :vartype allow_extension_operations: bool
    :ivar require_guest_provision_signal: Optional property which must either be set to True or
     omitted.
    :vartype require_guest_provision_signal: bool
    """

    computer_name_prefix: Optional[str] = rest_field(name="computerNamePrefix")
    """Specifies the computer name prefix for all of the virtual machines in the scale set. Computer
     name prefixes must be 1 to 15 characters long."""
    admin_username: Optional[str] = rest_field(name="adminUsername")
    """Specifies the name of the administrator account. :code:`<br>`:code:`<br>` **Windows-only
     restriction:** Cannot end in \".\" :code:`<br>`:code:`<br>` **Disallowed values:**
     \"administrator\", \"admin\", \"user\", \"user1\", \"test\", \"user2\", \"test1\", \"user3\",
     \"admin1\", \"1\", \"123\", \"a\", \"actuser\", \"adm\", \"admin2\", \"aspnet\", \"backup\",
     \"console\", \"david\", \"guest\", \"john\", \"owner\", \"root\", \"server\", \"sql\",
     \"support\", \"support_388945a0\", \"sys\", \"test2\", \"test3\", \"user4\", \"user5\".
     :code:`<br>`:code:`<br>` **Minimum-length (Linux):** 1  character :code:`<br>`:code:`<br>`
     **Max-length (Linux):** 64 characters :code:`<br>`:code:`<br>` **Max-length (Windows):** 20
     characters."""
    admin_password: Optional[str] = rest_field(name="adminPassword")
    """Specifies the password of the administrator account. :code:`<br>`:code:`<br>` **Minimum-length
     (Windows):** 8 characters :code:`<br>`:code:`<br>` **Minimum-length (Linux):** 6 characters
     :code:`<br>`:code:`<br>` **Max-length (Windows):** 123 characters :code:`<br>`:code:`<br>`
     **Max-length (Linux):** 72 characters :code:`<br>`:code:`<br>` **Complexity requirements:** 3
     out of 4 conditions below need to be fulfilled :code:`<br>` Has lower characters
     :code:`<br>`Has upper characters :code:`<br>` Has a digit :code:`<br>` Has a special character
     (Regex match [\W_]) :code:`<br>`:code:`<br>` **Disallowed values:** \"abc@123\", \"P@$$w0rd\",
     \"P@ssw0rd\", \"P@ssword123\", \"Pa$$word\", \"pass@word1\", \"Password!\", \"Password1\",
     \"Password22\", \"iloveyou!\" :code:`<br>`:code:`<br>` For resetting the password, see `How to
     reset the Remote Desktop service or its login password in a Windows VM
     <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp>`_
     :code:`<br>`:code:`<br>` For resetting root password, see `Manage users, SSH, and check or
     repair disks on Azure Linux VMs using the VMAccess Extension
     <https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection>`_."""
    custom_data: Optional[str] = rest_field(name="customData")
    """Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a
     binary array that is saved as a file on the Virtual Machine. The maximum length of the binary
     array is 65535 bytes. For using cloud-init for your VM, see `Using cloud-init to customize a
     Linux VM during creation
     <https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init>`_."""
    windows_configuration: Optional["_models.WindowsConfiguration"] = rest_field(name="windowsConfiguration")
    """Specifies Windows operating system settings on the virtual machine."""
    linux_configuration: Optional["_models.LinuxConfiguration"] = rest_field(name="linuxConfiguration")
    """Specifies the Linux operating system settings on the virtual machine. For a list of supported
     Linux distributions, see `Linux on Azure-Endorsed Distributions
     <https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros>`_."""
    secrets: Optional[List["_models.VaultSecretGroup"]] = rest_field()
    """Specifies set of certificates that should be installed onto the virtual machines in the scale
     set. To install certificates on a virtual machine it is recommended to use the `Azure Key Vault
     virtual machine extension for Linux
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux>`_ or the `Azure
     Key Vault virtual machine extension for Windows
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows>`_."""
    allow_extension_operations: Optional[bool] = rest_field(name="allowExtensionOperations")
    """Specifies whether extension operations should be allowed on the virtual machine scale set. This
     may only be set to False when no extensions are present on the virtual machine scale set."""
    require_guest_provision_signal: Optional[bool] = rest_field(name="requireGuestProvisionSignal")
    """Optional property which must either be set to True or omitted."""

    @overload
    def __init__(
        self,
        *,
        computer_name_prefix: Optional[str] = None,
        admin_username: Optional[str] = None,
        admin_password: Optional[str] = None,
        custom_data: Optional[str] = None,
        windows_configuration: Optional["_models.WindowsConfiguration"] = None,
        linux_configuration: Optional["_models.LinuxConfiguration"] = None,
        secrets: Optional[List["_models.VaultSecretGroup"]] = None,
        allow_extension_operations: Optional[bool] = None,
        require_guest_provision_signal: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetProperties(_model_base.Model):
    """Describes the properties of a Virtual Machine Scale Set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar upgrade_policy: The upgrade policy.
    :vartype upgrade_policy: ~azure.mgmt.compute.models.UpgradePolicy
    :ivar scheduled_events_policy: The ScheduledEventsPolicy.
    :vartype scheduled_events_policy: ~azure.mgmt.compute.models.ScheduledEventsPolicy
    :ivar automatic_repairs_policy: Policy for automatic repairs.
    :vartype automatic_repairs_policy: ~azure.mgmt.compute.models.AutomaticRepairsPolicy
    :ivar virtual_machine_profile: The virtual machine profile.
    :vartype virtual_machine_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetVMProfile
    :ivar provisioning_state: The provisioning state, which only appears in the response.
    :vartype provisioning_state: str
    :ivar overprovision: Specifies whether the Virtual Machine Scale Set should be overprovisioned.
    :vartype overprovision: bool
    :ivar do_not_run_extensions_on_overprovisioned_v_ms: When Overprovision is enabled, extensions
     are launched only on the requested number of VMs which are finally kept. This property will
     hence ensure that the extensions do not run on the extra overprovisioned VMs.
    :vartype do_not_run_extensions_on_overprovisioned_v_ms: bool
    :ivar unique_id: Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
    :vartype unique_id: str
    :ivar single_placement_group: When true this limits the scale set to a single placement group,
     of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to
     false. However, if singlePlacementGroup is false, it may not be modified to true.
    :vartype single_placement_group: bool
    :ivar zone_balance: Whether to force strictly even Virtual Machine distribution cross x-zones
     in case there is zone outage. zoneBalance property can only be set if the zones property of the
     scale set contains more than one zone. If there are no zones or only one zone specified, then
     zoneBalance property should not be set.
    :vartype zone_balance: bool
    :ivar platform_fault_domain_count: Fault Domain count for each placement group.
    :vartype platform_fault_domain_count: int
    :ivar proximity_placement_group: Specifies information about the proximity placement group that
     the virtual machine scale set should be assigned to. Minimum api-version: 2018-04-01.
    :vartype proximity_placement_group: ~azure.mgmt.compute.models.SubResource
    :ivar host_group: Specifies information about the dedicated host group that the virtual machine
     scale set resides in. Minimum api-version: 2020-06-01.
    :vartype host_group: ~azure.mgmt.compute.models.SubResource
    :ivar additional_capabilities: Specifies additional capabilities enabled or disabled on the
     Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines
     have the capability to support attaching managed data disks with UltraSSD_LRS storage account
     type.
    :vartype additional_capabilities: ~azure.mgmt.compute.models.AdditionalCapabilities
    :ivar scale_in_policy: Specifies the policies applied when scaling in Virtual Machines in the
     Virtual Machine Scale Set.
    :vartype scale_in_policy: ~azure.mgmt.compute.models.ScaleInPolicy
    :ivar orchestration_mode: Specifies the orchestration mode for the virtual machine scale set.
     Known values are: "Uniform" and "Flexible".
    :vartype orchestration_mode: str or ~azure.mgmt.compute.models.OrchestrationMode
    :ivar spot_restore_policy: Specifies the Spot Restore properties for the virtual machine scale
     set.
    :vartype spot_restore_policy: ~azure.mgmt.compute.models.SpotRestorePolicy
    :ivar priority_mix_policy: Specifies the desired targets for mixing Spot and Regular priority
     VMs within the same VMSS Flex instance.
    :vartype priority_mix_policy: ~azure.mgmt.compute.models.PriorityMixPolicy
    :ivar time_created: Specifies the time at which the Virtual Machine Scale Set resource was
     created. Minimum api-version: 2021-11-01.
    :vartype time_created: ~datetime.datetime
    :ivar constrained_maximum_capacity: Optional property which must either be set to True or
     omitted.
    :vartype constrained_maximum_capacity: bool
    :ivar resiliency_policy: Policy for Resiliency.
    :vartype resiliency_policy: ~azure.mgmt.compute.models.ResiliencyPolicy
    :ivar zonal_platform_fault_domain_align_mode: Specifies the align mode between Virtual Machine
     Scale Set compute and storage Fault Domain count. Known values are: "Aligned" and "Unaligned".
    :vartype zonal_platform_fault_domain_align_mode: str or
     ~azure.mgmt.compute.models.ZonalPlatformFaultDomainAlignMode
    :ivar sku_profile: Specifies the sku profile for the virtual machine scale set.
    :vartype sku_profile: ~azure.mgmt.compute.models.SkuProfile
    """

    upgrade_policy: Optional["_models.UpgradePolicy"] = rest_field(name="upgradePolicy")
    """The upgrade policy."""
    scheduled_events_policy: Optional["_models.ScheduledEventsPolicy"] = rest_field(name="scheduledEventsPolicy")
    """The ScheduledEventsPolicy."""
    automatic_repairs_policy: Optional["_models.AutomaticRepairsPolicy"] = rest_field(name="automaticRepairsPolicy")
    """Policy for automatic repairs."""
    virtual_machine_profile: Optional["_models.VirtualMachineScaleSetVMProfile"] = rest_field(
        name="virtualMachineProfile"
    )
    """The virtual machine profile."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state, which only appears in the response."""
    overprovision: Optional[bool] = rest_field()
    """Specifies whether the Virtual Machine Scale Set should be overprovisioned."""
    do_not_run_extensions_on_overprovisioned_v_ms: Optional[bool] = rest_field(
        name="doNotRunExtensionsOnOverprovisionedVMs"
    )
    """When Overprovision is enabled, extensions are launched only on the requested number of VMs
     which are finally kept. This property will hence ensure that the extensions do not run on the
     extra overprovisioned VMs."""
    unique_id: Optional[str] = rest_field(name="uniqueId", visibility=["read"])
    """Specifies the ID which uniquely identifies a Virtual Machine Scale Set."""
    single_placement_group: Optional[bool] = rest_field(name="singlePlacementGroup")
    """When true this limits the scale set to a single placement group, of max size 100 virtual
     machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if
     singlePlacementGroup is false, it may not be modified to true."""
    zone_balance: Optional[bool] = rest_field(name="zoneBalance")
    """Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone
     outage. zoneBalance property can only be set if the zones property of the scale set contains
     more than one zone. If there are no zones or only one zone specified, then zoneBalance property
     should not be set."""
    platform_fault_domain_count: Optional[int] = rest_field(name="platformFaultDomainCount")
    """Fault Domain count for each placement group."""
    proximity_placement_group: Optional["_models.SubResource"] = rest_field(name="proximityPlacementGroup")
    """Specifies information about the proximity placement group that the virtual machine scale set
     should be assigned to. Minimum api-version: 2018-04-01."""
    host_group: Optional["_models.SubResource"] = rest_field(name="hostGroup")
    """Specifies information about the dedicated host group that the virtual machine scale set resides
     in. Minimum api-version: 2020-06-01."""
    additional_capabilities: Optional["_models.AdditionalCapabilities"] = rest_field(name="additionalCapabilities")
    """Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual
     Machine Scale Set. For instance: whether the Virtual Machines have the capability to support
     attaching managed data disks with UltraSSD_LRS storage account type."""
    scale_in_policy: Optional["_models.ScaleInPolicy"] = rest_field(name="scaleInPolicy")
    """Specifies the policies applied when scaling in Virtual Machines in the Virtual Machine Scale
     Set."""
    orchestration_mode: Optional[Union[str, "_models.OrchestrationMode"]] = rest_field(name="orchestrationMode")
    """Specifies the orchestration mode for the virtual machine scale set. Known values are:
     \"Uniform\" and \"Flexible\"."""
    spot_restore_policy: Optional["_models.SpotRestorePolicy"] = rest_field(name="spotRestorePolicy")
    """Specifies the Spot Restore properties for the virtual machine scale set."""
    priority_mix_policy: Optional["_models.PriorityMixPolicy"] = rest_field(name="priorityMixPolicy")
    """Specifies the desired targets for mixing Spot and Regular priority VMs within the same VMSS
     Flex instance."""
    time_created: Optional[datetime.datetime] = rest_field(name="timeCreated", visibility=["read"], format="rfc3339")
    """Specifies the time at which the Virtual Machine Scale Set resource was created. Minimum
     api-version: 2021-11-01."""
    constrained_maximum_capacity: Optional[bool] = rest_field(name="constrainedMaximumCapacity")
    """Optional property which must either be set to True or omitted."""
    resiliency_policy: Optional["_models.ResiliencyPolicy"] = rest_field(name="resiliencyPolicy")
    """Policy for Resiliency."""
    zonal_platform_fault_domain_align_mode: Optional[Union[str, "_models.ZonalPlatformFaultDomainAlignMode"]] = (
        rest_field(name="zonalPlatformFaultDomainAlignMode")
    )
    """Specifies the align mode between Virtual Machine Scale Set compute and storage Fault Domain
     count. Known values are: \"Aligned\" and \"Unaligned\"."""
    sku_profile: Optional["_models.SkuProfile"] = rest_field(name="skuProfile")
    """Specifies the sku profile for the virtual machine scale set."""

    @overload
    def __init__(
        self,
        *,
        upgrade_policy: Optional["_models.UpgradePolicy"] = None,
        scheduled_events_policy: Optional["_models.ScheduledEventsPolicy"] = None,
        automatic_repairs_policy: Optional["_models.AutomaticRepairsPolicy"] = None,
        virtual_machine_profile: Optional["_models.VirtualMachineScaleSetVMProfile"] = None,
        overprovision: Optional[bool] = None,
        do_not_run_extensions_on_overprovisioned_v_ms: Optional[bool] = None,
        single_placement_group: Optional[bool] = None,
        zone_balance: Optional[bool] = None,
        platform_fault_domain_count: Optional[int] = None,
        proximity_placement_group: Optional["_models.SubResource"] = None,
        host_group: Optional["_models.SubResource"] = None,
        additional_capabilities: Optional["_models.AdditionalCapabilities"] = None,
        scale_in_policy: Optional["_models.ScaleInPolicy"] = None,
        orchestration_mode: Optional[Union[str, "_models.OrchestrationMode"]] = None,
        spot_restore_policy: Optional["_models.SpotRestorePolicy"] = None,
        priority_mix_policy: Optional["_models.PriorityMixPolicy"] = None,
        constrained_maximum_capacity: Optional[bool] = None,
        resiliency_policy: Optional["_models.ResiliencyPolicy"] = None,
        zonal_platform_fault_domain_align_mode: Optional[
            Union[str, "_models.ZonalPlatformFaultDomainAlignMode"]
        ] = None,
        sku_profile: Optional["_models.SkuProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetPublicIPAddressConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration.


    :ivar name: The publicIP address configuration name. Required.
    :vartype name: str
    :ivar properties: Describes a virtual machines scale set IP Configuration's PublicIPAddress
     configuration.
    :vartype properties:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties
    :ivar sku: Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
    :vartype sku: ~azure.mgmt.compute.models.PublicIPAddressSku
    """

    name: str = rest_field()
    """The publicIP address configuration name. Required."""
    properties: Optional["_models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties"] = rest_field()
    """Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration."""
    sku: Optional["_models.PublicIPAddressSku"] = rest_field()
    """Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible."""

    __flattened_items = [
        "idle_timeout_in_minutes",
        "dns_settings",
        "ip_tags",
        "public_ip_prefix",
        "public_ip_address_version",
        "delete_option",
    ]

    @overload
    def __init__(
        self,
        *,
        name: str,
        properties: Optional["_models.VirtualMachineScaleSetPublicIPAddressConfigurationProperties"] = None,
        sku: Optional["_models.PublicIPAddressSku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machines scale sets network configuration's DNS settings.


    :ivar domain_name_label: The Domain name label.The concatenation of the domain name label and
     vm index will be the domain name labels of the PublicIPAddress resources that will be created.
     Required.
    :vartype domain_name_label: str
    :ivar domain_name_label_scope: The Domain name label scope.The concatenation of the hashed
     domain name label that generated according to the policy from domain name label scope and vm
     index will be the domain name labels of the PublicIPAddress resources that will be created.
     Known values are: "TenantReuse", "SubscriptionReuse", "ResourceGroupReuse", and "NoReuse".
    :vartype domain_name_label_scope: str or ~azure.mgmt.compute.models.DomainNameLabelScopeTypes
    """

    domain_name_label: str = rest_field(name="domainNameLabel")
    """The Domain name label.The concatenation of the domain name label and vm index will be the
     domain name labels of the PublicIPAddress resources that will be created. Required."""
    domain_name_label_scope: Optional[Union[str, "_models.DomainNameLabelScopeTypes"]] = rest_field(
        name="domainNameLabelScope"
    )
    """The Domain name label scope.The concatenation of the hashed domain name label that generated
     according to the policy from domain name label scope and vm index will be the domain name
     labels of the PublicIPAddress resources that will be created. Known values are:
     \"TenantReuse\", \"SubscriptionReuse\", \"ResourceGroupReuse\", and \"NoReuse\"."""

    @overload
    def __init__(
        self,
        *,
        domain_name_label: str,
        domain_name_label_scope: Optional[Union[str, "_models.DomainNameLabelScopeTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetPublicIPAddressConfigurationProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration.

    :ivar idle_timeout_in_minutes: The idle timeout of the public IP address.
    :vartype idle_timeout_in_minutes: int
    :ivar dns_settings: The dns settings to be applied on the publicIP addresses .
    :vartype dns_settings:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings
    :ivar ip_tags: The list of IP tags associated with the public IP address.
    :vartype ip_tags: list[~azure.mgmt.compute.models.VirtualMachineScaleSetIpTag]
    :ivar public_ip_prefix: The PublicIPPrefix from which to allocate publicIP addresses.
    :vartype public_ip_prefix: ~azure.mgmt.compute.models.SubResource
    :ivar public_ip_address_version: Available from Api-Version 2019-07-01 onwards, it represents
     whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values
     are: 'IPv4' and 'IPv6'. Known values are: "IPv4" and "IPv6".
    :vartype public_ip_address_version: str or ~azure.mgmt.compute.models.IPVersion
    :ivar delete_option: Specify what happens to the public IP when the VM is deleted. Known values
     are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DeleteOptions
    """

    idle_timeout_in_minutes: Optional[int] = rest_field(name="idleTimeoutInMinutes")
    """The idle timeout of the public IP address."""
    dns_settings: Optional["_models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings"] = rest_field(
        name="dnsSettings"
    )
    """The dns settings to be applied on the publicIP addresses ."""
    ip_tags: Optional[List["_models.VirtualMachineScaleSetIpTag"]] = rest_field(name="ipTags")
    """The list of IP tags associated with the public IP address."""
    public_ip_prefix: Optional["_models.SubResource"] = rest_field(name="publicIPPrefix")
    """The PublicIPPrefix from which to allocate publicIP addresses."""
    public_ip_address_version: Optional[Union[str, "_models.IPVersion"]] = rest_field(name="publicIPAddressVersion")
    """Available from Api-Version 2019-07-01 onwards, it represents whether the specific
     ipconfiguration is IPv4 or IPv6. Default is taken as IPv4. Possible values are: 'IPv4' and
     'IPv6'. Known values are: \"IPv4\" and \"IPv6\"."""
    delete_option: Optional[Union[str, "_models.DeleteOptions"]] = rest_field(name="deleteOption")
    """Specify what happens to the public IP when the VM is deleted. Known values are: \"Delete\" and
     \"Detach\"."""

    @overload
    def __init__(
        self,
        *,
        idle_timeout_in_minutes: Optional[int] = None,
        dns_settings: Optional["_models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings"] = None,
        ip_tags: Optional[List["_models.VirtualMachineScaleSetIpTag"]] = None,
        public_ip_prefix: Optional["_models.SubResource"] = None,
        public_ip_address_version: Optional[Union[str, "_models.IPVersion"]] = None,
        delete_option: Optional[Union[str, "_models.DeleteOptions"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetVMReimageParameters(VirtualMachineReimageParameters):  # pylint: disable=name-too-long
    """Describes a Virtual Machine Scale Set VM Reimage Parameters.

    :ivar temp_disk: Specifies whether to reimage temp disk. Default value: false. Note: This temp
     disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
    :vartype temp_disk: bool
    :ivar exact_version: Specifies in decimal number, the version the OS disk should be reimaged
     to. If exact version is not provided, the OS disk is reimaged to the existing version of OS
     Disk.
    :vartype exact_version: str
    :ivar os_profile: Specifies information required for reimaging the non-ephemeral OS disk.
    :vartype os_profile: ~azure.mgmt.compute.models.OSProfileProvisioningData
    :ivar force_update_os_disk_for_ephemeral: Parameter to force update ephemeral OS disk for a
     virtual machine scale set VM.
    :vartype force_update_os_disk_for_ephemeral: bool
    """

    force_update_os_disk_for_ephemeral: Optional[bool] = rest_field(name="forceUpdateOSDiskForEphemeral")
    """Parameter to force update ephemeral OS disk for a virtual machine scale set VM."""

    @overload
    def __init__(
        self,
        *,
        temp_disk: Optional[bool] = None,
        exact_version: Optional[str] = None,
        os_profile: Optional["_models.OSProfileProvisioningData"] = None,
        force_update_os_disk_for_ephemeral: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetReimageParameters(VirtualMachineScaleSetVMReimageParameters):
    """Describes a Virtual Machine Scale Set VM Reimage Parameters.

    :ivar temp_disk: Specifies whether to reimage temp disk. Default value: false. Note: This temp
     disk reimage parameter is only supported for VM/VMSS with Ephemeral OS disk.
    :vartype temp_disk: bool
    :ivar exact_version: Specifies in decimal number, the version the OS disk should be reimaged
     to. If exact version is not provided, the OS disk is reimaged to the existing version of OS
     Disk.
    :vartype exact_version: str
    :ivar os_profile: Specifies information required for reimaging the non-ephemeral OS disk.
    :vartype os_profile: ~azure.mgmt.compute.models.OSProfileProvisioningData
    :ivar force_update_os_disk_for_ephemeral: Parameter to force update ephemeral OS disk for a
     virtual machine scale set VM.
    :vartype force_update_os_disk_for_ephemeral: bool
    :ivar instance_ids: The virtual machine scale set instance ids. Omitting the virtual machine
     scale set instance ids will result in the operation being performed on all virtual machines in
     the virtual machine scale set.
    :vartype instance_ids: list[str]
    """

    instance_ids: Optional[List[str]] = rest_field(name="instanceIds")
    """The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids
     will result in the operation being performed on all virtual machines in the virtual machine
     scale set."""

    @overload
    def __init__(
        self,
        *,
        temp_disk: Optional[bool] = None,
        exact_version: Optional[str] = None,
        os_profile: Optional["_models.OSProfileProvisioningData"] = None,
        force_update_os_disk_for_ephemeral: Optional[bool] = None,
        instance_ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetSku(_model_base.Model):
    """Describes an available virtual machine scale set sku.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar resource_type: The type of resource the sku applies to.
    :vartype resource_type: str
    :ivar sku: The Sku.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    :ivar capacity: Specifies the number of virtual machines in the scale set.
    :vartype capacity: ~azure.mgmt.compute.models.VirtualMachineScaleSetSkuCapacity
    """

    resource_type: Optional[str] = rest_field(name="resourceType", visibility=["read"])
    """The type of resource the sku applies to."""
    sku: Optional["_models.Sku"] = rest_field(visibility=["read"])
    """The Sku."""
    capacity: Optional["_models.VirtualMachineScaleSetSkuCapacity"] = rest_field(visibility=["read"])
    """Specifies the number of virtual machines in the scale set."""


class VirtualMachineScaleSetSkuCapacity(_model_base.Model):
    """Describes scaling information of a sku.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar minimum: The minimum capacity.
    :vartype minimum: int
    :ivar maximum: The maximum capacity that can be set.
    :vartype maximum: int
    :ivar default_capacity: The default capacity.
    :vartype default_capacity: int
    :ivar scale_type: The scale type applicable to the sku. Known values are: "Automatic" and
     "None".
    :vartype scale_type: str or ~azure.mgmt.compute.models.VirtualMachineScaleSetSkuScaleType
    """

    minimum: Optional[int] = rest_field(visibility=["read"])
    """The minimum capacity."""
    maximum: Optional[int] = rest_field(visibility=["read"])
    """The maximum capacity that can be set."""
    default_capacity: Optional[int] = rest_field(name="defaultCapacity", visibility=["read"])
    """The default capacity."""
    scale_type: Optional[Union[str, "_models.VirtualMachineScaleSetSkuScaleType"]] = rest_field(
        name="scaleType", visibility=["read"]
    )
    """The scale type applicable to the sku. Known values are: \"Automatic\" and \"None\"."""


class VirtualMachineScaleSetStorageProfile(_model_base.Model):
    """Describes a virtual machine scale set storage profile.

    :ivar image_reference: Specifies information about the image to use. You can specify
     information about platform images, marketplace images, or virtual machine images. This element
     is required when you want to use a platform image, marketplace image, or virtual machine image,
     but is not used in other creation operations.
    :vartype image_reference: ~azure.mgmt.compute.models.ImageReference
    :ivar os_disk: Specifies information about the operating system disk used by the virtual
     machines in the scale set. For more information about disks, see `About disks and VHDs for
     Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_.
    :vartype os_disk: ~azure.mgmt.compute.models.VirtualMachineScaleSetOSDisk
    :ivar data_disks: Specifies the parameters that are used to add data disks to the virtual
     machines in the scale set. For more information about disks, see `About disks and VHDs for
     Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_.
    :vartype data_disks: list[~azure.mgmt.compute.models.VirtualMachineScaleSetDataDisk]
    :ivar disk_controller_type:
    :vartype disk_controller_type: str
    """

    image_reference: Optional["_models.ImageReference"] = rest_field(name="imageReference")
    """Specifies information about the image to use. You can specify information about platform
     images, marketplace images, or virtual machine images. This element is required when you want
     to use a platform image, marketplace image, or virtual machine image, but is not used in other
     creation operations."""
    os_disk: Optional["_models.VirtualMachineScaleSetOSDisk"] = rest_field(name="osDisk")
    """Specifies information about the operating system disk used by the virtual machines in the scale
     set. For more information about disks, see `About disks and VHDs for Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_."""
    data_disks: Optional[List["_models.VirtualMachineScaleSetDataDisk"]] = rest_field(name="dataDisks")
    """Specifies the parameters that are used to add data disks to the virtual machines in the scale
     set. For more information about disks, see `About disks and VHDs for Azure virtual machines
     <https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview>`_."""
    disk_controller_type: Optional[str] = rest_field(name="diskControllerType")

    @overload
    def __init__(
        self,
        *,
        image_reference: Optional["_models.ImageReference"] = None,
        os_disk: Optional["_models.VirtualMachineScaleSetOSDisk"] = None,
        data_disks: Optional[List["_models.VirtualMachineScaleSetDataDisk"]] = None,
        disk_controller_type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetUpdate(UpdateResource):
    """Describes a Virtual Machine Scale Set.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar sku: The virtual machine scale set sku.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    :ivar plan: The purchase plan when deploying a virtual machine scale set from VM Marketplace
     images.
    :vartype plan: ~azure.mgmt.compute.models.Plan
    :ivar properties: Describes the properties of a Virtual Machine Scale Set.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateProperties
    :ivar identity: The identity of the virtual machine scale set, if configured.
    :vartype identity: ~azure.mgmt.compute.models.VirtualMachineScaleSetIdentity
    :ivar zones: The virtual machine scale set zones.
    :vartype zones: list[str]
    """

    sku: Optional["_models.Sku"] = rest_field()
    """The virtual machine scale set sku."""
    plan: Optional["_models.Plan"] = rest_field()
    """The purchase plan when deploying a virtual machine scale set from VM Marketplace images."""
    properties: Optional["_models.VirtualMachineScaleSetUpdateProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Scale Set."""
    identity: Optional["_models.VirtualMachineScaleSetIdentity"] = rest_field()
    """The identity of the virtual machine scale set, if configured."""
    zones: Optional[List[str]] = rest_field()
    """The virtual machine scale set zones."""

    __flattened_items = [
        "upgrade_policy",
        "automatic_repairs_policy",
        "virtual_machine_profile",
        "overprovision",
        "do_not_run_extensions_on_overprovisioned_v_ms",
        "single_placement_group",
        "additional_capabilities",
        "scale_in_policy",
        "proximity_placement_group",
        "priority_mix_policy",
        "spot_restore_policy",
        "resiliency_policy",
        "zonal_platform_fault_domain_align_mode",
        "sku_profile",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        sku: Optional["_models.Sku"] = None,
        plan: Optional["_models.Plan"] = None,
        properties: Optional["_models.VirtualMachineScaleSetUpdateProperties"] = None,
        identity: Optional["_models.VirtualMachineScaleSetIdentity"] = None,
        zones: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetUpdateIPConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set network profile's IP configuration. NOTE: The subnet of a
    scale set may be modified as long as the original subnet and the new subnet are in the same
    virtual network.

    :ivar name: The IP configuration name.
    :vartype name: str
    :ivar properties: Describes a virtual machine scale set network profile's IP configuration
     properties.
    :vartype properties:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateIPConfigurationProperties
    """

    name: Optional[str] = rest_field()
    """The IP configuration name."""
    properties: Optional["_models.VirtualMachineScaleSetUpdateIPConfigurationProperties"] = rest_field()
    """Describes a virtual machine scale set network profile's IP configuration properties."""

    __flattened_items = [
        "subnet",
        "primary",
        "public_ip_address_configuration",
        "private_ip_address_version",
        "application_gateway_backend_address_pools",
        "application_security_groups",
        "load_balancer_backend_address_pools",
        "load_balancer_inbound_nat_pools",
    ]

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        properties: Optional["_models.VirtualMachineScaleSetUpdateIPConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetUpdateIPConfigurationProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set network profile's IP configuration properties.

    :ivar subnet: The subnet.
    :vartype subnet: ~azure.mgmt.compute.models.ApiEntityReference
    :ivar primary: Specifies the primary IP Configuration in case the network interface has more
     than one IP Configuration.
    :vartype primary: bool
    :ivar public_ip_address_configuration: The publicIPAddressConfiguration.
    :vartype public_ip_address_configuration:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdatePublicIPAddressConfiguration
    :ivar private_ip_address_version: Available from Api-Version 2017-03-30 onwards, it represents
     whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible
     values are: 'IPv4' and 'IPv6'. Known values are: "IPv4" and "IPv6".
    :vartype private_ip_address_version: str or ~azure.mgmt.compute.models.IPVersion
    :ivar application_gateway_backend_address_pools: The application gateway backend address pools.
    :vartype application_gateway_backend_address_pools:
     list[~azure.mgmt.compute.models.SubResource]
    :ivar application_security_groups: Specifies an array of references to application security
     group.
    :vartype application_security_groups: list[~azure.mgmt.compute.models.SubResource]
    :ivar load_balancer_backend_address_pools: The load balancer backend address pools.
    :vartype load_balancer_backend_address_pools: list[~azure.mgmt.compute.models.SubResource]
    :ivar load_balancer_inbound_nat_pools: The load balancer inbound nat pools.
    :vartype load_balancer_inbound_nat_pools: list[~azure.mgmt.compute.models.SubResource]
    """

    subnet: Optional["_models.ApiEntityReference"] = rest_field()
    """The subnet."""
    primary: Optional[bool] = rest_field()
    """Specifies the primary IP Configuration in case the network interface has more than one IP
     Configuration."""
    public_ip_address_configuration: Optional["_models.VirtualMachineScaleSetUpdatePublicIPAddressConfiguration"] = (
        rest_field(name="publicIPAddressConfiguration")
    )
    """The publicIPAddressConfiguration."""
    private_ip_address_version: Optional[Union[str, "_models.IPVersion"]] = rest_field(name="privateIPAddressVersion")
    """Available from Api-Version 2017-03-30 onwards, it represents whether the specific
     ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.  Possible values are: 'IPv4' and
     'IPv6'. Known values are: \"IPv4\" and \"IPv6\"."""
    application_gateway_backend_address_pools: Optional[List["_models.SubResource"]] = rest_field(
        name="applicationGatewayBackendAddressPools"
    )
    """The application gateway backend address pools."""
    application_security_groups: Optional[List["_models.SubResource"]] = rest_field(name="applicationSecurityGroups")
    """Specifies an array of references to application security group."""
    load_balancer_backend_address_pools: Optional[List["_models.SubResource"]] = rest_field(
        name="loadBalancerBackendAddressPools"
    )
    """The load balancer backend address pools."""
    load_balancer_inbound_nat_pools: Optional[List["_models.SubResource"]] = rest_field(
        name="loadBalancerInboundNatPools"
    )
    """The load balancer inbound nat pools."""

    @overload
    def __init__(
        self,
        *,
        subnet: Optional["_models.ApiEntityReference"] = None,
        primary: Optional[bool] = None,
        public_ip_address_configuration: Optional[
            "_models.VirtualMachineScaleSetUpdatePublicIPAddressConfiguration"
        ] = None,
        private_ip_address_version: Optional[Union[str, "_models.IPVersion"]] = None,
        application_gateway_backend_address_pools: Optional[List["_models.SubResource"]] = None,
        application_security_groups: Optional[List["_models.SubResource"]] = None,
        load_balancer_backend_address_pools: Optional[List["_models.SubResource"]] = None,
        load_balancer_inbound_nat_pools: Optional[List["_models.SubResource"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetUpdateNetworkConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set network profile's network configurations.

    :ivar name: The network configuration name.
    :vartype name: str
    :ivar properties: Describes a virtual machine scale set updatable network profile's IP
     configuration.Use this object for updating network profile's IP Configuration.
    :vartype properties:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateNetworkConfigurationProperties
    """

    name: Optional[str] = rest_field()
    """The network configuration name."""
    properties: Optional["_models.VirtualMachineScaleSetUpdateNetworkConfigurationProperties"] = rest_field()
    """Describes a virtual machine scale set updatable network profile's IP configuration.Use this
     object for updating network profile's IP Configuration."""

    __flattened_items = [
        "primary",
        "enable_accelerated_networking",
        "disable_tcp_state_tracking",
        "enable_fpga",
        "network_security_group",
        "dns_settings",
        "ip_configurations",
        "enable_ip_forwarding",
        "delete_option",
        "auxiliary_mode",
        "auxiliary_sku",
    ]

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        properties: Optional["_models.VirtualMachineScaleSetUpdateNetworkConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetUpdateNetworkConfigurationProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set updatable network profile's IP configuration.Use this
    object for updating network profile's IP Configuration.

    :ivar primary: Whether this is a primary NIC on a virtual machine.
    :vartype primary: bool
    :ivar enable_accelerated_networking: Specifies whether the network interface is accelerated
     networking-enabled.
    :vartype enable_accelerated_networking: bool
    :ivar disable_tcp_state_tracking: Specifies whether the network interface is disabled for tcp
     state tracking.
    :vartype disable_tcp_state_tracking: bool
    :ivar enable_fpga: Specifies whether the network interface is FPGA networking-enabled.
    :vartype enable_fpga: bool
    :ivar network_security_group: The network security group.
    :vartype network_security_group: ~azure.mgmt.compute.models.SubResource
    :ivar dns_settings: The dns settings to be applied on the network interfaces.
    :vartype dns_settings:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetNetworkConfigurationDnsSettings
    :ivar ip_configurations: The virtual machine scale set IP Configuration.
    :vartype ip_configurations:
     list[~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateIPConfiguration]
    :ivar enable_ip_forwarding: Whether IP forwarding enabled on this NIC.
    :vartype enable_ip_forwarding: bool
    :ivar delete_option: Specify what happens to the network interface when the VM is deleted.
     Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DeleteOptions
    :ivar auxiliary_mode: Specifies whether the Auxiliary mode is enabled for the Network Interface
     resource. Known values are: "None", "AcceleratedConnections", and "Floating".
    :vartype auxiliary_mode: str or ~azure.mgmt.compute.models.NetworkInterfaceAuxiliaryMode
    :ivar auxiliary_sku: Specifies whether the Auxiliary sku is enabled for the Network Interface
     resource. Known values are: "None", "A1", "A2", "A4", and "A8".
    :vartype auxiliary_sku: str or ~azure.mgmt.compute.models.NetworkInterfaceAuxiliarySku
    """

    primary: Optional[bool] = rest_field()
    """Whether this is a primary NIC on a virtual machine."""
    enable_accelerated_networking: Optional[bool] = rest_field(name="enableAcceleratedNetworking")
    """Specifies whether the network interface is accelerated networking-enabled."""
    disable_tcp_state_tracking: Optional[bool] = rest_field(name="disableTcpStateTracking")
    """Specifies whether the network interface is disabled for tcp state tracking."""
    enable_fpga: Optional[bool] = rest_field(name="enableFpga")
    """Specifies whether the network interface is FPGA networking-enabled."""
    network_security_group: Optional["_models.SubResource"] = rest_field(name="networkSecurityGroup")
    """The network security group."""
    dns_settings: Optional["_models.VirtualMachineScaleSetNetworkConfigurationDnsSettings"] = rest_field(
        name="dnsSettings"
    )
    """The dns settings to be applied on the network interfaces."""
    ip_configurations: Optional[List["_models.VirtualMachineScaleSetUpdateIPConfiguration"]] = rest_field(
        name="ipConfigurations"
    )
    """The virtual machine scale set IP Configuration."""
    enable_ip_forwarding: Optional[bool] = rest_field(name="enableIPForwarding")
    """Whether IP forwarding enabled on this NIC."""
    delete_option: Optional[Union[str, "_models.DeleteOptions"]] = rest_field(name="deleteOption")
    """Specify what happens to the network interface when the VM is deleted. Known values are:
     \"Delete\" and \"Detach\"."""
    auxiliary_mode: Optional[Union[str, "_models.NetworkInterfaceAuxiliaryMode"]] = rest_field(name="auxiliaryMode")
    """Specifies whether the Auxiliary mode is enabled for the Network Interface resource. Known
     values are: \"None\", \"AcceleratedConnections\", and \"Floating\"."""
    auxiliary_sku: Optional[Union[str, "_models.NetworkInterfaceAuxiliarySku"]] = rest_field(name="auxiliarySku")
    """Specifies whether the Auxiliary sku is enabled for the Network Interface resource. Known values
     are: \"None\", \"A1\", \"A2\", \"A4\", and \"A8\"."""

    @overload
    def __init__(
        self,
        *,
        primary: Optional[bool] = None,
        enable_accelerated_networking: Optional[bool] = None,
        disable_tcp_state_tracking: Optional[bool] = None,
        enable_fpga: Optional[bool] = None,
        network_security_group: Optional["_models.SubResource"] = None,
        dns_settings: Optional["_models.VirtualMachineScaleSetNetworkConfigurationDnsSettings"] = None,
        ip_configurations: Optional[List["_models.VirtualMachineScaleSetUpdateIPConfiguration"]] = None,
        enable_ip_forwarding: Optional[bool] = None,
        delete_option: Optional[Union[str, "_models.DeleteOptions"]] = None,
        auxiliary_mode: Optional[Union[str, "_models.NetworkInterfaceAuxiliaryMode"]] = None,
        auxiliary_sku: Optional[Union[str, "_models.NetworkInterfaceAuxiliarySku"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetUpdateNetworkProfile(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set network profile.

    :ivar health_probe: A reference to a load balancer probe used to determine the health of an
     instance in the virtual machine scale set. The reference will be in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.  # pylint: disable=line-too-long
    :vartype health_probe: ~azure.mgmt.compute.models.ApiEntityReference
    :ivar network_interface_configurations: The list of network configurations.
    :vartype network_interface_configurations:
     list[~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateNetworkConfiguration]
    :ivar network_api_version: specifies the Microsoft.Network API version used when creating
     networking resources in the Network Interface Configurations for Virtual Machine Scale Set with
     orchestration mode 'Flexible'. "2020-11-01"
    :vartype network_api_version: str or ~azure.mgmt.compute.models.NetworkApiVersion
    """

    health_probe: Optional["_models.ApiEntityReference"] = rest_field(name="healthProbe")
    """A reference to a load balancer probe used to determine the health of an instance in the virtual
     machine scale set. The reference will be in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.  # pylint: disable=line-too-long"""
    network_interface_configurations: Optional[List["_models.VirtualMachineScaleSetUpdateNetworkConfiguration"]] = (
        rest_field(name="networkInterfaceConfigurations")
    )
    """The list of network configurations."""
    network_api_version: Optional[Union[str, "_models.NetworkApiVersion"]] = rest_field(name="networkApiVersion")
    """specifies the Microsoft.Network API version used when creating networking resources in the
     Network Interface Configurations for Virtual Machine Scale Set with orchestration mode
     'Flexible'. \"2020-11-01\""""

    @overload
    def __init__(
        self,
        *,
        health_probe: Optional["_models.ApiEntityReference"] = None,
        network_interface_configurations: Optional[
            List["_models.VirtualMachineScaleSetUpdateNetworkConfiguration"]
        ] = None,
        network_api_version: Optional[Union[str, "_models.NetworkApiVersion"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetUpdateOSDisk(_model_base.Model):
    """Describes virtual machine scale set operating system disk Update Object. This should be used
    for Updating VMSS OS Disk.

    :ivar caching: The caching type. Known values are: "None", "ReadOnly", and "ReadWrite".
    :vartype caching: str or ~azure.mgmt.compute.models.CachingTypes
    :ivar write_accelerator_enabled: Specifies whether writeAccelerator should be enabled or
     disabled on the disk.
    :vartype write_accelerator_enabled: bool
    :ivar diff_disk_settings: Specifies the ephemeral disk Settings for the operating system disk
     used by the virtual machine scale set.
    :vartype diff_disk_settings: ~azure.mgmt.compute.models.DiffDiskSettings
    :ivar disk_size_gb: Specifies the size of an empty data disk in gigabytes. This element can be
     used to overwrite the size of the disk in a virtual machine image. :code:`<br>`:code:`<br>`
     diskSizeGB is the number of bytes x 1024^3 for the disk and the value cannot be larger than
     1023.
    :vartype disk_size_gb: int
    :ivar image: The Source User Image VirtualHardDisk. This VirtualHardDisk will be copied before
     using it to attach to the Virtual Machine. If SourceImage is provided, the destination
     VirtualHardDisk should not exist.
    :vartype image: ~azure.mgmt.compute.models.VirtualHardDisk
    :ivar vhd_containers: The list of virtual hard disk container uris.
    :vartype vhd_containers: list[str]
    :ivar managed_disk: The managed disk parameters.
    :vartype managed_disk: ~azure.mgmt.compute.models.VirtualMachineScaleSetManagedDiskParameters
    :ivar delete_option: Specifies whether OS Disk should be deleted or detached upon VMSS Flex
     deletion (This feature is available for VMSS with Flexible OrchestrationMode only).
     :code:`<br>`:code:`<br>` Possible values: :code:`<br>`:code:`<br>` **Delete** If this value is
     used, the OS disk is deleted when VMSS Flex VM is deleted.:code:`<br>`:code:`<br>` **Detach**
     If this value is used, the OS disk is retained after VMSS Flex VM is deleted.
     :code:`<br>`:code:`<br>` The default value is set to **Delete**. For an Ephemeral OS Disk, the
     default value is set to **Delete**. User cannot change the delete option for Ephemeral OS Disk.
     Known values are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DiskDeleteOptionTypes
    """

    caching: Optional[Union[str, "_models.CachingTypes"]] = rest_field()
    """The caching type. Known values are: \"None\", \"ReadOnly\", and \"ReadWrite\"."""
    write_accelerator_enabled: Optional[bool] = rest_field(name="writeAcceleratorEnabled")
    """Specifies whether writeAccelerator should be enabled or disabled on the disk."""
    diff_disk_settings: Optional["_models.DiffDiskSettings"] = rest_field(name="diffDiskSettings")
    """Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine
     scale set."""
    disk_size_gb: Optional[int] = rest_field(name="diskSizeGB")
    """Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite
     the size of the disk in a virtual machine image. :code:`<br>`:code:`<br>` diskSizeGB is the
     number of bytes x 1024^3 for the disk and the value cannot be larger than 1023."""
    image: Optional["_models.VirtualHardDisk"] = rest_field()
    """The Source User Image VirtualHardDisk. This VirtualHardDisk will be copied before using it to
     attach to the Virtual Machine. If SourceImage is provided, the destination VirtualHardDisk
     should not exist."""
    vhd_containers: Optional[List[str]] = rest_field(name="vhdContainers")
    """The list of virtual hard disk container uris."""
    managed_disk: Optional["_models.VirtualMachineScaleSetManagedDiskParameters"] = rest_field(name="managedDisk")
    """The managed disk parameters."""
    delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = rest_field(name="deleteOption")
    """Specifies whether OS Disk should be deleted or detached upon VMSS Flex deletion (This feature
     is available for VMSS with Flexible OrchestrationMode only). :code:`<br>`:code:`<br>` Possible
     values: :code:`<br>`:code:`<br>` **Delete** If this value is used, the OS disk is deleted when
     VMSS Flex VM is deleted.:code:`<br>`:code:`<br>` **Detach** If this value is used, the OS disk
     is retained after VMSS Flex VM is deleted. :code:`<br>`:code:`<br>` The default value is set to
     **Delete**. For an Ephemeral OS Disk, the default value is set to **Delete**. User cannot
     change the delete option for Ephemeral OS Disk. Known values are: \"Delete\" and \"Detach\"."""

    @overload
    def __init__(
        self,
        *,
        caching: Optional[Union[str, "_models.CachingTypes"]] = None,
        write_accelerator_enabled: Optional[bool] = None,
        diff_disk_settings: Optional["_models.DiffDiskSettings"] = None,
        disk_size_gb: Optional[int] = None,
        image: Optional["_models.VirtualHardDisk"] = None,
        vhd_containers: Optional[List[str]] = None,
        managed_disk: Optional["_models.VirtualMachineScaleSetManagedDiskParameters"] = None,
        delete_option: Optional[Union[str, "_models.DiskDeleteOptionTypes"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetUpdateOSProfile(_model_base.Model):
    """Describes a virtual machine scale set OS profile.

    :ivar custom_data: A base-64 encoded string of custom data.
    :vartype custom_data: str
    :ivar windows_configuration: The Windows Configuration of the OS profile.
    :vartype windows_configuration: ~azure.mgmt.compute.models.WindowsConfiguration
    :ivar linux_configuration: The Linux Configuration of the OS profile.
    :vartype linux_configuration: ~azure.mgmt.compute.models.LinuxConfiguration
    :ivar secrets: The List of certificates for addition to the VM.
    :vartype secrets: list[~azure.mgmt.compute.models.VaultSecretGroup]
    """

    custom_data: Optional[str] = rest_field(name="customData")
    """A base-64 encoded string of custom data."""
    windows_configuration: Optional["_models.WindowsConfiguration"] = rest_field(name="windowsConfiguration")
    """The Windows Configuration of the OS profile."""
    linux_configuration: Optional["_models.LinuxConfiguration"] = rest_field(name="linuxConfiguration")
    """The Linux Configuration of the OS profile."""
    secrets: Optional[List["_models.VaultSecretGroup"]] = rest_field()
    """The List of certificates for addition to the VM."""

    @overload
    def __init__(
        self,
        *,
        custom_data: Optional[str] = None,
        windows_configuration: Optional["_models.WindowsConfiguration"] = None,
        linux_configuration: Optional["_models.LinuxConfiguration"] = None,
        secrets: Optional[List["_models.VaultSecretGroup"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetUpdateProperties(_model_base.Model):
    """Describes the properties of a Virtual Machine Scale Set.

    :ivar upgrade_policy: The upgrade policy.
    :vartype upgrade_policy: ~azure.mgmt.compute.models.UpgradePolicy
    :ivar automatic_repairs_policy: Policy for automatic repairs.
    :vartype automatic_repairs_policy: ~azure.mgmt.compute.models.AutomaticRepairsPolicy
    :ivar virtual_machine_profile: The virtual machine profile.
    :vartype virtual_machine_profile:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateVMProfile
    :ivar overprovision: Specifies whether the Virtual Machine Scale Set should be overprovisioned.
    :vartype overprovision: bool
    :ivar do_not_run_extensions_on_overprovisioned_v_ms: When Overprovision is enabled, extensions
     are launched only on the requested number of VMs which are finally kept. This property will
     hence ensure that the extensions do not run on the extra overprovisioned VMs.
    :vartype do_not_run_extensions_on_overprovisioned_v_ms: bool
    :ivar single_placement_group: When true this limits the scale set to a single placement group,
     of max size 100 virtual machines. NOTE: If singlePlacementGroup is true, it may be modified to
     false. However, if singlePlacementGroup is false, it may not be modified to true.
    :vartype single_placement_group: bool
    :ivar additional_capabilities: Specifies additional capabilities enabled or disabled on the
     Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines
     have the capability to support attaching managed data disks with UltraSSD_LRS storage account
     type.
    :vartype additional_capabilities: ~azure.mgmt.compute.models.AdditionalCapabilities
    :ivar scale_in_policy: Specifies the policies applied when scaling in Virtual Machines in the
     Virtual Machine Scale Set.
    :vartype scale_in_policy: ~azure.mgmt.compute.models.ScaleInPolicy
    :ivar proximity_placement_group: Specifies information about the proximity placement group that
     the virtual machine scale set should be assigned to. :code:`<br>`:code:`<br>`Minimum
     api-version: 2018-04-01.
    :vartype proximity_placement_group: ~azure.mgmt.compute.models.SubResource
    :ivar priority_mix_policy: Specifies the desired targets for mixing Spot and Regular priority
     VMs within the same VMSS Flex instance.
    :vartype priority_mix_policy: ~azure.mgmt.compute.models.PriorityMixPolicy
    :ivar spot_restore_policy: Specifies the Spot Restore properties for the virtual machine scale
     set.
    :vartype spot_restore_policy: ~azure.mgmt.compute.models.SpotRestorePolicy
    :ivar resiliency_policy: Policy for Resiliency.
    :vartype resiliency_policy: ~azure.mgmt.compute.models.ResiliencyPolicy
    :ivar zonal_platform_fault_domain_align_mode: Specifies the align mode between Virtual Machine
     Scale Set compute and storage Fault Domain count. Known values are: "Aligned" and "Unaligned".
    :vartype zonal_platform_fault_domain_align_mode: str or
     ~azure.mgmt.compute.models.ZonalPlatformFaultDomainAlignMode
    :ivar sku_profile: Specifies the sku profile for the virtual machine scale set.
    :vartype sku_profile: ~azure.mgmt.compute.models.SkuProfile
    """

    upgrade_policy: Optional["_models.UpgradePolicy"] = rest_field(name="upgradePolicy")
    """The upgrade policy."""
    automatic_repairs_policy: Optional["_models.AutomaticRepairsPolicy"] = rest_field(name="automaticRepairsPolicy")
    """Policy for automatic repairs."""
    virtual_machine_profile: Optional["_models.VirtualMachineScaleSetUpdateVMProfile"] = rest_field(
        name="virtualMachineProfile"
    )
    """The virtual machine profile."""
    overprovision: Optional[bool] = rest_field()
    """Specifies whether the Virtual Machine Scale Set should be overprovisioned."""
    do_not_run_extensions_on_overprovisioned_v_ms: Optional[bool] = rest_field(
        name="doNotRunExtensionsOnOverprovisionedVMs"
    )
    """When Overprovision is enabled, extensions are launched only on the requested number of VMs
     which are finally kept. This property will hence ensure that the extensions do not run on the
     extra overprovisioned VMs."""
    single_placement_group: Optional[bool] = rest_field(name="singlePlacementGroup")
    """When true this limits the scale set to a single placement group, of max size 100 virtual
     machines. NOTE: If singlePlacementGroup is true, it may be modified to false. However, if
     singlePlacementGroup is false, it may not be modified to true."""
    additional_capabilities: Optional["_models.AdditionalCapabilities"] = rest_field(name="additionalCapabilities")
    """Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual
     Machine Scale Set. For instance: whether the Virtual Machines have the capability to support
     attaching managed data disks with UltraSSD_LRS storage account type."""
    scale_in_policy: Optional["_models.ScaleInPolicy"] = rest_field(name="scaleInPolicy")
    """Specifies the policies applied when scaling in Virtual Machines in the Virtual Machine Scale
     Set."""
    proximity_placement_group: Optional["_models.SubResource"] = rest_field(name="proximityPlacementGroup")
    """Specifies information about the proximity placement group that the virtual machine scale set
     should be assigned to. :code:`<br>`:code:`<br>`Minimum api-version: 2018-04-01."""
    priority_mix_policy: Optional["_models.PriorityMixPolicy"] = rest_field(name="priorityMixPolicy")
    """Specifies the desired targets for mixing Spot and Regular priority VMs within the same VMSS
     Flex instance."""
    spot_restore_policy: Optional["_models.SpotRestorePolicy"] = rest_field(name="spotRestorePolicy")
    """Specifies the Spot Restore properties for the virtual machine scale set."""
    resiliency_policy: Optional["_models.ResiliencyPolicy"] = rest_field(name="resiliencyPolicy")
    """Policy for Resiliency."""
    zonal_platform_fault_domain_align_mode: Optional[Union[str, "_models.ZonalPlatformFaultDomainAlignMode"]] = (
        rest_field(name="zonalPlatformFaultDomainAlignMode")
    )
    """Specifies the align mode between Virtual Machine Scale Set compute and storage Fault Domain
     count. Known values are: \"Aligned\" and \"Unaligned\"."""
    sku_profile: Optional["_models.SkuProfile"] = rest_field(name="skuProfile")
    """Specifies the sku profile for the virtual machine scale set."""

    @overload
    def __init__(
        self,
        *,
        upgrade_policy: Optional["_models.UpgradePolicy"] = None,
        automatic_repairs_policy: Optional["_models.AutomaticRepairsPolicy"] = None,
        virtual_machine_profile: Optional["_models.VirtualMachineScaleSetUpdateVMProfile"] = None,
        overprovision: Optional[bool] = None,
        do_not_run_extensions_on_overprovisioned_v_ms: Optional[bool] = None,
        single_placement_group: Optional[bool] = None,
        additional_capabilities: Optional["_models.AdditionalCapabilities"] = None,
        scale_in_policy: Optional["_models.ScaleInPolicy"] = None,
        proximity_placement_group: Optional["_models.SubResource"] = None,
        priority_mix_policy: Optional["_models.PriorityMixPolicy"] = None,
        spot_restore_policy: Optional["_models.SpotRestorePolicy"] = None,
        resiliency_policy: Optional["_models.ResiliencyPolicy"] = None,
        zonal_platform_fault_domain_align_mode: Optional[
            Union[str, "_models.ZonalPlatformFaultDomainAlignMode"]
        ] = None,
        sku_profile: Optional["_models.SkuProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetUpdatePublicIPAddressConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration.

    :ivar name: The publicIP address configuration name.
    :vartype name: str
    :ivar properties: Describes a virtual machines scale set IP Configuration's PublicIPAddress
     configuration.
    :vartype properties:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties
    """

    name: Optional[str] = rest_field()
    """The publicIP address configuration name."""
    properties: Optional["_models.VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties"] = rest_field()
    """Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration."""

    __flattened_items = ["idle_timeout_in_minutes", "dns_settings", "public_ip_prefix", "delete_option"]

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        properties: Optional["_models.VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties(
    _model_base.Model
):  # pylint: disable=name-too-long
    """Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration.

    :ivar idle_timeout_in_minutes: The idle timeout of the public IP address.
    :vartype idle_timeout_in_minutes: int
    :ivar dns_settings: The dns settings to be applied on the publicIP addresses .
    :vartype dns_settings:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings
    :ivar public_ip_prefix: The PublicIPPrefix from which to allocate publicIP addresses.
    :vartype public_ip_prefix: ~azure.mgmt.compute.models.SubResource
    :ivar delete_option: Specify what happens to the public IP when the VM is deleted. Known values
     are: "Delete" and "Detach".
    :vartype delete_option: str or ~azure.mgmt.compute.models.DeleteOptions
    """

    idle_timeout_in_minutes: Optional[int] = rest_field(name="idleTimeoutInMinutes")
    """The idle timeout of the public IP address."""
    dns_settings: Optional["_models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings"] = rest_field(
        name="dnsSettings"
    )
    """The dns settings to be applied on the publicIP addresses ."""
    public_ip_prefix: Optional["_models.SubResource"] = rest_field(name="publicIPPrefix")
    """The PublicIPPrefix from which to allocate publicIP addresses."""
    delete_option: Optional[Union[str, "_models.DeleteOptions"]] = rest_field(name="deleteOption")
    """Specify what happens to the public IP when the VM is deleted. Known values are: \"Delete\" and
     \"Detach\"."""

    @overload
    def __init__(
        self,
        *,
        idle_timeout_in_minutes: Optional[int] = None,
        dns_settings: Optional["_models.VirtualMachineScaleSetPublicIPAddressConfigurationDnsSettings"] = None,
        public_ip_prefix: Optional["_models.SubResource"] = None,
        delete_option: Optional[Union[str, "_models.DeleteOptions"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetUpdateStorageProfile(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set storage profile.

    :ivar image_reference: The image reference.
    :vartype image_reference: ~azure.mgmt.compute.models.ImageReference
    :ivar os_disk: The OS disk.
    :vartype os_disk: ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateOSDisk
    :ivar data_disks: The data disks.
    :vartype data_disks: list[~azure.mgmt.compute.models.VirtualMachineScaleSetDataDisk]
    :ivar disk_controller_type:
    :vartype disk_controller_type: str
    """

    image_reference: Optional["_models.ImageReference"] = rest_field(name="imageReference")
    """The image reference."""
    os_disk: Optional["_models.VirtualMachineScaleSetUpdateOSDisk"] = rest_field(name="osDisk")
    """The OS disk."""
    data_disks: Optional[List["_models.VirtualMachineScaleSetDataDisk"]] = rest_field(name="dataDisks")
    """The data disks."""
    disk_controller_type: Optional[str] = rest_field(name="diskControllerType")

    @overload
    def __init__(
        self,
        *,
        image_reference: Optional["_models.ImageReference"] = None,
        os_disk: Optional["_models.VirtualMachineScaleSetUpdateOSDisk"] = None,
        data_disks: Optional[List["_models.VirtualMachineScaleSetDataDisk"]] = None,
        disk_controller_type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetUpdateVMProfile(_model_base.Model):
    """Describes a virtual machine scale set virtual machine profile.

    :ivar os_profile: The virtual machine scale set OS profile.
    :vartype os_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateOSProfile
    :ivar storage_profile: The virtual machine scale set storage profile.
    :vartype storage_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateStorageProfile
    :ivar network_profile: The virtual machine scale set network profile.
    :vartype network_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetUpdateNetworkProfile
    :ivar security_posture_reference: The virtual machine scale set security posture reference.
    :vartype security_posture_reference: ~azure.mgmt.compute.models.SecurityPostureReferenceUpdate
    :ivar security_profile: The virtual machine scale set Security profile.
    :vartype security_profile: ~azure.mgmt.compute.models.SecurityProfile
    :ivar diagnostics_profile: The virtual machine scale set diagnostics profile.
    :vartype diagnostics_profile: ~azure.mgmt.compute.models.DiagnosticsProfile
    :ivar extension_profile: The virtual machine scale set extension profile.
    :vartype extension_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetExtensionProfile
    :ivar license_type: The license type, which is for bring your own license scenario.
    :vartype license_type: str
    :ivar billing_profile: Specifies the billing related details of a Azure Spot VMSS. Minimum
     api-version: 2019-03-01.
    :vartype billing_profile: ~azure.mgmt.compute.models.BillingProfile
    :ivar scheduled_events_profile: Specifies Scheduled Event related configurations.
    :vartype scheduled_events_profile: ~azure.mgmt.compute.models.ScheduledEventsProfile
    :ivar user_data: UserData for the VM, which must be base-64 encoded. Customer should not pass
     any secrets in here. :code:`<br>`:code:`<br>`Minimum api-version: 2021-03-01.
    :vartype user_data: str
    :ivar hardware_profile: Specifies the hardware profile related details of a scale set. Minimum
     api-version: 2021-11-01.
    :vartype hardware_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetHardwareProfile
    """

    os_profile: Optional["_models.VirtualMachineScaleSetUpdateOSProfile"] = rest_field(name="osProfile")
    """The virtual machine scale set OS profile."""
    storage_profile: Optional["_models.VirtualMachineScaleSetUpdateStorageProfile"] = rest_field(name="storageProfile")
    """The virtual machine scale set storage profile."""
    network_profile: Optional["_models.VirtualMachineScaleSetUpdateNetworkProfile"] = rest_field(name="networkProfile")
    """The virtual machine scale set network profile."""
    security_posture_reference: Optional["_models.SecurityPostureReferenceUpdate"] = rest_field(
        name="securityPostureReference"
    )
    """The virtual machine scale set security posture reference."""
    security_profile: Optional["_models.SecurityProfile"] = rest_field(name="securityProfile")
    """The virtual machine scale set Security profile."""
    diagnostics_profile: Optional["_models.DiagnosticsProfile"] = rest_field(name="diagnosticsProfile")
    """The virtual machine scale set diagnostics profile."""
    extension_profile: Optional["_models.VirtualMachineScaleSetExtensionProfile"] = rest_field(name="extensionProfile")
    """The virtual machine scale set extension profile."""
    license_type: Optional[str] = rest_field(name="licenseType")
    """The license type, which is for bring your own license scenario."""
    billing_profile: Optional["_models.BillingProfile"] = rest_field(name="billingProfile")
    """Specifies the billing related details of a Azure Spot VMSS. Minimum api-version: 2019-03-01."""
    scheduled_events_profile: Optional["_models.ScheduledEventsProfile"] = rest_field(name="scheduledEventsProfile")
    """Specifies Scheduled Event related configurations."""
    user_data: Optional[str] = rest_field(name="userData")
    """UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in
     here. :code:`<br>`:code:`<br>`Minimum api-version: 2021-03-01."""
    hardware_profile: Optional["_models.VirtualMachineScaleSetHardwareProfile"] = rest_field(name="hardwareProfile")
    """Specifies the hardware profile related details of a scale set. Minimum api-version: 2021-11-01."""

    @overload
    def __init__(
        self,
        *,
        os_profile: Optional["_models.VirtualMachineScaleSetUpdateOSProfile"] = None,
        storage_profile: Optional["_models.VirtualMachineScaleSetUpdateStorageProfile"] = None,
        network_profile: Optional["_models.VirtualMachineScaleSetUpdateNetworkProfile"] = None,
        security_posture_reference: Optional["_models.SecurityPostureReferenceUpdate"] = None,
        security_profile: Optional["_models.SecurityProfile"] = None,
        diagnostics_profile: Optional["_models.DiagnosticsProfile"] = None,
        extension_profile: Optional["_models.VirtualMachineScaleSetExtensionProfile"] = None,
        license_type: Optional[str] = None,
        billing_profile: Optional["_models.BillingProfile"] = None,
        scheduled_events_profile: Optional["_models.ScheduledEventsProfile"] = None,
        user_data: Optional[str] = None,
        hardware_profile: Optional["_models.VirtualMachineScaleSetHardwareProfile"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetVM(TrackedResource):
    """Describes a virtual machine scale set virtual machine.

    Readonly variables are only populated by the server, and will be ignored when sending a request.


    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Describes the properties of a virtual machine scale set virtual machine.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineScaleSetVMProperties
    :ivar instance_id: The virtual machine instance ID.
    :vartype instance_id: str
    :ivar sku: The virtual machine SKU.
    :vartype sku: ~azure.mgmt.compute.models.Sku
    :ivar plan: Specifies information about the marketplace image used to create the virtual
     machine. This element is only used for marketplace images. Before you can use a marketplace
     image from an API, you must enable the image for programmatic use.  In the Azure portal, find
     the marketplace image that you want to use and then click **Want to deploy programmatically,
     Get Started ->**. Enter any required information and then click **Save**.
    :vartype plan: ~azure.mgmt.compute.models.Plan
    :ivar resources: The virtual machine child extension resources.
    :vartype resources: list[~azure.mgmt.compute.models.VirtualMachineExtension]
    :ivar zones: The virtual machine zones.
    :vartype zones: list[str]
    :ivar identity: The identity of the virtual machine, if configured.
    :vartype identity: ~azure.mgmt.compute.models.VirtualMachineIdentity
    :ivar etag: Etag is property returned in Update/Get response of the VMSS VM, so that customer
     can supply it in the header to ensure optimistic updates.
    :vartype etag: str
    """

    properties: Optional["_models.VirtualMachineScaleSetVMProperties"] = rest_field()
    """Describes the properties of a virtual machine scale set virtual machine."""
    instance_id: Optional[str] = rest_field(name="instanceId", visibility=["read"])
    """The virtual machine instance ID."""
    sku: Optional["_models.Sku"] = rest_field(visibility=["read"])
    """The virtual machine SKU."""
    plan: Optional["_models.Plan"] = rest_field()
    """Specifies information about the marketplace image used to create the virtual machine. This
     element is only used for marketplace images. Before you can use a marketplace image from an
     API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace
     image that you want to use and then click **Want to deploy programmatically, Get Started ->**.
     Enter any required information and then click **Save**."""
    resources: Optional[List["_models.VirtualMachineExtension"]] = rest_field(visibility=["read"])
    """The virtual machine child extension resources."""
    zones: Optional[List[str]] = rest_field(visibility=["read"])
    """The virtual machine zones."""
    identity: Optional["_models.VirtualMachineIdentity"] = rest_field()
    """The identity of the virtual machine, if configured."""
    etag: Optional[str] = rest_field(visibility=["read"])
    """Etag is property returned in Update/Get response of the VMSS VM, so that customer can supply it
     in the header to ensure optimistic updates."""

    __flattened_items = [
        "latest_model_applied",
        "vm_id",
        "instance_view",
        "hardware_profile",
        "storage_profile",
        "additional_capabilities",
        "os_profile",
        "security_profile",
        "network_profile",
        "network_profile_configuration",
        "diagnostics_profile",
        "availability_set",
        "provisioning_state",
        "license_type",
        "model_definition_applied",
        "protection_policy",
        "user_data",
        "time_created",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualMachineScaleSetVMProperties"] = None,
        plan: Optional["_models.Plan"] = None,
        identity: Optional["_models.VirtualMachineIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetVMExtension(ProxyResource):
    """Describes a VMSS VM Extension.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.compute.models.SystemData
    :ivar properties: Describes the properties of a Virtual Machine Extension.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineExtensionProperties
    :ivar type: Resource type.
    :vartype type: str
    :ivar location: The location of the extension.
    :vartype location: str
    """

    properties: Optional["_models.VirtualMachineExtensionProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Extension."""
    location: Optional[str] = rest_field(visibility=["read", "create"])
    """The location of the extension."""

    __flattened_items = [
        "force_update_tag",
        "publisher",
        "type",
        "type_handler_version",
        "auto_upgrade_minor_version",
        "enable_automatic_upgrade",
        "settings",
        "protected_settings",
        "provisioning_state",
        "instance_view",
        "suppress_failures",
        "protected_settings_from_key_vault",
        "provision_after_extensions",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.VirtualMachineExtensionProperties"] = None,
        location: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetVMExtensionsListResult(_model_base.Model):  # pylint: disable=name-too-long
    """The List VMSS VM Extension operation response.

    :ivar value: The list of VMSS VM extensions.
    :vartype value: list[~azure.mgmt.compute.models.VirtualMachineScaleSetVMExtension]
    """

    value: Optional[List["_models.VirtualMachineScaleSetVMExtension"]] = rest_field()
    """The list of VMSS VM extensions."""

    @overload
    def __init__(
        self,
        *,
        value: Optional[List["_models.VirtualMachineScaleSetVMExtension"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetVMExtensionsSummary(_model_base.Model):  # pylint: disable=name-too-long
    """Extensions summary for virtual machines of a virtual machine scale set.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The extension name.
    :vartype name: str
    :ivar statuses_summary: The extensions information.
    :vartype statuses_summary: list[~azure.mgmt.compute.models.VirtualMachineStatusCodeCount]
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The extension name."""
    statuses_summary: Optional[List["_models.VirtualMachineStatusCodeCount"]] = rest_field(
        name="statusesSummary", visibility=["read"]
    )
    """The extensions information."""


class VirtualMachineScaleSetVMExtensionUpdate(SubResourceReadOnly):
    """Describes a VMSS VM Extension.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: The name of the extension.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar properties: Describes the properties of a Virtual Machine Extension.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineExtensionUpdateProperties
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the extension."""
    type: Optional[str] = rest_field(visibility=["read"])
    """Resource type."""
    properties: Optional["_models.VirtualMachineExtensionUpdateProperties"] = rest_field()
    """Describes the properties of a Virtual Machine Extension."""

    __flattened_items = [
        "force_update_tag",
        "publisher",
        "type",
        "type_handler_version",
        "auto_upgrade_minor_version",
        "enable_automatic_upgrade",
        "settings",
        "protected_settings",
        "suppress_failures",
        "protected_settings_from_key_vault",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.VirtualMachineExtensionUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VirtualMachineScaleSetVMInstanceIDs(_model_base.Model):
    """Specifies a list of virtual machine instance IDs from the VM scale set.

    :ivar instance_ids: The virtual machine scale set instance ids. Omitting the virtual machine
     scale set instance ids will result in the operation being performed on all virtual machines in
     the virtual machine scale set.
    :vartype instance_ids: list[str]
    """

    instance_ids: Optional[List[str]] = rest_field(name="instanceIds")
    """The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids
     will result in the operation being performed on all virtual machines in the virtual machine
     scale set."""

    @overload
    def __init__(
        self,
        *,
        instance_ids: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetVMInstanceRequiredIDs(_model_base.Model):  # pylint: disable=name-too-long
    """Specifies a list of virtual machine instance IDs from the VM scale set.

    All required parameters must be populated in order to send to server.

    :ivar instance_ids: The virtual machine scale set instance ids. Required.
    :vartype instance_ids: list[str]
    """

    instance_ids: List[str] = rest_field(name="instanceIds")
    """The virtual machine scale set instance ids. Required."""

    @overload
    def __init__(
        self,
        *,
        instance_ids: List[str],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetVMInstanceView(_model_base.Model):
    """The instance view of a virtual machine scale set VM.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar platform_update_domain: The Update Domain count.
    :vartype platform_update_domain: int
    :ivar platform_fault_domain: The Fault Domain count.
    :vartype platform_fault_domain: int
    :ivar rdp_thumb_print: The Remote desktop certificate thumbprint.
    :vartype rdp_thumb_print: str
    :ivar vm_agent: The VM Agent running on the virtual machine.
    :vartype vm_agent: ~azure.mgmt.compute.models.VirtualMachineAgentInstanceView
    :ivar maintenance_redeploy_status: The Maintenance Operation status on the virtual machine.
    :vartype maintenance_redeploy_status: ~azure.mgmt.compute.models.MaintenanceRedeployStatus
    :ivar disks: The disks information.
    :vartype disks: list[~azure.mgmt.compute.models.DiskInstanceView]
    :ivar extensions: The extensions information.
    :vartype extensions: list[~azure.mgmt.compute.models.VirtualMachineExtensionInstanceView]
    :ivar vm_health: The health status for the VM.
    :vartype vm_health: ~azure.mgmt.compute.models.VirtualMachineHealthStatus
    :ivar boot_diagnostics: Boot Diagnostics is a debugging feature which allows you to view
     Console Output and Screenshot to diagnose VM status. You can easily view the output of your
     console log. Azure also enables you to see a screenshot of the VM from the hypervisor.
    :vartype boot_diagnostics: ~azure.mgmt.compute.models.BootDiagnosticsInstanceView
    :ivar statuses: The resource status information.
    :vartype statuses: list[~azure.mgmt.compute.models.InstanceViewStatus]
    :ivar assigned_host: Resource id of the dedicated host, on which the virtual machine is
     allocated through automatic placement, when the virtual machine is associated with a dedicated
     host group that has automatic placement enabled. Minimum api-version: 2020-06-01.
    :vartype assigned_host: str
    :ivar placement_group_id: The placement group in which the VM is running. If the VM is
     deallocated it will not have a placementGroupId.
    :vartype placement_group_id: str
    :ivar computer_name: Specifies the host OS name of the virtual machine.
     :code:`<br>`:code:`<br>` This name cannot be updated after the VM is created.
     :code:`<br>`:code:`<br>` **Max-length (Windows):** 15 characters :code:`<br>`:code:`<br>`
     **Max-length (Linux):** 64 characters. :code:`<br>`:code:`<br>` For naming conventions and
     restrictions see `Azure infrastructure services implementation guidelines
     <https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions>`_.  # pylint: disable=line-too-long
    :vartype computer_name: str
    :ivar os_name: The Operating System running on the hybrid machine.
    :vartype os_name: str
    :ivar os_version: The version of Operating System running on the hybrid machine.
    :vartype os_version: str
    :ivar hyper_v_generation: The hypervisor generation of the Virtual Machine [V1, V2]. Known
     values are: "V1" and "V2".
    :vartype hyper_v_generation: str or ~azure.mgmt.compute.models.HyperVGeneration
    """

    platform_update_domain: Optional[int] = rest_field(name="platformUpdateDomain")
    """The Update Domain count."""
    platform_fault_domain: Optional[int] = rest_field(name="platformFaultDomain")
    """The Fault Domain count."""
    rdp_thumb_print: Optional[str] = rest_field(name="rdpThumbPrint")
    """The Remote desktop certificate thumbprint."""
    vm_agent: Optional["_models.VirtualMachineAgentInstanceView"] = rest_field(name="vmAgent")
    """The VM Agent running on the virtual machine."""
    maintenance_redeploy_status: Optional["_models.MaintenanceRedeployStatus"] = rest_field(
        name="maintenanceRedeployStatus"
    )
    """The Maintenance Operation status on the virtual machine."""
    disks: Optional[List["_models.DiskInstanceView"]] = rest_field()
    """The disks information."""
    extensions: Optional[List["_models.VirtualMachineExtensionInstanceView"]] = rest_field()
    """The extensions information."""
    vm_health: Optional["_models.VirtualMachineHealthStatus"] = rest_field(name="vmHealth", visibility=["read"])
    """The health status for the VM."""
    boot_diagnostics: Optional["_models.BootDiagnosticsInstanceView"] = rest_field(name="bootDiagnostics")
    """Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot
     to diagnose VM status. You can easily view the output of your console log. Azure also enables
     you to see a screenshot of the VM from the hypervisor."""
    statuses: Optional[List["_models.InstanceViewStatus"]] = rest_field()
    """The resource status information."""
    assigned_host: Optional[str] = rest_field(name="assignedHost", visibility=["read"])
    """Resource id of the dedicated host, on which the virtual machine is allocated through automatic
     placement, when the virtual machine is associated with a dedicated host group that has
     automatic placement enabled. Minimum api-version: 2020-06-01."""
    placement_group_id: Optional[str] = rest_field(name="placementGroupId")
    """The placement group in which the VM is running. If the VM is deallocated it will not have a
     placementGroupId."""
    computer_name: Optional[str] = rest_field(name="computerName")
    """Specifies the host OS name of the virtual machine. :code:`<br>`:code:`<br>` This name cannot be
     updated after the VM is created. :code:`<br>`:code:`<br>` **Max-length (Windows):** 15
     characters :code:`<br>`:code:`<br>` **Max-length (Linux):** 64 characters.
     :code:`<br>`:code:`<br>` For naming conventions and restrictions see `Azure infrastructure
     services implementation guidelines
     <https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-infrastructure-subscription-accounts-guidelines?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json#1-naming-conventions>`_.  # pylint: disable=line-too-long"""
    os_name: Optional[str] = rest_field(name="osName")
    """The Operating System running on the hybrid machine."""
    os_version: Optional[str] = rest_field(name="osVersion")
    """The version of Operating System running on the hybrid machine."""
    hyper_v_generation: Optional[Union[str, "_models.HyperVGeneration"]] = rest_field(name="hyperVGeneration")
    """The hypervisor generation of the Virtual Machine [V1, V2]. Known values are: \"V1\" and \"V2\"."""

    @overload
    def __init__(
        self,
        *,
        platform_update_domain: Optional[int] = None,
        platform_fault_domain: Optional[int] = None,
        rdp_thumb_print: Optional[str] = None,
        vm_agent: Optional["_models.VirtualMachineAgentInstanceView"] = None,
        maintenance_redeploy_status: Optional["_models.MaintenanceRedeployStatus"] = None,
        disks: Optional[List["_models.DiskInstanceView"]] = None,
        extensions: Optional[List["_models.VirtualMachineExtensionInstanceView"]] = None,
        boot_diagnostics: Optional["_models.BootDiagnosticsInstanceView"] = None,
        statuses: Optional[List["_models.InstanceViewStatus"]] = None,
        placement_group_id: Optional[str] = None,
        computer_name: Optional[str] = None,
        os_name: Optional[str] = None,
        os_version: Optional[str] = None,
        hyper_v_generation: Optional[Union[str, "_models.HyperVGeneration"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetVMNetworkProfileConfiguration(_model_base.Model):  # pylint: disable=name-too-long
    """Describes a virtual machine scale set VM network profile.

    :ivar network_interface_configurations: The list of network configurations.
    :vartype network_interface_configurations:
     list[~azure.mgmt.compute.models.VirtualMachineScaleSetNetworkConfiguration]
    """

    network_interface_configurations: Optional[List["_models.VirtualMachineScaleSetNetworkConfiguration"]] = rest_field(
        name="networkInterfaceConfigurations"
    )
    """The list of network configurations."""

    @overload
    def __init__(
        self,
        *,
        network_interface_configurations: Optional[List["_models.VirtualMachineScaleSetNetworkConfiguration"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetVMProfile(_model_base.Model):
    """Describes a virtual machine scale set virtual machine profile.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar os_profile: Specifies the operating system settings for the virtual machines in the scale
     set.
    :vartype os_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetOSProfile
    :ivar storage_profile: Specifies the storage settings for the virtual machine disks.
    :vartype storage_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetStorageProfile
    :ivar network_profile: Specifies properties of the network interfaces of the virtual machines
     in the scale set.
    :vartype network_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetNetworkProfile
    :ivar security_profile: Specifies the Security related profile settings for the virtual
     machines in the scale set.
    :vartype security_profile: ~azure.mgmt.compute.models.SecurityProfile
    :ivar diagnostics_profile: Specifies the boot diagnostic settings state. Minimum api-version:
     2015-06-15.
    :vartype diagnostics_profile: ~azure.mgmt.compute.models.DiagnosticsProfile
    :ivar extension_profile: Specifies a collection of settings for extensions installed on virtual
     machines in the scale set.
    :vartype extension_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetExtensionProfile
    :ivar license_type: Specifies that the image or disk that is being used was licensed
     on-premises. :code:`<br>`:code:`<br>` Possible values for Windows Server operating system are:
     :code:`<br>`:code:`<br>` Windows_Client :code:`<br>`:code:`<br>` Windows_Server
     :code:`<br>`:code:`<br>` Possible values for Linux Server operating system are:
     :code:`<br>`:code:`<br>` RHEL_BYOS (for RHEL) :code:`<br>`:code:`<br>` SLES_BYOS (for SUSE)
     :code:`<br>`:code:`<br>` For more information, see `Azure Hybrid Use Benefit for Windows Server
     <https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing>`_
     :code:`<br>`:code:`<br>` `Azure Hybrid Use Benefit for Linux Server
     <https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux>`_
     :code:`<br>`:code:`<br>` Minimum api-version: 2015-06-15.
    :vartype license_type: str
    :ivar priority: Specifies the priority for the virtual machines in the scale set. Minimum
     api-version: 2017-10-30-preview. Known values are: "Regular", "Low", and "Spot".
    :vartype priority: str or ~azure.mgmt.compute.models.VirtualMachinePriorityTypes
    :ivar eviction_policy: Specifies the eviction policy for the Azure Spot virtual machine and
     Azure Spot scale set. For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are
     supported and the minimum api-version is 2019-03-01. For Azure Spot scale sets, both
     'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
     Known values are: "Deallocate" and "Delete".
    :vartype eviction_policy: str or ~azure.mgmt.compute.models.VirtualMachineEvictionPolicyTypes
    :ivar billing_profile: Specifies the billing related details of a Azure Spot VMSS. Minimum
     api-version: 2019-03-01.
    :vartype billing_profile: ~azure.mgmt.compute.models.BillingProfile
    :ivar scheduled_events_profile: Specifies Scheduled Event related configurations.
    :vartype scheduled_events_profile: ~azure.mgmt.compute.models.ScheduledEventsProfile
    :ivar user_data: UserData for the virtual machines in the scale set, which must be base-64
     encoded. Customer should not pass any secrets in here. Minimum api-version: 2021-03-01.
    :vartype user_data: str
    :ivar capacity_reservation: Specifies the capacity reservation related details of a scale set.
     Minimum api-version: 2021-04-01.
    :vartype capacity_reservation: ~azure.mgmt.compute.models.CapacityReservationProfile
    :ivar application_profile: Specifies the gallery applications that should be made available to
     the VM/VMSS.
    :vartype application_profile: ~azure.mgmt.compute.models.ApplicationProfile
    :ivar hardware_profile: Specifies the hardware profile related details of a scale set. Minimum
     api-version: 2021-11-01.
    :vartype hardware_profile: ~azure.mgmt.compute.models.VirtualMachineScaleSetHardwareProfile
    :ivar service_artifact_reference: Specifies the service artifact reference id used to set same
     image version for all virtual machines in the scale set when using 'latest' image version.
     Minimum api-version: 2022-11-01.
    :vartype service_artifact_reference: ~azure.mgmt.compute.models.ServiceArtifactReference
    :ivar security_posture_reference: Specifies the security posture to be used in the scale set.
     Minimum api-version: 2023-03-01.
    :vartype security_posture_reference: ~azure.mgmt.compute.models.SecurityPostureReference
    :ivar time_created: Specifies the time in which this VM profile for the Virtual Machine Scale
     Set was created. This value will be added to VMSS Flex VM tags when creating/updating the VMSS
     VM Profile. Minimum API version for this property is 2023-09-01.
    :vartype time_created: ~datetime.datetime
    """

    os_profile: Optional["_models.VirtualMachineScaleSetOSProfile"] = rest_field(name="osProfile")
    """Specifies the operating system settings for the virtual machines in the scale set."""
    storage_profile: Optional["_models.VirtualMachineScaleSetStorageProfile"] = rest_field(name="storageProfile")
    """Specifies the storage settings for the virtual machine disks."""
    network_profile: Optional["_models.VirtualMachineScaleSetNetworkProfile"] = rest_field(name="networkProfile")
    """Specifies properties of the network interfaces of the virtual machines in the scale set."""
    security_profile: Optional["_models.SecurityProfile"] = rest_field(name="securityProfile")
    """Specifies the Security related profile settings for the virtual machines in the scale set."""
    diagnostics_profile: Optional["_models.DiagnosticsProfile"] = rest_field(name="diagnosticsProfile")
    """Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15."""
    extension_profile: Optional["_models.VirtualMachineScaleSetExtensionProfile"] = rest_field(name="extensionProfile")
    """Specifies a collection of settings for extensions installed on virtual machines in the scale
     set."""
    license_type: Optional[str] = rest_field(name="licenseType")
    """Specifies that the image or disk that is being used was licensed on-premises.
     :code:`<br>`:code:`<br>` Possible values for Windows Server operating system are:
     :code:`<br>`:code:`<br>` Windows_Client :code:`<br>`:code:`<br>` Windows_Server
     :code:`<br>`:code:`<br>` Possible values for Linux Server operating system are:
     :code:`<br>`:code:`<br>` RHEL_BYOS (for RHEL) :code:`<br>`:code:`<br>` SLES_BYOS (for SUSE)
     :code:`<br>`:code:`<br>` For more information, see `Azure Hybrid Use Benefit for Windows Server
     <https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing>`_
     :code:`<br>`:code:`<br>` `Azure Hybrid Use Benefit for Linux Server
     <https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux>`_
     :code:`<br>`:code:`<br>` Minimum api-version: 2015-06-15."""
    priority: Optional[Union[str, "_models.VirtualMachinePriorityTypes"]] = rest_field()
    """Specifies the priority for the virtual machines in the scale set. Minimum api-version:
     2017-10-30-preview. Known values are: \"Regular\", \"Low\", and \"Spot\"."""
    eviction_policy: Optional[Union[str, "_models.VirtualMachineEvictionPolicyTypes"]] = rest_field(
        name="evictionPolicy"
    )
    """Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set. For
     Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum
     api-version is 2019-03-01. For Azure Spot scale sets, both 'Deallocate' and 'Delete' are
     supported and the minimum api-version is 2017-10-30-preview. Known values are: \"Deallocate\"
     and \"Delete\"."""
    billing_profile: Optional["_models.BillingProfile"] = rest_field(name="billingProfile")
    """Specifies the billing related details of a Azure Spot VMSS. Minimum api-version: 2019-03-01."""
    scheduled_events_profile: Optional["_models.ScheduledEventsProfile"] = rest_field(name="scheduledEventsProfile")
    """Specifies Scheduled Event related configurations."""
    user_data: Optional[str] = rest_field(name="userData")
    """UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer
     should not pass any secrets in here. Minimum api-version: 2021-03-01."""
    capacity_reservation: Optional["_models.CapacityReservationProfile"] = rest_field(name="capacityReservation")
    """Specifies the capacity reservation related details of a scale set. Minimum api-version:
     2021-04-01."""
    application_profile: Optional["_models.ApplicationProfile"] = rest_field(name="applicationProfile")
    """Specifies the gallery applications that should be made available to the VM/VMSS."""
    hardware_profile: Optional["_models.VirtualMachineScaleSetHardwareProfile"] = rest_field(name="hardwareProfile")
    """Specifies the hardware profile related details of a scale set. Minimum api-version: 2021-11-01."""
    service_artifact_reference: Optional["_models.ServiceArtifactReference"] = rest_field(
        name="serviceArtifactReference"
    )
    """Specifies the service artifact reference id used to set same image version for all virtual
     machines in the scale set when using 'latest' image version. Minimum api-version: 2022-11-01."""
    security_posture_reference: Optional["_models.SecurityPostureReference"] = rest_field(
        name="securityPostureReference"
    )
    """Specifies the security posture to be used in the scale set. Minimum api-version: 2023-03-01."""
    time_created: Optional[datetime.datetime] = rest_field(name="timeCreated", visibility=["read"], format="rfc3339")
    """Specifies the time in which this VM profile for the Virtual Machine Scale Set was created. This
     value will be added to VMSS Flex VM tags when creating/updating the VMSS VM Profile. Minimum
     API version for this property is 2023-09-01."""

    @overload
    def __init__(
        self,
        *,
        os_profile: Optional["_models.VirtualMachineScaleSetOSProfile"] = None,
        storage_profile: Optional["_models.VirtualMachineScaleSetStorageProfile"] = None,
        network_profile: Optional["_models.VirtualMachineScaleSetNetworkProfile"] = None,
        security_profile: Optional["_models.SecurityProfile"] = None,
        diagnostics_profile: Optional["_models.DiagnosticsProfile"] = None,
        extension_profile: Optional["_models.VirtualMachineScaleSetExtensionProfile"] = None,
        license_type: Optional[str] = None,
        priority: Optional[Union[str, "_models.VirtualMachinePriorityTypes"]] = None,
        eviction_policy: Optional[Union[str, "_models.VirtualMachineEvictionPolicyTypes"]] = None,
        billing_profile: Optional["_models.BillingProfile"] = None,
        scheduled_events_profile: Optional["_models.ScheduledEventsProfile"] = None,
        user_data: Optional[str] = None,
        capacity_reservation: Optional["_models.CapacityReservationProfile"] = None,
        application_profile: Optional["_models.ApplicationProfile"] = None,
        hardware_profile: Optional["_models.VirtualMachineScaleSetHardwareProfile"] = None,
        service_artifact_reference: Optional["_models.ServiceArtifactReference"] = None,
        security_posture_reference: Optional["_models.SecurityPostureReference"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetVMProperties(_model_base.Model):
    """Describes the properties of a virtual machine scale set virtual machine.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar latest_model_applied: Specifies whether the latest model has been applied to the virtual
     machine.
    :vartype latest_model_applied: bool
    :ivar vm_id: Azure VM unique ID.
    :vartype vm_id: str
    :ivar instance_view: The virtual machine instance view.
    :vartype instance_view: ~azure.mgmt.compute.models.VirtualMachineScaleSetVMInstanceView
    :ivar hardware_profile: Specifies the hardware settings for the virtual machine.
    :vartype hardware_profile: ~azure.mgmt.compute.models.HardwareProfile
    :ivar storage_profile: Specifies the storage settings for the virtual machine disks.
    :vartype storage_profile: ~azure.mgmt.compute.models.StorageProfile
    :ivar additional_capabilities: Specifies additional capabilities enabled or disabled on the
     virtual machine in the scale set. For instance: whether the virtual machine has the capability
     to support attaching managed data disks with UltraSSD_LRS storage account type.
    :vartype additional_capabilities: ~azure.mgmt.compute.models.AdditionalCapabilities
    :ivar os_profile: Specifies the operating system settings for the virtual machine.
    :vartype os_profile: ~azure.mgmt.compute.models.OSProfile
    :ivar security_profile: Specifies the Security related profile settings for the virtual
     machine.
    :vartype security_profile: ~azure.mgmt.compute.models.SecurityProfile
    :ivar network_profile: Specifies the network interfaces of the virtual machine.
    :vartype network_profile: ~azure.mgmt.compute.models.NetworkProfile
    :ivar network_profile_configuration: Specifies the network profile configuration of the virtual
     machine.
    :vartype network_profile_configuration:
     ~azure.mgmt.compute.models.VirtualMachineScaleSetVMNetworkProfileConfiguration
    :ivar diagnostics_profile: Specifies the boot diagnostic settings state. Minimum api-version:
     2015-06-15.
    :vartype diagnostics_profile: ~azure.mgmt.compute.models.DiagnosticsProfile
    :ivar availability_set: Specifies information about the availability set that the virtual
     machine should be assigned to. Virtual machines specified in the same availability set are
     allocated to different nodes to maximize availability. For more information about availability
     sets, see `Availability sets overview
     <https://docs.microsoft.com/azure/virtual-machines/availability-set-overview>`_. For more
     information on Azure planned maintenance, see `Maintenance and updates for Virtual Machines in
     Azure <https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates>`_. Currently,
     a VM can only be added to availability set at creation time. An existing VM cannot be added to
     an availability set.
    :vartype availability_set: ~azure.mgmt.compute.models.SubResource
    :ivar provisioning_state: The provisioning state, which only appears in the response.
    :vartype provisioning_state: str
    :ivar license_type: Specifies that the image or disk that is being used was licensed
     on-premises. :code:`<br>`:code:`<br>` Possible values for Windows Server operating system are:
     :code:`<br>`:code:`<br>` Windows_Client :code:`<br>`:code:`<br>` Windows_Server
     :code:`<br>`:code:`<br>` Possible values for Linux Server operating system are:
     :code:`<br>`:code:`<br>` RHEL_BYOS (for RHEL) :code:`<br>`:code:`<br>` SLES_BYOS (for SUSE)
     :code:`<br>`:code:`<br>` For more information, see `Azure Hybrid Use Benefit for Windows Server
     <https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing>`_
     :code:`<br>`:code:`<br>` `Azure Hybrid Use Benefit for Linux Server
     <https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux>`_
     :code:`<br>`:code:`<br>` Minimum api-version: 2015-06-15.
    :vartype license_type: str
    :ivar model_definition_applied: Specifies whether the model applied to the virtual machine is
     the model of the virtual machine scale set or the customized model for the virtual machine.
    :vartype model_definition_applied: str
    :ivar protection_policy: Specifies the protection policy of the virtual machine.
    :vartype protection_policy: ~azure.mgmt.compute.models.VirtualMachineScaleSetVMProtectionPolicy
    :ivar user_data: UserData for the VM, which must be base-64 encoded. Customer should not pass
     any secrets in here. Minimum api-version: 2021-03-01.
    :vartype user_data: str
    :ivar time_created: Specifies the time at which the Virtual Machine resource was created.
     Minimum api-version: 2021-11-01.
    :vartype time_created: ~datetime.datetime
    """

    latest_model_applied: Optional[bool] = rest_field(name="latestModelApplied", visibility=["read"])
    """Specifies whether the latest model has been applied to the virtual machine."""
    vm_id: Optional[str] = rest_field(name="vmId", visibility=["read"])
    """Azure VM unique ID."""
    instance_view: Optional["_models.VirtualMachineScaleSetVMInstanceView"] = rest_field(
        name="instanceView", visibility=["read"]
    )
    """The virtual machine instance view."""
    hardware_profile: Optional["_models.HardwareProfile"] = rest_field(name="hardwareProfile")
    """Specifies the hardware settings for the virtual machine."""
    storage_profile: Optional["_models.StorageProfile"] = rest_field(name="storageProfile")
    """Specifies the storage settings for the virtual machine disks."""
    additional_capabilities: Optional["_models.AdditionalCapabilities"] = rest_field(name="additionalCapabilities")
    """Specifies additional capabilities enabled or disabled on the virtual machine in the scale set.
     For instance: whether the virtual machine has the capability to support attaching managed data
     disks with UltraSSD_LRS storage account type."""
    os_profile: Optional["_models.OSProfile"] = rest_field(name="osProfile")
    """Specifies the operating system settings for the virtual machine."""
    security_profile: Optional["_models.SecurityProfile"] = rest_field(name="securityProfile")
    """Specifies the Security related profile settings for the virtual machine."""
    network_profile: Optional["_models.NetworkProfile"] = rest_field(name="networkProfile")
    """Specifies the network interfaces of the virtual machine."""
    network_profile_configuration: Optional["_models.VirtualMachineScaleSetVMNetworkProfileConfiguration"] = rest_field(
        name="networkProfileConfiguration"
    )
    """Specifies the network profile configuration of the virtual machine."""
    diagnostics_profile: Optional["_models.DiagnosticsProfile"] = rest_field(name="diagnosticsProfile")
    """Specifies the boot diagnostic settings state. Minimum api-version: 2015-06-15."""
    availability_set: Optional["_models.SubResource"] = rest_field(name="availabilitySet")
    """Specifies information about the availability set that the virtual machine should be assigned
     to. Virtual machines specified in the same availability set are allocated to different nodes to
     maximize availability. For more information about availability sets, see `Availability sets
     overview <https://docs.microsoft.com/azure/virtual-machines/availability-set-overview>`_. For
     more information on Azure planned maintenance, see `Maintenance and updates for Virtual
     Machines in Azure
     <https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates>`_. Currently, a VM
     can only be added to availability set at creation time. An existing VM cannot be added to an
     availability set."""
    provisioning_state: Optional[str] = rest_field(name="provisioningState", visibility=["read"])
    """The provisioning state, which only appears in the response."""
    license_type: Optional[str] = rest_field(name="licenseType")
    """Specifies that the image or disk that is being used was licensed on-premises.
     :code:`<br>`:code:`<br>` Possible values for Windows Server operating system are:
     :code:`<br>`:code:`<br>` Windows_Client :code:`<br>`:code:`<br>` Windows_Server
     :code:`<br>`:code:`<br>` Possible values for Linux Server operating system are:
     :code:`<br>`:code:`<br>` RHEL_BYOS (for RHEL) :code:`<br>`:code:`<br>` SLES_BYOS (for SUSE)
     :code:`<br>`:code:`<br>` For more information, see `Azure Hybrid Use Benefit for Windows Server
     <https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing>`_
     :code:`<br>`:code:`<br>` `Azure Hybrid Use Benefit for Linux Server
     <https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux>`_
     :code:`<br>`:code:`<br>` Minimum api-version: 2015-06-15."""
    model_definition_applied: Optional[str] = rest_field(name="modelDefinitionApplied", visibility=["read"])
    """Specifies whether the model applied to the virtual machine is the model of the virtual machine
     scale set or the customized model for the virtual machine."""
    protection_policy: Optional["_models.VirtualMachineScaleSetVMProtectionPolicy"] = rest_field(
        name="protectionPolicy"
    )
    """Specifies the protection policy of the virtual machine."""
    user_data: Optional[str] = rest_field(name="userData")
    """UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in
     here. Minimum api-version: 2021-03-01."""
    time_created: Optional[datetime.datetime] = rest_field(name="timeCreated", visibility=["read"], format="rfc3339")
    """Specifies the time at which the Virtual Machine resource was created. Minimum api-version:
     2021-11-01."""

    @overload
    def __init__(
        self,
        *,
        hardware_profile: Optional["_models.HardwareProfile"] = None,
        storage_profile: Optional["_models.StorageProfile"] = None,
        additional_capabilities: Optional["_models.AdditionalCapabilities"] = None,
        os_profile: Optional["_models.OSProfile"] = None,
        security_profile: Optional["_models.SecurityProfile"] = None,
        network_profile: Optional["_models.NetworkProfile"] = None,
        network_profile_configuration: Optional["_models.VirtualMachineScaleSetVMNetworkProfileConfiguration"] = None,
        diagnostics_profile: Optional["_models.DiagnosticsProfile"] = None,
        availability_set: Optional["_models.SubResource"] = None,
        license_type: Optional[str] = None,
        protection_policy: Optional["_models.VirtualMachineScaleSetVMProtectionPolicy"] = None,
        user_data: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineScaleSetVMProtectionPolicy(_model_base.Model):
    """The protection policy of a virtual machine scale set VM.

    :ivar protect_from_scale_in: Indicates that the virtual machine scale set VM shouldn't be
     considered for deletion during a scale-in operation.
    :vartype protect_from_scale_in: bool
    :ivar protect_from_scale_set_actions: Indicates that model updates or actions (including
     scale-in) initiated on the virtual machine scale set should not be applied to the virtual
     machine scale set VM.
    :vartype protect_from_scale_set_actions: bool
    """

    protect_from_scale_in: Optional[bool] = rest_field(name="protectFromScaleIn")
    """Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a
     scale-in operation."""
    protect_from_scale_set_actions: Optional[bool] = rest_field(name="protectFromScaleSetActions")
    """Indicates that model updates or actions (including scale-in) initiated on the virtual machine
     scale set should not be applied to the virtual machine scale set VM."""

    @overload
    def __init__(
        self,
        *,
        protect_from_scale_in: Optional[bool] = None,
        protect_from_scale_set_actions: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineSize(_model_base.Model):
    """Describes the properties of a VM size.

    :ivar name: The name of the virtual machine size.
    :vartype name: str
    :ivar number_of_cores: The number of cores supported by the virtual machine size. For
     Constrained vCPU capable VM sizes, this number represents the total vCPUs of quota that the VM
     uses. For accurate vCPU count, please refer to
     https://docs.microsoft.com/azure/virtual-machines/constrained-vcpu or
     https://docs.microsoft.com/rest/api/compute/resourceskus/list.
    :vartype number_of_cores: int
    :ivar os_disk_size_in_mb: The OS disk size, in MB, allowed by the virtual machine size.
    :vartype os_disk_size_in_mb: int
    :ivar resource_disk_size_in_mb: The resource disk size, in MB, allowed by the virtual machine
     size.
    :vartype resource_disk_size_in_mb: int
    :ivar memory_in_mb: The amount of memory, in MB, supported by the virtual machine size.
    :vartype memory_in_mb: int
    :ivar max_data_disk_count: The maximum number of data disks that can be attached to the virtual
     machine size.
    :vartype max_data_disk_count: int
    """

    name: Optional[str] = rest_field()
    """The name of the virtual machine size."""
    number_of_cores: Optional[int] = rest_field(name="numberOfCores")
    """The number of cores supported by the virtual machine size. For Constrained vCPU capable VM
     sizes, this number represents the total vCPUs of quota that the VM uses. For accurate vCPU
     count, please refer to https://docs.microsoft.com/azure/virtual-machines/constrained-vcpu or
     https://docs.microsoft.com/rest/api/compute/resourceskus/list."""
    os_disk_size_in_mb: Optional[int] = rest_field(name="osDiskSizeInMB")
    """The OS disk size, in MB, allowed by the virtual machine size."""
    resource_disk_size_in_mb: Optional[int] = rest_field(name="resourceDiskSizeInMB")
    """The resource disk size, in MB, allowed by the virtual machine size."""
    memory_in_mb: Optional[int] = rest_field(name="memoryInMB")
    """The amount of memory, in MB, supported by the virtual machine size."""
    max_data_disk_count: Optional[int] = rest_field(name="maxDataDiskCount")
    """The maximum number of data disks that can be attached to the virtual machine size."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        number_of_cores: Optional[int] = None,
        os_disk_size_in_mb: Optional[int] = None,
        resource_disk_size_in_mb: Optional[int] = None,
        memory_in_mb: Optional[int] = None,
        max_data_disk_count: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VirtualMachineSoftwarePatchProperties(_model_base.Model):
    """Describes the properties of a Virtual Machine software patch.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar patch_id: A unique identifier for the patch.
    :vartype patch_id: str
    :ivar name: The friendly name of the patch.
    :vartype name: str
    :ivar version: The version number of the patch. This property applies only to Linux patches.
    :vartype version: str
    :ivar kb_id: The KBID of the patch. Only applies to Windows patches.
    :vartype kb_id: str
    :ivar classifications: The classification(s) of the patch as provided by the patch publisher.
    :vartype classifications: list[str]
    :ivar reboot_behavior: Describes the reboot requirements of the patch. Known values are:
     "Unknown", "NeverReboots", "AlwaysRequiresReboot", and "CanRequestReboot".
    :vartype reboot_behavior: str or ~azure.mgmt.compute.models.VMGuestPatchRebootBehavior
    :ivar activity_id: The activity ID of the operation that produced this result. It is used to
     correlate across CRP and extension logs.
    :vartype activity_id: str
    :ivar published_date: The UTC timestamp when the repository published this patch.
    :vartype published_date: ~datetime.datetime
    :ivar last_modified_date_time: The UTC timestamp of the last update to this patch record.
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar assessment_state: Describes the availability of a given patch. Known values are:
     "Unknown" and "Available".
    :vartype assessment_state: str or ~azure.mgmt.compute.models.PatchAssessmentState
    """

    patch_id: Optional[str] = rest_field(name="patchId", visibility=["read"])
    """A unique identifier for the patch."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The friendly name of the patch."""
    version: Optional[str] = rest_field(visibility=["read"])
    """The version number of the patch. This property applies only to Linux patches."""
    kb_id: Optional[str] = rest_field(name="kbId", visibility=["read"])
    """The KBID of the patch. Only applies to Windows patches."""
    classifications: Optional[List[str]] = rest_field(visibility=["read"])
    """The classification(s) of the patch as provided by the patch publisher."""
    reboot_behavior: Optional[Union[str, "_models.VMGuestPatchRebootBehavior"]] = rest_field(
        name="rebootBehavior", visibility=["read"]
    )
    """Describes the reboot requirements of the patch. Known values are: \"Unknown\",
     \"NeverReboots\", \"AlwaysRequiresReboot\", and \"CanRequestReboot\"."""
    activity_id: Optional[str] = rest_field(name="activityId", visibility=["read"])
    """The activity ID of the operation that produced this result. It is used to correlate across CRP
     and extension logs."""
    published_date: Optional[datetime.datetime] = rest_field(
        name="publishedDate", visibility=["read"], format="rfc3339"
    )
    """The UTC timestamp when the repository published this patch."""
    last_modified_date_time: Optional[datetime.datetime] = rest_field(
        name="lastModifiedDateTime", visibility=["read"], format="rfc3339"
    )
    """The UTC timestamp of the last update to this patch record."""
    assessment_state: Optional[Union[str, "_models.PatchAssessmentState"]] = rest_field(
        name="assessmentState", visibility=["read"]
    )
    """Describes the availability of a given patch. Known values are: \"Unknown\" and \"Available\"."""


class VirtualMachineStatusCodeCount(_model_base.Model):
    """The status code and count of the virtual machine scale set instance view status summary.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The instance view status code.
    :vartype code: str
    :ivar count: The number of instances having a particular status code.
    :vartype count: int
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The instance view status code."""
    count: Optional[int] = rest_field(visibility=["read"])
    """The number of instances having a particular status code."""


class VirtualMachineUpdate(UpdateResource):
    """Describes a Virtual Machine Update.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar plan: Specifies information about the marketplace image used to create the virtual
     machine. This element is only used for marketplace images. Before you can use a marketplace
     image from an API, you must enable the image for programmatic use.  In the Azure portal, find
     the marketplace image that you want to use and then click **Want to deploy programmatically,
     Get Started ->**. Enter any required information and then click **Save**.
    :vartype plan: ~azure.mgmt.compute.models.Plan
    :ivar properties: Describes the properties of a Virtual Machine.
    :vartype properties: ~azure.mgmt.compute.models.VirtualMachineProperties
    :ivar identity: The identity of the virtual machine, if configured.
    :vartype identity: ~azure.mgmt.compute.models.VirtualMachineIdentity
    :ivar zones: The virtual machine zones.
    :vartype zones: list[str]
    """

    plan: Optional["_models.Plan"] = rest_field()
    """Specifies information about the marketplace image used to create the virtual machine. This
     element is only used for marketplace images. Before you can use a marketplace image from an
     API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace
     image that you want to use and then click **Want to deploy programmatically, Get Started ->**.
     Enter any required information and then click **Save**."""
    properties: Optional["_models.VirtualMachineProperties"] = rest_field()
    """Describes the properties of a Virtual Machine."""
    identity: Optional["_models.VirtualMachineIdentity"] = rest_field()
    """The identity of the virtual machine, if configured."""
    zones: Optional[List[str]] = rest_field()
    """The virtual machine zones."""

    __flattened_items = [
        "hardware_profile",
        "scheduled_events_policy",
        "storage_profile",
        "additional_capabilities",
        "os_profile",
        "network_profile",
        "security_profile",
        "diagnostics_profile",
        "availability_set",
        "virtual_machine_scale_set",
        "proximity_placement_group",
        "priority",
        "eviction_policy",
        "billing_profile",
        "host",
        "host_group",
        "provisioning_state",
        "instance_view",
        "license_type",
        "vm_id",
        "extensions_time_budget",
        "platform_fault_domain",
        "scheduled_events_profile",
        "user_data",
        "capacity_reservation",
        "application_profile",
        "time_created",
    ]

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        plan: Optional["_models.Plan"] = None,
        properties: Optional["_models.VirtualMachineProperties"] = None,
        identity: Optional["_models.VirtualMachineIdentity"] = None,
        zones: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class VMDiskSecurityProfile(_model_base.Model):
    """Specifies the security profile settings for the managed disk. **Note:** It can only be set for
    Confidential VMs.

    :ivar security_encryption_type: Specifies the EncryptionType of the managed disk. It is set to
     DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob,
     VMGuestStateOnly for encryption of just the VMGuestState blob, and NonPersistedTPM for not
     persisting firmware state in the VMGuestState blob.. **Note:** It can be set for only
     Confidential VMs. Known values are: "VMGuestStateOnly", "DiskWithVMGuestState", and
     "NonPersistedTPM".
    :vartype security_encryption_type: str or ~azure.mgmt.compute.models.SecurityEncryptionTypes
    :ivar disk_encryption_set: Specifies the customer managed disk encryption set resource id for
     the managed disk that is used for Customer Managed Key encrypted ConfidentialVM OS Disk and
     VMGuest blob.
    :vartype disk_encryption_set: ~azure.mgmt.compute.models.DiskEncryptionSetParameters
    """

    security_encryption_type: Optional[Union[str, "_models.SecurityEncryptionTypes"]] = rest_field(
        name="securityEncryptionType"
    )
    """Specifies the EncryptionType of the managed disk. It is set to DiskWithVMGuestState for
     encryption of the managed disk along with VMGuestState blob, VMGuestStateOnly for encryption of
     just the VMGuestState blob, and NonPersistedTPM for not persisting firmware state in the
     VMGuestState blob.. **Note:** It can be set for only Confidential VMs. Known values are:
     \"VMGuestStateOnly\", \"DiskWithVMGuestState\", and \"NonPersistedTPM\"."""
    disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = rest_field(name="diskEncryptionSet")
    """Specifies the customer managed disk encryption set resource id for the managed disk that is
     used for Customer Managed Key encrypted ConfidentialVM OS Disk and VMGuest blob."""

    @overload
    def __init__(
        self,
        *,
        security_encryption_type: Optional[Union[str, "_models.SecurityEncryptionTypes"]] = None,
        disk_encryption_set: Optional["_models.DiskEncryptionSetParameters"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VMGalleryApplication(_model_base.Model):
    """Specifies the required information to reference a compute gallery application version.


    :ivar tags: Optional, Specifies a passthrough value for more generic context.
    :vartype tags: str
    :ivar order: Optional, Specifies the order in which the packages have to be installed.
    :vartype order: int
    :ivar package_reference_id: Specifies the GalleryApplicationVersion resource id on the form of
     /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}.  # pylint: disable=line-too-long
     Required.
    :vartype package_reference_id: str
    :ivar configuration_reference: Optional, Specifies the uri to an azure blob that will replace
     the default configuration for the package if provided.
    :vartype configuration_reference: str
    :ivar treat_failure_as_deployment_failure: Optional, If true, any failure for any operation in
     the VmApplication will fail the deployment.
    :vartype treat_failure_as_deployment_failure: bool
    :ivar enable_automatic_upgrade: If set to true, when a new Gallery Application version is
     available in PIR/SIG, it will be automatically updated for the VM/VMSS.
    :vartype enable_automatic_upgrade: bool
    """

    tags: Optional[str] = rest_field()
    """Optional, Specifies a passthrough value for more generic context."""
    order: Optional[int] = rest_field()
    """Optional, Specifies the order in which the packages have to be installed."""
    package_reference_id: str = rest_field(name="packageReferenceId")
    """Specifies the GalleryApplicationVersion resource id on the form of
     /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}.  # pylint: disable=line-too-long
     Required."""
    configuration_reference: Optional[str] = rest_field(name="configurationReference")
    """Optional, Specifies the uri to an azure blob that will replace the default configuration for
     the package if provided."""
    treat_failure_as_deployment_failure: Optional[bool] = rest_field(name="treatFailureAsDeploymentFailure")
    """Optional, If true, any failure for any operation in the VmApplication will fail the deployment."""
    enable_automatic_upgrade: Optional[bool] = rest_field(name="enableAutomaticUpgrade")
    """If set to true, when a new Gallery Application version is available in PIR/SIG, it will be
     automatically updated for the VM/VMSS."""

    @overload
    def __init__(
        self,
        *,
        package_reference_id: str,
        tags: Optional[str] = None,
        order: Optional[int] = None,
        configuration_reference: Optional[str] = None,
        treat_failure_as_deployment_failure: Optional[bool] = None,
        enable_automatic_upgrade: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VmImagesInEdgeZoneListResult(_model_base.Model):
    """The List VmImages in EdgeZone operation response.

    :ivar value: The list of VMImages in EdgeZone.
    :vartype value: list[~azure.mgmt.compute.models.VirtualMachineImageResource]
    :ivar next_link: The URI to fetch the next page of VMImages in EdgeZone. Call ListNext() with
     this URI to fetch the next page of VmImages.
    :vartype next_link: str
    """

    value: Optional[List["_models.VirtualMachineImageResource"]] = rest_field()
    """The list of VMImages in EdgeZone."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The URI to fetch the next page of VMImages in EdgeZone. Call ListNext() with this URI to fetch
     the next page of VmImages."""

    @overload
    def __init__(
        self,
        *,
        value: Optional[List["_models.VirtualMachineImageResource"]] = None,
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VMScaleSetConvertToSinglePlacementGroupInput(_model_base.Model):  # pylint: disable=name-too-long
    """VMScaleSetConvertToSinglePlacementGroupInput.

    :ivar active_placement_group_id: Id of the placement group in which you want future virtual
     machine instances to be placed. To query placement group Id, please use Virtual Machine Scale
     Set VMs - Get API. If not provided, the platform will choose one with maximum number of virtual
     machine instances.
    :vartype active_placement_group_id: str
    """

    active_placement_group_id: Optional[str] = rest_field(name="activePlacementGroupId")
    """Id of the placement group in which you want future virtual machine instances to be placed. To
     query placement group Id, please use Virtual Machine Scale Set VMs - Get API. If not provided,
     the platform will choose one with maximum number of virtual machine instances."""

    @overload
    def __init__(
        self,
        *,
        active_placement_group_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VMSizeProperties(_model_base.Model):
    """Specifies VM Size Property settings on the virtual machine.

    :ivar v_cpus_available: Specifies the number of vCPUs available for the VM. When this property
     is not specified in the request body the default behavior is to set it to the value of vCPUs
     available for that VM size exposed in api response of `List all available virtual machine sizes
     in a region <https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list>`_.
    :vartype v_cpus_available: int
    :ivar v_cpus_per_core: Specifies the vCPU to physical core ratio. When this property is not
     specified in the request body the default behavior is set to the value of vCPUsPerCore for the
     VM Size exposed in api response of `List all available virtual machine sizes in a region
     <https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list>`_. **Setting this
     property to 1 also means that hyper-threading is disabled.**.
    :vartype v_cpus_per_core: int
    """

    v_cpus_available: Optional[int] = rest_field(name="vCPUsAvailable")
    """Specifies the number of vCPUs available for the VM. When this property is not specified in the
     request body the default behavior is to set it to the value of vCPUs available for that VM size
     exposed in api response of `List all available virtual machine sizes in a region
     <https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list>`_."""
    v_cpus_per_core: Optional[int] = rest_field(name="vCPUsPerCore")
    """Specifies the vCPU to physical core ratio. When this property is not specified in the request
     body the default behavior is set to the value of vCPUsPerCore for the VM Size exposed in api
     response of `List all available virtual machine sizes in a region
     <https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list>`_. **Setting this
     property to 1 also means that hyper-threading is disabled.**."""

    @overload
    def __init__(
        self,
        *,
        v_cpus_available: Optional[int] = None,
        v_cpus_per_core: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WindowsConfiguration(_model_base.Model):
    """Specifies Windows operating system settings on the virtual machine.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar provision_vm_agent: Indicates whether virtual machine agent should be provisioned on the
     virtual machine. When this property is not specified in the request body, it is set to true by
     default. This will ensure that VM Agent is installed on the VM so that extensions can be added
     to the VM later.
    :vartype provision_vm_agent: bool
    :ivar enable_automatic_updates: Indicates whether Automatic Updates is enabled for the Windows
     virtual machine. Default value is true. For virtual machine scale sets, this property can be
     updated and updates will take effect on OS reprovisioning.
    :vartype enable_automatic_updates: bool
    :ivar time_zone: Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time".
     Possible values can be `TimeZoneInfo.Id
     <https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id>`_ value
     from time zones returned by `TimeZoneInfo.GetSystemTimeZones
     <https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones>`_.
    :vartype time_zone: str
    :ivar additional_unattend_content: Specifies additional base-64 encoded XML formatted
     information that can be included in the Unattend.xml file, which is used by Windows Setup.
    :vartype additional_unattend_content:
     list[~azure.mgmt.compute.models.AdditionalUnattendContent]
    :ivar patch_settings: [Preview Feature] Specifies settings related to VM Guest Patching on
     Windows.
    :vartype patch_settings: ~azure.mgmt.compute.models.PatchSettings
    :ivar win_rm: Specifies the Windows Remote Management listeners. This enables remote Windows
     PowerShell.
    :vartype win_rm: ~azure.mgmt.compute.models.WinRMConfiguration
    :ivar enable_vm_agent_platform_updates: Indicates whether VMAgent Platform Updates are enabled
     for the Windows Virtual Machine.
    :vartype enable_vm_agent_platform_updates: bool
    """

    provision_vm_agent: Optional[bool] = rest_field(name="provisionVMAgent")
    """Indicates whether virtual machine agent should be provisioned on the virtual machine. When this
     property is not specified in the request body, it is set to true by default. This will ensure
     that VM Agent is installed on the VM so that extensions can be added to the VM later."""
    enable_automatic_updates: Optional[bool] = rest_field(name="enableAutomaticUpdates")
    """Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value
     is true. For virtual machine scale sets, this property can be updated and updates will take
     effect on OS reprovisioning."""
    time_zone: Optional[str] = rest_field(name="timeZone")
    """Specifies the time zone of the virtual machine. e.g. \"Pacific Standard Time\". Possible values
     can be `TimeZoneInfo.Id
     <https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id>`_ value
     from time zones returned by `TimeZoneInfo.GetSystemTimeZones
     <https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones>`_."""
    additional_unattend_content: Optional[List["_models.AdditionalUnattendContent"]] = rest_field(
        name="additionalUnattendContent"
    )
    """Specifies additional base-64 encoded XML formatted information that can be included in the
     Unattend.xml file, which is used by Windows Setup."""
    patch_settings: Optional["_models.PatchSettings"] = rest_field(name="patchSettings")
    """[Preview Feature] Specifies settings related to VM Guest Patching on Windows."""
    win_rm: Optional["_models.WinRMConfiguration"] = rest_field(name="winRM")
    """Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell."""
    enable_vm_agent_platform_updates: Optional[bool] = rest_field(
        name="enableVMAgentPlatformUpdates", visibility=["read"]
    )
    """Indicates whether VMAgent Platform Updates are enabled for the Windows Virtual Machine."""

    @overload
    def __init__(
        self,
        *,
        provision_vm_agent: Optional[bool] = None,
        enable_automatic_updates: Optional[bool] = None,
        time_zone: Optional[str] = None,
        additional_unattend_content: Optional[List["_models.AdditionalUnattendContent"]] = None,
        patch_settings: Optional["_models.PatchSettings"] = None,
        win_rm: Optional["_models.WinRMConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WindowsParameters(_model_base.Model):
    """Input for InstallPatches on a Windows VM, as directly received by the API.

    :ivar classifications_to_include: The update classifications to select when installing patches
     for Windows.
    :vartype classifications_to_include: list[str or
     ~azure.mgmt.compute.models.VMGuestPatchClassificationWindows]
    :ivar kb_numbers_to_include: Kbs to include in the patch operation.
    :vartype kb_numbers_to_include: list[str]
    :ivar kb_numbers_to_exclude: Kbs to exclude in the patch operation.
    :vartype kb_numbers_to_exclude: list[str]
    :ivar exclude_kbs_requiring_reboot: Filters out Kbs that don't have an
     InstallationRebootBehavior of 'NeverReboots' when this is set to true.
    :vartype exclude_kbs_requiring_reboot: bool
    :ivar max_patch_publish_date: This is used to install patches that were published on or before
     this given max published date.
    :vartype max_patch_publish_date: ~datetime.datetime
    """

    classifications_to_include: Optional[List[Union[str, "_models.VMGuestPatchClassificationWindows"]]] = rest_field(
        name="classificationsToInclude"
    )
    """The update classifications to select when installing patches for Windows."""
    kb_numbers_to_include: Optional[List[str]] = rest_field(name="kbNumbersToInclude")
    """Kbs to include in the patch operation."""
    kb_numbers_to_exclude: Optional[List[str]] = rest_field(name="kbNumbersToExclude")
    """Kbs to exclude in the patch operation."""
    exclude_kbs_requiring_reboot: Optional[bool] = rest_field(name="excludeKbsRequiringReboot")
    """Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is
     set to true."""
    max_patch_publish_date: Optional[datetime.datetime] = rest_field(name="maxPatchPublishDate", format="rfc3339")
    """This is used to install patches that were published on or before this given max published date."""

    @overload
    def __init__(
        self,
        *,
        classifications_to_include: Optional[List[Union[str, "_models.VMGuestPatchClassificationWindows"]]] = None,
        kb_numbers_to_include: Optional[List[str]] = None,
        kb_numbers_to_exclude: Optional[List[str]] = None,
        exclude_kbs_requiring_reboot: Optional[bool] = None,
        max_patch_publish_date: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WindowsVMGuestPatchAutomaticByPlatformSettings(_model_base.Model):  # pylint: disable=name-too-long
    """Specifies additional settings to be applied when patch mode AutomaticByPlatform is selected in
    Windows patch settings.

    :ivar reboot_setting: Specifies the reboot setting for all AutomaticByPlatform patch
     installation operations. Known values are: "Unknown", "IfRequired", "Never", and "Always".
    :vartype reboot_setting: str or
     ~azure.mgmt.compute.models.WindowsVMGuestPatchAutomaticByPlatformRebootSetting
    :ivar bypass_platform_safety_checks_on_user_schedule: Enables customer to schedule patching
     without accidental upgrades.
    :vartype bypass_platform_safety_checks_on_user_schedule: bool
    """

    reboot_setting: Optional[Union[str, "_models.WindowsVMGuestPatchAutomaticByPlatformRebootSetting"]] = rest_field(
        name="rebootSetting"
    )
    """Specifies the reboot setting for all AutomaticByPlatform patch installation operations. Known
     values are: \"Unknown\", \"IfRequired\", \"Never\", and \"Always\"."""
    bypass_platform_safety_checks_on_user_schedule: Optional[bool] = rest_field(
        name="bypassPlatformSafetyChecksOnUserSchedule"
    )
    """Enables customer to schedule patching without accidental upgrades."""

    @overload
    def __init__(
        self,
        *,
        reboot_setting: Optional[Union[str, "_models.WindowsVMGuestPatchAutomaticByPlatformRebootSetting"]] = None,
        bypass_platform_safety_checks_on_user_schedule: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WinRMConfiguration(_model_base.Model):
    """Describes Windows Remote Management configuration of the VM.

    :ivar listeners: The list of Windows Remote Management listeners.
    :vartype listeners: list[~azure.mgmt.compute.models.WinRMListener]
    """

    listeners: Optional[List["_models.WinRMListener"]] = rest_field()
    """The list of Windows Remote Management listeners."""

    @overload
    def __init__(
        self,
        *,
        listeners: Optional[List["_models.WinRMListener"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WinRMListener(_model_base.Model):
    """Describes Protocol and thumbprint of Windows Remote Management listener.

    :ivar protocol: Specifies the protocol of WinRM listener. Possible values are: **http,**
     **https.**. Known values are: "Http" and "Https".
    :vartype protocol: str or ~azure.mgmt.compute.models.ProtocolTypes
    :ivar certificate_url: This is the URL of a certificate that has been uploaded to Key Vault as
     a secret. For adding a secret to the Key Vault, see `Add a key or secret to the key vault
     <https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add>`_. In this case, your
     certificate needs to be the Base64 encoding of the following JSON Object which is encoded in
     UTF-8: :code:`<br>`:code:`<br>` {:code:`<br>`
     "data":":code:`<Base64-encoded-certificate>`",:code:`<br>`  "dataType":"pfx",:code:`<br>`
     "password":":code:`<pfx-file-password>`":code:`<br>`} :code:`<br>` To install certificates on a
     virtual machine it is recommended to use the `Azure Key Vault virtual machine extension for
     Linux <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux>`_ or the
     `Azure Key Vault virtual machine extension for Windows
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows>`_.
    :vartype certificate_url: str
    """

    protocol: Optional[Union[str, "_models.ProtocolTypes"]] = rest_field()
    """Specifies the protocol of WinRM listener. Possible values are: **http,** **https.**. Known
     values are: \"Http\" and \"Https\"."""
    certificate_url: Optional[str] = rest_field(name="certificateUrl")
    """This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a
     secret to the Key Vault, see `Add a key or secret to the key vault
     <https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add>`_. In this case, your
     certificate needs to be the Base64 encoding of the following JSON Object which is encoded in
     UTF-8: :code:`<br>`:code:`<br>` {:code:`<br>`
     \"data\":\":code:`<Base64-encoded-certificate>`\",:code:`<br>`
     \"dataType\":\"pfx\",:code:`<br>`  \"password\":\":code:`<pfx-file-password>`\":code:`<br>`}
     :code:`<br>` To install certificates on a virtual machine it is recommended to use the `Azure
     Key Vault virtual machine extension for Linux
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux>`_ or the `Azure
     Key Vault virtual machine extension for Windows
     <https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows>`_."""

    @overload
    def __init__(
        self,
        *,
        protocol: Optional[Union[str, "_models.ProtocolTypes"]] = None,
        certificate_url: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
