# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Dict, List, Optional, TYPE_CHECKING

from .. import _serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Fish(_serialization.Model):
    """This is base model for polymorphic multiple levels inheritance with a discriminator.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    Salmon, Shark

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for Fish. Required.
    :vartype kind: str
    :ivar age: Required.
    :vartype age: int
    """

    _validation = {
        "kind": {"required": True},
        "age": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "age": {"key": "age", "type": "int"},
    }

    _subtype_map = {"kind": {"salmon": "Salmon", "shark": "Shark"}}

    def __init__(self, *, age: int, **kwargs: Any) -> None:
        """
        :keyword age: Required.
        :paramtype age: int
        """
        super().__init__(**kwargs)
        self.kind: Optional[str] = None
        self.age = age


class Shark(Fish):
    """The second level model in polymorphic multiple levels inheritance and it defines a new
    discriminator.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    GoblinShark, SawShark

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for Fish. Required.
    :vartype kind: str
    :ivar age: Required.
    :vartype age: int
    :ivar sharktype: Required.
    :vartype sharktype: str
    """

    _validation = {
        "kind": {"required": True},
        "age": {"required": True},
        "sharktype": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "age": {"key": "age", "type": "int"},
        "sharktype": {"key": "sharktype", "type": "str"},
    }

    _subtype_map = {"kind": {"goblin": "GoblinShark", "saw": "SawShark"}}

    def __init__(self, *, age: int, **kwargs: Any) -> None:
        """
        :keyword age: Required.
        :paramtype age: int
        """
        super().__init__(age=age, **kwargs)
        self.kind: str = "shark"
        self.sharktype: str = "shark"


class GoblinShark(Shark):
    """The third level model GoblinShark in polymorphic multiple levels inheritance.

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for Fish. Required.
    :vartype kind: str
    :ivar age: Required.
    :vartype age: int
    :ivar sharktype: Required.
    :vartype sharktype: str
    """

    _validation = {
        "kind": {"required": True},
        "age": {"required": True},
        "sharktype": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "age": {"key": "age", "type": "int"},
        "sharktype": {"key": "sharktype", "type": "str"},
    }

    def __init__(self, *, age: int, **kwargs: Any) -> None:
        """
        :keyword age: Required.
        :paramtype age: int
        """
        super().__init__(age=age, **kwargs)
        self.kind: str = "goblin"
        self.sharktype: str = "goblin"


class Salmon(Fish):
    """The second level model in polymorphic multiple levels inheritance which contains references to
    other polymorphic instances.

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for Fish. Required.
    :vartype kind: str
    :ivar age: Required.
    :vartype age: int
    :ivar friends:
    :vartype friends: list[~azure.mgmt.edgezones.models.Fish]
    :ivar hate: Dictionary of :code:`<Fish>`.
    :vartype hate: dict[str, ~azure.mgmt.edgezones.models.Fish]
    :ivar partner: This is base model for polymorphic multiple levels inheritance with a
     discriminator.
    :vartype partner: ~azure.mgmt.edgezones.models.Fish
    """

    _validation = {
        "kind": {"required": True},
        "age": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "age": {"key": "age", "type": "int"},
        "friends": {"key": "friends", "type": "[Fish]"},
        "hate": {"key": "hate", "type": "{Fish}"},
        "partner": {"key": "partner", "type": "Fish"},
    }

    def __init__(
        self,
        *,
        age: int,
        friends: Optional[List["_models.Fish"]] = None,
        hate: Optional[Dict[str, "_models.Fish"]] = None,
        partner: Optional["_models.Fish"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword age: Required.
        :paramtype age: int
        :keyword friends:
        :paramtype friends: list[~azure.mgmt.edgezones.models.Fish]
        :keyword hate: Dictionary of :code:`<Fish>`.
        :paramtype hate: dict[str, ~azure.mgmt.edgezones.models.Fish]
        :keyword partner: This is base model for polymorphic multiple levels inheritance with a
         discriminator.
        :paramtype partner: ~azure.mgmt.edgezones.models.Fish
        """
        super().__init__(age=age, **kwargs)
        self.kind: str = "salmon"
        self.friends = friends
        self.hate = hate
        self.partner = partner


class SawShark(Shark):
    """The third level model SawShark in polymorphic multiple levels inheritance.

    All required parameters must be populated in order to send to server.

    :ivar kind: Discriminator property for Fish. Required.
    :vartype kind: str
    :ivar age: Required.
    :vartype age: int
    :ivar sharktype: Required.
    :vartype sharktype: str
    """

    _validation = {
        "kind": {"required": True},
        "age": {"required": True},
        "sharktype": {"required": True},
    }

    _attribute_map = {
        "kind": {"key": "kind", "type": "str"},
        "age": {"key": "age", "type": "int"},
        "sharktype": {"key": "sharktype", "type": "str"},
    }

    def __init__(self, *, age: int, **kwargs: Any) -> None:
        """
        :keyword age: Required.
        :paramtype age: int
        """
        super().__init__(age=age, **kwargs)
        self.kind: str = "saw"
        self.sharktype: str = "saw"
